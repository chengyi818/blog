{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1460014782456},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1460014782456},{"_id":"themes/jacman/README.md","hash":"563fd972b298b6b00540b34c4cfe9485084ea8d5","modified":1460014782456},{"_id":"themes/jacman/README_zh.md","hash":"0854e4c96f53005f3a47e21af3f8aee361719ce4","modified":1460014782456},{"_id":"themes/jacman/_config.yml","hash":"57a924ffb5d804faa21f1838dd9fb9f8205134f1","modified":1460015232836},{"_id":"source/_drafts/2016-01-01-template.md","hash":"ed4f6a551604f60bc0111416f6eeafdd408b3d97","modified":1460012310345},{"_id":"source/_drafts/2016-03-15-简历.md","hash":"ed8d8037a53edf3f8e03f1510168bfb926970acd","modified":1460010868549},{"_id":"source/_drafts/2016-04-09-我的chrome_插件篇.md","hash":"b0d3609de18097757d1cc6f097cf87b1197e5aab","modified":1460012508645},{"_id":"source/_drafts/2016-04-16-我的chrome续.md","hash":"0a6f67920c17f0430d5d75907404fbff2a80bed2","modified":1460012508649},{"_id":"source/_posts/2015-08-20-xargs用法详解.md","hash":"ddc94ea685adfe761cffb21627f3fddea9dc49ca","modified":1460010994169},{"_id":"source/_posts/2015-08-31-helloworld-ipk.md","hash":"85fbcdc74b8d7b5096b97734c7f6c3fdc43c5009","modified":1460011004281},{"_id":"source/_posts/2015-09-02-Openwrt_LuCI模块练习详细步骤.md","hash":"cd274c513ab1db3f9f94537071f13ad91c2b54be","modified":1460011501665},{"_id":"source/_posts/2015-12-13-openwrt源码目录概述.md","hash":"49d38ef2dff9c12c111cf886c6281cdeb087d46b","modified":1460012508633},{"_id":"source/_posts/2015-12-20-我的Makefile学习冲动and编译过程概述.md","hash":"e849d304fb37937238a4c52fc7c2c83729c25c4b","modified":1460012508637},{"_id":"source/_posts/2015-12-26-openwrt主Makefile解析.md","hash":"266b624c42f29900b618107d8b3852f9f7ea9339","modified":1460012447297},{"_id":"source/_posts/2016-01-03-openwrt单个ipk编译过程.md","hash":"0aa7cc479d635f92278825cf8194c296ad251c51","modified":1460012451557},{"_id":"source/_posts/2016-01-10-openwrt打包过程.md","hash":"f31d18504b8a9b453af96909b3eaa89f7a604fab","modified":1460012459693},{"_id":"source/_posts/2016-01-17-第一个lxc容器.md","hash":"ece201b7261241beff50546e7f5b73a3884258c4","modified":1460012467597},{"_id":"source/_posts/2016-01-24-工具说_思维导图.md","hash":"9b6a6795b96b163a59f86c931b7e2510730b6214","modified":1460012471441},{"_id":"source/_posts/2016-01-30-工具说总序.md","hash":"dc2dc037639a87790d84cee4a8f82500eb437546","modified":1460011137445},{"_id":"source/_posts/2016-02-08-事务管理GTD.md","hash":"fb9b83b57127f0c1ffee6bc4f67738311a152243","modified":1460012483249},{"_id":"source/_posts/2016-02-27-pomotodo.md","hash":"0ea97754c96bbb54349d054998f3a3be2bba1adf","modified":1460012487765},{"_id":"source/_posts/2016-03-05-Linux工具推荐.md","hash":"13ea3bd4472c1651acc45d0a8ad73a13e394ae82","modified":1460012492289},{"_id":"source/_posts/2016-03-12-dotfiles总述.md","hash":"a48c3757be19d3549ddfdc173a22ddb1f1da15ea","modified":1460012497113},{"_id":"source/_posts/2016-03-19-翻墙之我见.md","hash":"64a3a8e377b1a3a955fa382bc97478089491448d","modified":1460011188237},{"_id":"source/_posts/2016-03-27-平铺窗口管理器i3.md","hash":"71345feb341981a06b55c31c460355923225ac30","modified":1460012502833},{"_id":"source/categories/index.md","hash":"462ca5114e553ae8888280195efd15be0d660ede","modified":1460010432181},{"_id":"source/tags/index.md","hash":"bd4bc19b19936ad883c55bbebe68a59763c845be","modified":1460010432181},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1460014782452},{"_id":"themes/jacman/.git/config","hash":"be0a8da17af044443c4ba0add02e1cedebd88957","modified":1460014782452},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1460014775048},{"_id":"themes/jacman/.git/index","hash":"2c74af3e41a0d43e6734bedd44b7139af58309fb","modified":1460014812684},{"_id":"themes/jacman/.git/packed-refs","hash":"f246a63dfb038e19eaa84b35e269f7e003f27f92","modified":1460014782452},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1460014782456},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1460014782456},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1460014782456},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1460014782456},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1460014782456},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1460014782456},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1460014782456},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1460014782456},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1460014782456},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1460014782456},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1460014782456},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1460014775048},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1460014775048},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1460014775048},{"_id":"themes/jacman/.git/logs/HEAD","hash":"4f854d75f4bfded6ea2c3450477b2e8702a73910","modified":1460014782452},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1460014782456},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1460014782456},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1460014782456},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1460014782460},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1460014782460},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1460014782460},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1460014782460},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1460014782460},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1460014782464},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1460014782464},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1460014782464},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1460014782464},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1460014782460},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1460014782460},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1460014782460},{"_id":"themes/jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1460014782464},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1460014782464},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1460014782464},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1460014782464},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1460014782464},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1460014782464},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1460014782464},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1460014782464},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1460014782464},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1460014782464},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1460014782468},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1460014782468},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1460014782468},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1460014782468},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1460014782468},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1460014782468},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1460014782460},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1460014782464},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1460014782464},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1460014782468},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1460014782468},{"_id":"themes/jacman/.git/objects/pack/pack-1568961bb442b0d9df4480e45a7d35c6ad20dce2.idx","hash":"8712eaf0e3aaf625cd1c389f89753ef1631e86b2","modified":1460014782432},{"_id":"themes/jacman/.git/refs/heads/master","hash":"13185a7c7bfb9dd84c6eb5e5fe7cc7b4e64daef7","modified":1460014782452},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1460014782456},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1460014782456},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1460014782456},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1460014782456},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1460014782456},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460014782456},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1460014782460},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1460014782460},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1460014782460},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1460014782460},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1460014782460},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1460014782460},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1460014782464},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"4f854d75f4bfded6ea2c3450477b2e8702a73910","modified":1460014782452},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1460014782452},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1460014782456},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1460014782456},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"4f854d75f4bfded6ea2c3450477b2e8702a73910","modified":1460014782452},{"_id":"themes/jacman/.git/objects/pack/pack-1568961bb442b0d9df4480e45a7d35c6ad20dce2.pack","hash":"3f2ff9cb2092cc8738cf43bb727e1825cb866090","modified":1460014782432},{"_id":"public/categories/index.html","hash":"24c23010dea62914b1ea1dfeb0640a2d792fcede","modified":1460015247729},{"_id":"public/tags/index.html","hash":"47a543efdc6d94a3000a5b96b16a20bcbdc7f3b3","modified":1460015247729},{"_id":"public/archives/index.html","hash":"c3db39973e7bde5282cab61e50b774b5b0a1bfa1","modified":1460015247729},{"_id":"public/archives/page/2/index.html","hash":"e81a2f9e2659eac7c2164e4c8642bf1baace9c71","modified":1460015247729},{"_id":"public/archives/2015/index.html","hash":"cbaa036a006a5aa1d98ff406e090af27f38a1490","modified":1460015247729},{"_id":"public/archives/2015/08/index.html","hash":"058a23af3c417ff74cbd77e45278f43ab37b7ab2","modified":1460015247729},{"_id":"public/archives/2015/09/index.html","hash":"b68bba9dbafdf1425c0e518a27048750b510cb85","modified":1460015247730},{"_id":"public/archives/2015/12/index.html","hash":"3ffdfc2a71849ddeb466b60ba13e64d99b88dee1","modified":1460015247730},{"_id":"public/archives/2016/index.html","hash":"82282323a59ce23e02d59808ab0c02ef4516b52a","modified":1460015247730},{"_id":"public/archives/2016/page/2/index.html","hash":"bdfd8c3da3c17d0e61a8dbd209df9efc31a6357c","modified":1460015247730},{"_id":"public/archives/2016/01/index.html","hash":"80d59b583ff97fa066483005bc174e4da9ce57dc","modified":1460015247730},{"_id":"public/archives/2016/02/index.html","hash":"cb6d116c0cebc26268e5783a561b95c7346b8fab","modified":1460015247730},{"_id":"public/archives/2016/03/index.html","hash":"173eeaca5737194323b6ec07466ca28ce3246333","modified":1460015247730},{"_id":"public/categories/openwrt/index.html","hash":"23164486dbf2b7258e506da6e6950be0bf3f412e","modified":1460015247730},{"_id":"public/categories/工具/index.html","hash":"e5bc59c5584dfa34ac7f127b63bc7e111fcc70cc","modified":1460015247730},{"_id":"public/categories/命令行的艺术/index.html","hash":"1ed6f32bbe2277b0c7b0794e644b87fef50b2f46","modified":1460015247730},{"_id":"public/categories/docker/index.html","hash":"208e8eb5a23d0a630c28c4c372fc3b24d7f84ea5","modified":1460015247730},{"_id":"public/tags/Linux/index.html","hash":"d0090a6f66615f398c85415298d3689f0ad84fc7","modified":1460015247730},{"_id":"public/tags/工具说/index.html","hash":"9ff4599abebe7b3ba99df46f9ba05f46948d7e27","modified":1460015247730},{"_id":"public/tags/openwrt/index.html","hash":"cc89839e2810ca111d25023acea06005ccdc37a2","modified":1460015247730},{"_id":"public/tags/深度/index.html","hash":"00a9aabdca02a44a848254dc7e85214dab2ea84f","modified":1460015247730},{"_id":"public/tags/makefile/index.html","hash":"70a8bbdfa90a2c0b2ababdda6c8eac6e53773955","modified":1460015247730},{"_id":"public/tags/lxc/index.html","hash":"f4e66c00260ace566049f697ee7ce382c9e1bb82","modified":1460015247730},{"_id":"public/2016/03/27/平铺窗口管理器i3/index.html","hash":"c0259d95c40c69a62e8b38bf7e7f74a3bf14ad7d","modified":1460015247730},{"_id":"public/2016/03/19/翻墙之我见/index.html","hash":"a19532dbaad2a684dc757fd6cf2a33f8ba065538","modified":1460015247731},{"_id":"public/2016/03/12/dotfiles总述/index.html","hash":"80e5064fa155114dc4e92ec259acdf3d679ea645","modified":1460015247731},{"_id":"public/2016/03/05/Linux工具推荐/index.html","hash":"7449b046efdd605dd6769435c56ee1b199015a08","modified":1460015247731},{"_id":"public/2016/02/27/pomotodo/index.html","hash":"5e5d902e3df52d0263b5b8f73f2ac423ab45b68e","modified":1460015247731},{"_id":"public/2016/02/08/事务管理GTD/index.html","hash":"4b4e49487a65f60a53c7e0b9212be0ab1eb43327","modified":1460015247731},{"_id":"public/2016/01/30/工具说总序/index.html","hash":"68378e2aaaa0a74c198e3cd645bad82a5404b839","modified":1460015247731},{"_id":"public/2016/01/24/工具说_思维导图/index.html","hash":"0f4430d25576017b1d83c426d8b8d04c04da9750","modified":1460015247731},{"_id":"public/2016/01/17/第一个lxc容器/index.html","hash":"4358a5b249d9f8afef2eda0af39f0ac9c1483de4","modified":1460015247731},{"_id":"public/2016/01/10/openwrt打包过程/index.html","hash":"aa07c538032e1c5f74ed08e167938b19b70da78d","modified":1460015247731},{"_id":"public/2016/01/03/openwrt单个ipk编译过程/index.html","hash":"31b0fb765bed610ca1714c61b574b08f621ad30a","modified":1460015247731},{"_id":"public/2015/12/26/openwrt主Makefile解析/index.html","hash":"fff6bd6da5faf7ca8297420c88f95eb283d7abcc","modified":1460015247731},{"_id":"public/2015/12/20/我的Makefile学习冲动and编译过程概述/index.html","hash":"975de03b78233d12bb3af5f7825b39f5df042120","modified":1460015247731},{"_id":"public/2015/12/13/openwrt源码目录概述/index.html","hash":"0fdae45fa4c574ad441be889410c7da528cae316","modified":1460015247732},{"_id":"public/2015/09/02/Openwrt_LuCI模块练习详细步骤/index.html","hash":"936a8443f9c82cc7a20b78e108cff910fa9b328e","modified":1460015247732},{"_id":"public/2015/08/31/helloworld-ipk/index.html","hash":"0a0724dfdc26316dc0828db12e54533e72e3bb5f","modified":1460015247732},{"_id":"public/2015/08/20/xargs用法详解/index.html","hash":"7dad9286eca0dbed3925df5ec3d6040e856a11e1","modified":1460015247732},{"_id":"public/index.html","hash":"d323280cf773f5ec94383fc42aaeed6283aea0ad","modified":1460015247732},{"_id":"public/page/2/index.html","hash":"65e8d345c4047f9ca9558645b8ee3a1cabc88bbb","modified":1460015247732},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1460015247740},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1460015247740},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1460015247740},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1460015247740},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1460015247740},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1460015247740},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460015247740},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1460015247740},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1460015247740},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1460015247740},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460015247740},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460015247741},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460015247741},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460015247741},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460015247741},{"_id":"public/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1460015247741},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1460015247741},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1460015247741},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1460015247741},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1460015247741},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1460015247741},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1460015247741},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1460015247741},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1460015247741},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1460015247741},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1460015247741},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1460015247742},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460015247742},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1460015248353},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1460015248354},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1460015248354},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1460015248354},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1460015248357},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1460015248357},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1460015248357},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1460015248357},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1460015248357},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1460015248357},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1460015248357},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1460015248357},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1460015248357},{"_id":"public/css/style.css","hash":"ace9c3df88af85f862060a4cdd5d4716c9a2e5fc","modified":1460015248357},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1460015248357},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1460015248357},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1460015248357},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1460015248357},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1460015248362},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1460015248363}],"Category":[{"name":"openwrt","_id":"cimpzdpnb0004m1f1zrn2uj5d"},{"name":"工具","_id":"cimpzdpnh0009m1f1eol6mez2"},{"name":"命令行的艺术","_id":"cimpzdpnv000mm1f1mwxa7qb4"},{"name":"docker","_id":"cimpzdpo20010m1f1hn8wkvez"}],"Data":[],"Page":[{"_content":"layout: categories\ntitle: categories\n","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n","date":"2016-04-07T06:27:12.181Z","updated":"2016-04-07T06:27:12.181Z","path":"categories/index.html","title":"","comments":1,"layout":"page","_id":"cimpzdpn60001m1f18imrub7h","content":"<p>layout: categories<br>title: categories</p>\n","excerpt":"","more":"<p>layout: categories<br>title: categories</p>\n"},{"_content":"layout: tags\ntitile: tags\n","source":"tags/index.md","raw":"layout: tags\ntitile: tags\n","date":"2016-04-07T06:27:12.181Z","updated":"2016-04-07T06:27:12.181Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cimpzdpp4002tm1f1tztjgqok","content":"<p>layout: tags<br>titile: tags</p>\n","excerpt":"","more":"<p>layout: tags<br>titile: tags</p>\n"}],"Post":[{"title":"工具说_时间管理pomotodo","description":"附加一段文章摘要，字数最好在140字以内。","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十一周 :smile:\n\n---\n\n<!--more-->\n","source":"_drafts/2016-01-01-template.md","raw":"---\ntitle: 工具说_时间管理pomotodo\ncategories: openwrt #分类\ntags: [Linux,工具说] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 附加一段文章摘要，字数最好在140字以内。\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十一周 :smile:\n\n---\n\n<!--more-->\n","slug":"template","published":0,"date":"2015-12-31T16:00:00.000Z","updated":"2016-04-07T06:58:30.345Z","layout":"post","photos":[],"link":"","_id":"cimpzdpn00000m1f1fqt5m3ql","content":"<p>本周是成胖子每周一博的第十一周 :smile:</p>\n<hr>\n<a id=\"more\"></a>\n","excerpt":"<p>本周是成胖子每周一博的第十一周 :smile:</p>\n<hr>","more":""},{"_content":"#Long term support\n---\n\n# 联系方式\n\n- 手机：1561818631\n- Email：chengyi818@foxmail.com\n- 微信号：ice_river818\n\n---\n\n# 个人信息\n\n - 成祎/男/1988\n - 工作年限：1年\n - 技术博客：yiting.co\n - Github：http://github.com/chengyi818\n - Stackoverflow: http://stackoverflow.com/users/5309028/fat-cheng\n - 目前职位：嵌入式初级工程师\n - 期望薪资：税前月薪12k左右\n - 期望城市：上海\n\n---\n\n# 工作经历\n\n## 斐讯数据通信技术有限公司 （ 2015年1月 ~ ）\n\n### ipk_client项目(2月~)\n项目目的是通过服务器来管控远端路由器中的ipk,我主要负责客户端的编写.\n服务器与客户端通过json报文通信,基本功能已经完成.目前的困难在于由于设计文档是初级开发人员商量完成,很多问题可能考虑不是很到位.目前只能边摸索边完成.\n\n### 12月~1月\n在openwrt上调试lxc容器,为lxc容器编译基于busybox的文件系统,后因特殊原因中止.在此期间了解了lxc基本操作.工作之余,了解了docker的基本使用.\n\n### 9月~11月\n从博通CMS方案切换到openwrt开源方案,熟悉openwrt工作环境.在团队内部,推进git的使用.在完成基本ipk demo开发后,输出博客,帮助后面的同事快速熟悉开发流程.对于一个大型项目的代码结构很不熟悉令我很苦恼,在阅读了GNU Make文档后,阅读了openwrt所有Makefile相关文件,输出分享和博客.\n\n### 6月~8月\n参加公司培训,同时在课余时间读了些技术书籍.\n\n### 1月~5月\n熟悉嵌入式相关工作环境,在导师及同事帮助下下解决小bug.\n\n---\n\n# 学习经历\n\n## 研究生\n2012年9月~2015年1月 西安电子科技大学 密码学\n\n## 本科\n2006年9月~2010年7月 西安电子科技大学 通信工程\n\n---\n\n# 开源项目和作品\n\n## 开源项目\n\n - [git_sop](https://github.com/chengyi818/git_sop)：git在团队中使用包括基本操作和工作流.相比较svn,团队成员切换有一定学习成本.我想把基本操作和我们的工作流结合后,提供傻瓜式的操作.\n - [dotfiles](https://github.com/chengyi818/dotfiles)：我喜欢tmux+vim+ohmyzsh的环境,所以综合各种框架,写了个一键式安装脚本,便于将新环境快速布置为自己熟悉的环境.\n\n## 技术文章\n\n- [Openwrt LuCI模块练习详细步骤](http://yiting.co/2015/09/02/Openwrt_LuCI%E6%A8%A1%E5%9D%97%E7%BB%83%E4%B9%A0%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4.html)\n- [openwrt编译全过程](http://yiting.co/2015/12/13/openwrt%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E6%A6%82%E8%BF%B0.html)\n\n## 技术分享\n\n - 2015年8月公司内部分享：git使用和工作流\n - 2015年11月公司内部分享：openwrt编译全过程\n\n# 技能清单\n\n- 计算机网络：熟悉\n- Linux工作环境：熟悉\n- git : 熟悉\n- GNU Makefile : 熟悉\n- bash shell : 了解\n- 正则表达式 : 了解\n\n---\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n","source":"_drafts/2016-03-15-简历.md","raw":"#Long term support\n---\n\n# 联系方式\n\n- 手机：1561818631\n- Email：chengyi818@foxmail.com\n- 微信号：ice_river818\n\n---\n\n# 个人信息\n\n - 成祎/男/1988\n - 工作年限：1年\n - 技术博客：yiting.co\n - Github：http://github.com/chengyi818\n - Stackoverflow: http://stackoverflow.com/users/5309028/fat-cheng\n - 目前职位：嵌入式初级工程师\n - 期望薪资：税前月薪12k左右\n - 期望城市：上海\n\n---\n\n# 工作经历\n\n## 斐讯数据通信技术有限公司 （ 2015年1月 ~ ）\n\n### ipk_client项目(2月~)\n项目目的是通过服务器来管控远端路由器中的ipk,我主要负责客户端的编写.\n服务器与客户端通过json报文通信,基本功能已经完成.目前的困难在于由于设计文档是初级开发人员商量完成,很多问题可能考虑不是很到位.目前只能边摸索边完成.\n\n### 12月~1月\n在openwrt上调试lxc容器,为lxc容器编译基于busybox的文件系统,后因特殊原因中止.在此期间了解了lxc基本操作.工作之余,了解了docker的基本使用.\n\n### 9月~11月\n从博通CMS方案切换到openwrt开源方案,熟悉openwrt工作环境.在团队内部,推进git的使用.在完成基本ipk demo开发后,输出博客,帮助后面的同事快速熟悉开发流程.对于一个大型项目的代码结构很不熟悉令我很苦恼,在阅读了GNU Make文档后,阅读了openwrt所有Makefile相关文件,输出分享和博客.\n\n### 6月~8月\n参加公司培训,同时在课余时间读了些技术书籍.\n\n### 1月~5月\n熟悉嵌入式相关工作环境,在导师及同事帮助下下解决小bug.\n\n---\n\n# 学习经历\n\n## 研究生\n2012年9月~2015年1月 西安电子科技大学 密码学\n\n## 本科\n2006年9月~2010年7月 西安电子科技大学 通信工程\n\n---\n\n# 开源项目和作品\n\n## 开源项目\n\n - [git_sop](https://github.com/chengyi818/git_sop)：git在团队中使用包括基本操作和工作流.相比较svn,团队成员切换有一定学习成本.我想把基本操作和我们的工作流结合后,提供傻瓜式的操作.\n - [dotfiles](https://github.com/chengyi818/dotfiles)：我喜欢tmux+vim+ohmyzsh的环境,所以综合各种框架,写了个一键式安装脚本,便于将新环境快速布置为自己熟悉的环境.\n\n## 技术文章\n\n- [Openwrt LuCI模块练习详细步骤](http://yiting.co/2015/09/02/Openwrt_LuCI%E6%A8%A1%E5%9D%97%E7%BB%83%E4%B9%A0%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4.html)\n- [openwrt编译全过程](http://yiting.co/2015/12/13/openwrt%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E6%A6%82%E8%BF%B0.html)\n\n## 技术分享\n\n - 2015年8月公司内部分享：git使用和工作流\n - 2015年11月公司内部分享：openwrt编译全过程\n\n# 技能清单\n\n- 计算机网络：熟悉\n- Linux工作环境：熟悉\n- git : 熟悉\n- GNU Makefile : 熟悉\n- bash shell : 了解\n- 正则表达式 : 了解\n\n---\n\n# 致谢\n感谢您花时间阅读我的简历，期待能有机会和您共事。\n","slug":"简历","published":0,"date":"2016-03-14T16:00:00.000Z","updated":"2016-04-07T06:34:28.549Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cimpzdpn70002m1f1ypixfmgu","content":"<h2 id=\"Long-term-support\"><a href=\"#Long-term-support\" class=\"headerlink\" title=\"#Long term support\"></a>#Long term support</h2><h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：1561818631</li>\n<li>Email：chengyi818@foxmail.com</li>\n<li>微信号：ice_river818</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>成祎/男/1988</li>\n<li>工作年限：1年</li>\n<li>技术博客：yiting.co</li>\n<li>Github：<a href=\"http://github.com/chengyi818\" target=\"_blank\" rel=\"external\">http://github.com/chengyi818</a></li>\n<li>Stackoverflow: <a href=\"http://stackoverflow.com/users/5309028/fat-cheng\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/users/5309028/fat-cheng</a></li>\n<li>目前职位：嵌入式初级工程师</li>\n<li>期望薪资：税前月薪12k左右</li>\n<li>期望城市：上海</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"斐讯数据通信技术有限公司-（-2015年1月-）\"><a href=\"#斐讯数据通信技术有限公司-（-2015年1月-）\" class=\"headerlink\" title=\"斐讯数据通信技术有限公司 （ 2015年1月 ~ ）\"></a>斐讯数据通信技术有限公司 （ 2015年1月 ~ ）</h2><h3 id=\"ipk-client项目-2月\"><a href=\"#ipk-client项目-2月\" class=\"headerlink\" title=\"ipk_client项目(2月~)\"></a>ipk_client项目(2月~)</h3><p>项目目的是通过服务器来管控远端路由器中的ipk,我主要负责客户端的编写.<br>服务器与客户端通过json报文通信,基本功能已经完成.目前的困难在于由于设计文档是初级开发人员商量完成,很多问题可能考虑不是很到位.目前只能边摸索边完成.</p>\n<h3 id=\"12月-1月\"><a href=\"#12月-1月\" class=\"headerlink\" title=\"12月~1月\"></a>12月~1月</h3><p>在openwrt上调试lxc容器,为lxc容器编译基于busybox的文件系统,后因特殊原因中止.在此期间了解了lxc基本操作.工作之余,了解了docker的基本使用.</p>\n<h3 id=\"9月-11月\"><a href=\"#9月-11月\" class=\"headerlink\" title=\"9月~11月\"></a>9月~11月</h3><p>从博通CMS方案切换到openwrt开源方案,熟悉openwrt工作环境.在团队内部,推进git的使用.在完成基本ipk demo开发后,输出博客,帮助后面的同事快速熟悉开发流程.对于一个大型项目的代码结构很不熟悉令我很苦恼,在阅读了GNU Make文档后,阅读了openwrt所有Makefile相关文件,输出分享和博客.</p>\n<h3 id=\"6月-8月\"><a href=\"#6月-8月\" class=\"headerlink\" title=\"6月~8月\"></a>6月~8月</h3><p>参加公司培训,同时在课余时间读了些技术书籍.</p>\n<h3 id=\"1月-5月\"><a href=\"#1月-5月\" class=\"headerlink\" title=\"1月~5月\"></a>1月~5月</h3><p>熟悉嵌入式相关工作环境,在导师及同事帮助下下解决小bug.</p>\n<hr>\n<h1 id=\"学习经历\"><a href=\"#学习经历\" class=\"headerlink\" title=\"学习经历\"></a>学习经历</h1><h2 id=\"研究生\"><a href=\"#研究生\" class=\"headerlink\" title=\"研究生\"></a>研究生</h2><p>2012年9月~2015年1月 西安电子科技大学 密码学</p>\n<h2 id=\"本科\"><a href=\"#本科\" class=\"headerlink\" title=\"本科\"></a>本科</h2><p>2006年9月~2010年7月 西安电子科技大学 通信工程</p>\n<hr>\n<h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><ul>\n<li><a href=\"https://github.com/chengyi818/git_sop\" target=\"_blank\" rel=\"external\">git_sop</a>：git在团队中使用包括基本操作和工作流.相比较svn,团队成员切换有一定学习成本.我想把基本操作和我们的工作流结合后,提供傻瓜式的操作.</li>\n<li><a href=\"https://github.com/chengyi818/dotfiles\" target=\"_blank\" rel=\"external\">dotfiles</a>：我喜欢tmux+vim+ohmyzsh的环境,所以综合各种框架,写了个一键式安装脚本,便于将新环境快速布置为自己熟悉的环境.</li>\n</ul>\n<h2 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h2><ul>\n<li><a href=\"http://yiting.co/2015/09/02/Openwrt_LuCI%E6%A8%A1%E5%9D%97%E7%BB%83%E4%B9%A0%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4.html\">Openwrt LuCI模块练习详细步骤</a></li>\n<li><a href=\"http://yiting.co/2015/12/13/openwrt%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E6%A6%82%E8%BF%B0.html\">openwrt编译全过程</a></li>\n</ul>\n<h2 id=\"技术分享\"><a href=\"#技术分享\" class=\"headerlink\" title=\"技术分享\"></a>技术分享</h2><ul>\n<li>2015年8月公司内部分享：git使用和工作流</li>\n<li>2015年11月公司内部分享：openwrt编译全过程</li>\n</ul>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><ul>\n<li>计算机网络：熟悉</li>\n<li>Linux工作环境：熟悉</li>\n<li>git : 熟悉</li>\n<li>GNU Makefile : 熟悉</li>\n<li>bash shell : 了解</li>\n<li>正则表达式 : 了解</li>\n</ul>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n","excerpt":"","more":"<h2 id=\"Long-term-support\"><a href=\"#Long-term-support\" class=\"headerlink\" title=\"#Long term support\"></a>#Long term support</h2><h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>手机：1561818631</li>\n<li>Email：chengyi818@foxmail.com</li>\n<li>微信号：ice_river818</li>\n</ul>\n<hr>\n<h1 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h1><ul>\n<li>成祎/男/1988</li>\n<li>工作年限：1年</li>\n<li>技术博客：yiting.co</li>\n<li>Github：<a href=\"http://github.com/chengyi818\">http://github.com/chengyi818</a></li>\n<li>Stackoverflow: <a href=\"http://stackoverflow.com/users/5309028/fat-cheng\">http://stackoverflow.com/users/5309028/fat-cheng</a></li>\n<li>目前职位：嵌入式初级工程师</li>\n<li>期望薪资：税前月薪12k左右</li>\n<li>期望城市：上海</li>\n</ul>\n<hr>\n<h1 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h1><h2 id=\"斐讯数据通信技术有限公司-（-2015年1月-）\"><a href=\"#斐讯数据通信技术有限公司-（-2015年1月-）\" class=\"headerlink\" title=\"斐讯数据通信技术有限公司 （ 2015年1月 ~ ）\"></a>斐讯数据通信技术有限公司 （ 2015年1月 ~ ）</h2><h3 id=\"ipk-client项目-2月\"><a href=\"#ipk-client项目-2月\" class=\"headerlink\" title=\"ipk_client项目(2月~)\"></a>ipk_client项目(2月~)</h3><p>项目目的是通过服务器来管控远端路由器中的ipk,我主要负责客户端的编写.<br>服务器与客户端通过json报文通信,基本功能已经完成.目前的困难在于由于设计文档是初级开发人员商量完成,很多问题可能考虑不是很到位.目前只能边摸索边完成.</p>\n<h3 id=\"12月-1月\"><a href=\"#12月-1月\" class=\"headerlink\" title=\"12月~1月\"></a>12月~1月</h3><p>在openwrt上调试lxc容器,为lxc容器编译基于busybox的文件系统,后因特殊原因中止.在此期间了解了lxc基本操作.工作之余,了解了docker的基本使用.</p>\n<h3 id=\"9月-11月\"><a href=\"#9月-11月\" class=\"headerlink\" title=\"9月~11月\"></a>9月~11月</h3><p>从博通CMS方案切换到openwrt开源方案,熟悉openwrt工作环境.在团队内部,推进git的使用.在完成基本ipk demo开发后,输出博客,帮助后面的同事快速熟悉开发流程.对于一个大型项目的代码结构很不熟悉令我很苦恼,在阅读了GNU Make文档后,阅读了openwrt所有Makefile相关文件,输出分享和博客.</p>\n<h3 id=\"6月-8月\"><a href=\"#6月-8月\" class=\"headerlink\" title=\"6月~8月\"></a>6月~8月</h3><p>参加公司培训,同时在课余时间读了些技术书籍.</p>\n<h3 id=\"1月-5月\"><a href=\"#1月-5月\" class=\"headerlink\" title=\"1月~5月\"></a>1月~5月</h3><p>熟悉嵌入式相关工作环境,在导师及同事帮助下下解决小bug.</p>\n<hr>\n<h1 id=\"学习经历\"><a href=\"#学习经历\" class=\"headerlink\" title=\"学习经历\"></a>学习经历</h1><h2 id=\"研究生\"><a href=\"#研究生\" class=\"headerlink\" title=\"研究生\"></a>研究生</h2><p>2012年9月~2015年1月 西安电子科技大学 密码学</p>\n<h2 id=\"本科\"><a href=\"#本科\" class=\"headerlink\" title=\"本科\"></a>本科</h2><p>2006年9月~2010年7月 西安电子科技大学 通信工程</p>\n<hr>\n<h1 id=\"开源项目和作品\"><a href=\"#开源项目和作品\" class=\"headerlink\" title=\"开源项目和作品\"></a>开源项目和作品</h1><h2 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h2><ul>\n<li><a href=\"https://github.com/chengyi818/git_sop\">git_sop</a>：git在团队中使用包括基本操作和工作流.相比较svn,团队成员切换有一定学习成本.我想把基本操作和我们的工作流结合后,提供傻瓜式的操作.</li>\n<li><a href=\"https://github.com/chengyi818/dotfiles\">dotfiles</a>：我喜欢tmux+vim+ohmyzsh的环境,所以综合各种框架,写了个一键式安装脚本,便于将新环境快速布置为自己熟悉的环境.</li>\n</ul>\n<h2 id=\"技术文章\"><a href=\"#技术文章\" class=\"headerlink\" title=\"技术文章\"></a>技术文章</h2><ul>\n<li><a href=\"http://yiting.co/2015/09/02/Openwrt_LuCI%E6%A8%A1%E5%9D%97%E7%BB%83%E4%B9%A0%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4.html\">Openwrt LuCI模块练习详细步骤</a></li>\n<li><a href=\"http://yiting.co/2015/12/13/openwrt%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E6%A6%82%E8%BF%B0.html\">openwrt编译全过程</a></li>\n</ul>\n<h2 id=\"技术分享\"><a href=\"#技术分享\" class=\"headerlink\" title=\"技术分享\"></a>技术分享</h2><ul>\n<li>2015年8月公司内部分享：git使用和工作流</li>\n<li>2015年11月公司内部分享：openwrt编译全过程</li>\n</ul>\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><ul>\n<li>计算机网络：熟悉</li>\n<li>Linux工作环境：熟悉</li>\n<li>git : 熟悉</li>\n<li>GNU Makefile : 熟悉</li>\n<li>bash shell : 了解</li>\n<li>正则表达式 : 了解</li>\n</ul>\n<hr>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>\n"},{"layout":"post","title":"我的chrome_插件篇","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十七周 :smile:\n\n---\n\n## 1.前言\n以前曾经看过一期王自如的评测节目,里面提到用chrome是一种情怀.我虽然以前知道chrome很强大,但是一直没有时间好好搜集学习下.\n\n<!--more-->\n\n最近刚好有点时间,稍微整理了一下,把我用的感觉还不错的一些插件罗列一下,以供参考.\n\n插件由两部分组成,一部分来自[chrome web store](https://chrome.google.com/webstore/category/apps?hl=en-US),另外一部分来自[Greasy Fork](https://greasyfork.org/zh-CN)的脚本库\n\n## 2.系统优化\n\n### 2.1 基础必备\n\n[Tampermonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo)\n\n> 油猴,非常强大的脚本管理工具,必备.\n\n### 2.2 插件管理\n\n推荐[context](https://chrome.google.com/webstore/detail/context/aalnjolghjkkogicompabhhbbkljnlka?hl=en-US)+[Extension Automation](https://chrome.google.com/webstore/detail/extension-automation/ghopjgdkodchjclkkfdekhjfomdbakkb)\n\n>好用的插件太多,为了避免浪费内存需要按场景管理.\n\n前者按自定义的场景启动插件,后者按域名定制.对于插件重度使用者非常合适.\n\n插件轻度使用者还可以考虑[一键管理所有扩展插件](https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%80%E6%9C%89%E6%89%A9%E5%B1%95/niemebbfnfbjfojajlmnbiikmcpjkkja?hl=zh-CN)\n\n### 2.3 内存优化\n推荐[onetab](http://36kr.com/p/201819.html)\n\n>chrome比较吃内存,这下妈妈再也不用担心我的内存不足了.\n\n其他可选:\n\n* [panicbutton](https://chrome.google.com/webstore/detail/panicbutton/faminaibgiklngmfpfbhmokfmnglamcm?hl=en-US)\n* [The Great Suspender](https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg)\n\n\n### 2.4 安全\n\n#### 2.4.1 密码管理\n\n推荐[LastPass](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en-US)\n\n> 这是你需要记住的最后一个密码\n\n其他可选[1password](https://chrome.google.com/webstore/detail/1password-password-manage/aomjjhallfgjeglblehebfpbcfeobpgk?hl=en-US)\n\n#### 2.4.2 防捆绑下载\n\n推荐[AntiAdware](https://greasyfork.org/zh-CN/scripts/4294-antiadware)\n\n> 妈妈再也不用担心我不小心下载了流氓软件了\n\n\n### 2.5 去广告\n\n#### 2.5.1 视频去广告\n\n推荐[Onens.Clean.Player](https://greasyfork.org/zh-CN/scripts/16349-onens-clean-player)\n\n> 去除优酷,爱奇艺等各种视频网站的广告\n\n#### 2.5.2 网页广告和隐私保护\n\n推荐[ublock origin](https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?utm_source=chrome-app-launcher-info-dialog)\n\n> 去掉广告本身也有网页加速的\"副作用\"\n\n其他可选:\n\n* 网页广告:[Adblock Plus](https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=en-US)\n\n* 隐私保护:[Ghostery](https://chrome.google.com/webstore/detail/ghostery/mlomiejdfkolichcflejclcbmpeaniij/related?hl=en-US)\n\n\n#### 2.5.3 去百度推广\n\n推荐[Purify Baidu Search](https://greasyfork.org/zh-CN/scripts/13808-purify-baidu-search)\n\n### 2.6 快速跳转\n\nbaidu和google搜索后,往往会重定向,比较耽误时间.\n\n* [google跳转](https://greasyfork.org/en/scripts/568-direct-google)\n\n* [baidu跳转](https://greasyfork.org/zh-CN/scripts/558-direct-baidu)\n\n## 3.学习工作\n\n### 3.1 RSS\n\n[RSS Feed Reader](https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp?hl=en-US)\n\n### 3.2 谷歌服务\n\n[black menu](https://chrome.google.com/webstore/detail/black-menu-for-google/eignhdfgaldabilaaegmdfbajngjmoke)\n\n> google所有服务大集合,用起来还挺方便的\n\n### 3.3 github\n\n[Octoree](https://github.com/buunguyen/octotree)\n\n> github使用者强烈推荐,查看代码非常方便.\n\n[Isometric Contributions](https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien)\n\n> 装逼利器,查看代码提交记录\n\n### 3.4 阅读\n\n[Clearly](http://pan.baidu.com/s/1pL27qgr)\n\n> evernote出品的,让你的网页阅读更清净.现在已经不再支持,这里是我的网盘的链接\n\n[Save to Pocket](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj)\n\n> 配合Pocket App使用,谁用谁知道\n\n[Wiznote Web Clipper](https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=en-US)\n\n> 为知笔记,网页剪报\n\n其他可选:\n\n* [diigo](https://chrome.google.com/webstore/detail/diigo-web-collector-captu/pnhplgjpclknigjpccbcnmicgcieojbh?hl=en-US): Pocket功能增强版,可惜我用不上\n\n### 3.5 时间管理\n\n[pomotodo](https://chrome.google.com/webstore/detail/pomotodo/algakdpepofkajponmledaldoloboinf?hl=en-US)\n\n### 3.6 翻译\n\n[Auto-Translate](https://chrome.google.com/webstore/detail/auto-translate/obgoiaeapddkeekbocomnjlckbbfapmk)\n\n其他可选:\n\n* 前面谷歌合集中,很容易打开谷歌翻译\n\n### 3.7 图片\n\n#### 3.7.1 截图\n\n[Awesome screenshot](https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj?hl=en-US)\n\n> 网页截图神器,还可以做点简单的修改,挺不错的.\n\n#### 3.7.2 图床\n\n[新浪微博图床](https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=en-US)\n\n其他可选:\n\n* [围脖是个好图床](https://chrome.google.com/webstore/detail/%E5%9B%B4%E8%84%96%E6%98%AF%E4%B8%AA%E5%A5%BD%E5%9B%BE%E5%BA%8A/pngmcllbdfgmhdgnnpfaciaolgbjplhe?hl=en-US)\n\n#### 3.7.3 批量下载\n\n[Fatkun图片批量下载](https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf)\n\n## 4.社交娱乐\n\n### 4.1 视频\n\n[blibli助手](https://chrome.google.com/webstore/detail/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%8A%A9%E6%89%8B%EF%BC%9Abilibilicom-%E7%BB%BC%E5%90%88%E8%BE%85%E5%8A%A9%E6%89%A9%E5%B1%95/kpbnombpnpcffllnianjibmpadjolanh?hl=en-US)\n\n> 喜欢B站的同志,可以试试\n\n[youtube+](https://greasyfork.org/en/scripts/9932-youtube)\n\n> 油管的增强\n\n### 4.2 音乐\n\n[网易云音乐高音质支持](https://greasyfork.org/zh-CN/scripts/10582-%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%AB%98%E9%9F%B3%E8%B4%A8%E6%94%AF%E6%8C%81)\n\n> 网页版的网易云音乐默认为96kbit/s.安装插件后,调整为320kbit/s.\n\n### 4.3 购物\n\n[惠惠购物助手](https://chrome.google.com/webstore/detail/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/ohjkicjidmohhfcjjlahfppkdblibkkb?hl=en-US)\n\n> 比比价格,最好使用前面提到的automation按域名打开.\n\n## 5.界面美化\n\n### 5.1标签页\n\n[Dream Afar New Tab](https://chrome.google.com/webstore/detail/dream-afar-new-tab/henmfoppjjkcencpbjaigfahdjlgpegn?hl=en-US)\n\n其他可选:\n\n* [Momentum](https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca)\n\n> 这个功能更丰富,可惜我用不到.还是更喜欢上面个简洁一些.\n\n* [Speed Dial 2](https://chrome.google.com/webstore/detail/speed-dial-2/jpfpebmajhhopeonhlcgidhclcccjcik?hl=en-US)\n\n> 在标签页管理收藏夹,UI清新简洁的.\n\n### 5.2滚动条\n\n[scroll style](https://chrome.google.com/webstore/detail/scroll-style/lcfiapjcgfnalnpmgfoebehefdeekado)\n\n> 自动隐藏滚动条\n\n[SmoothScroll](https://chrome.google.com/webstore/detail/smoothscroll/nbokbjkabcmbfdlbddjidfmibcpneigj)\n\n> 平滑滚动\n\n### 5.3下一页\n\n[Super_preloaderPlus_one](chrome-extension://dhdgffkkebhmkfjojejmpbldmpobfkfo/ask.html?aid=505e6f05-5c96-4eaa-a7fe-30e9bb20130b)\n\n> 自动读取下一页\n\n其他可选:\n\n* [AutoPagerize](https://chrome.google.com/webstore/detail/autopagerize/igiofjhpmpihnifddepnpngfjhkfenbp?hl=en-US)\n\n\n### 5.4关键词\n\n[word highlight](https://chrome.google.com/webstore/detail/word-highlight/ooabkmkhabkahcjbgpiajffckeibpdoa?hl=en)\n\n> 搜索的关键词高亮\n\n## 6.快捷操作\n\n### 6.1 鼠标\n\n[Yet Another Drag and Go](https://chrome.google.com/webstore/detail/yet-another-drag-and-go/hnoonkgmmnklbdehoepdjcidhjbncjmi?hl=en-US)\n\n> 鼠标的拖拽功能增强\n\n[crxMouse Chrome Gestures](https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo?hl=en-US)\n\n> 鼠标手势\n\n### 6.2 键盘\n\n[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb)\n\n> 大爱,强烈推荐.装逼神器\n\n### 6.3 以图搜图\n\n[Search By Image](https://greasyfork.org/en/scripts/2998-search-by-image)\n\n其他可选:\n\n* [Search by Image (by Google)](https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm)\n\n## 7.下载\n\n### 7.1下载管理器\n\n[下载管理器](https://chrome.google.com/webstore/detail/download-manager/daoidaoebhfcgccdpgjjcbdginkofmfe/reviews)\n\n> 我很讨厌,默认的下载条.安装插件后,下载管理类似firefox\n\n### 7.2资源\n[迅雷、快车、旋风专用链自动破解](https://chrome.google.com/webstore/detail/%E8%BF%85%E9%9B%B7%E3%80%81qq%E6%97%8B%E9%A3%8E-%E9%93%BE%E6%8E%A5%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2app/kpcjhgihkjbhglamhcjpaidnlniphdic)\n\n[Download YouTube Videos as MP4](https://greasyfork.org/en/scripts/1317-download-youtube-videos-as-mp4)\n\n[下载一键通](https://greasyfork.org/zh-CN/scripts/2510-%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%80%9A)\n\n[百度云插件+APIKey](https://greasyfork.org/zh-CN/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey)\n\n> 总之,就是各种资源.你懂得\n\n### 7.3百度云\n\n[百度网盘助手•改](https://greasyfork.org/zh-CN/scripts/17083-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B-%E6%94%B9)\n\n> 破解百度云的下载限制\n\n[百度云网盘离线下载](https://chrome.google.com/webstore/detail/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BD%91%E7%9B%98%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/pfkppcfegdgjijjijpinlmobpgliikkj)\n\n[网盘自动填写密码](https://greasyfork.org/zh-CN/scripts/13463-%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81-%E5%A2%9E%E5%BC%BA%E7%89%88)\n\n> 直接搞出提取密码..\n\n## 8.黑科技\n\n### 8.1邮件追踪\n\n[邮件打开追踪器](https://chrome.google.com/webstore/detail/%E8%84%89%E5%8F%AF%E5%AF%BB-%E9%82%AE%E4%BB%B6%E8%BF%BD%E8%B8%AA/aomgchcgfmlmkicjdghaipodnakhdndo)\n\n### 8.2翻墙\n\n[Proxy SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=en-US)\n\n### 8.3网页限制\n\n[网页限制解除](https://greasyfork.org/zh-CN/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4)\n\n> 通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制。\n\n### 8.4护眼\n\n[护眼脚本](https://greasyfork.org/zh-CN/scripts/14716-%E6%8A%A4%E7%9C%BC%E8%84%9A%E6%9C%AC)\n\n> 保护我的钛合金狗眼..\n\n### 8.5贴吧\n\n[百度贴吧：不登录即可看贴](https://greasyfork.org/zh-CN/scripts/14151-baidu-tieba-no-login)\n\n## 9.其他\n\n### 9.1懒得弄\n\n[Pushbullet](https://chrome.google.com/webstore/detail/pushbullet/chlffgpmiacpedhhbkiomidkjlcfhogd)\n\n> PC和手机间互传消息文件,可能刚开始需要翻墙.\n\n### 9.2开发者\n\nchrome下有大量开发者相关的插件,我不做网页开发.有需要的同学,自己去找找.\n\n## 尾记\n\n> 使用chrome是一种情怀\n\nchrome明明可以是个猛虎,玩成小猫就没啥意思了.如果有浏览到这里的同学不妨试试看.有其他好的插件,欢迎给我留言.\n\n下周再见 :wave:\n","source":"_drafts/2016-04-09-我的chrome_插件篇.md","raw":"---\nlayout: post\ntitle: 我的chrome_插件篇\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十七周 :smile:\n\n---\n\n## 1.前言\n以前曾经看过一期王自如的评测节目,里面提到用chrome是一种情怀.我虽然以前知道chrome很强大,但是一直没有时间好好搜集学习下.\n\n<!--more-->\n\n最近刚好有点时间,稍微整理了一下,把我用的感觉还不错的一些插件罗列一下,以供参考.\n\n插件由两部分组成,一部分来自[chrome web store](https://chrome.google.com/webstore/category/apps?hl=en-US),另外一部分来自[Greasy Fork](https://greasyfork.org/zh-CN)的脚本库\n\n## 2.系统优化\n\n### 2.1 基础必备\n\n[Tampermonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo)\n\n> 油猴,非常强大的脚本管理工具,必备.\n\n### 2.2 插件管理\n\n推荐[context](https://chrome.google.com/webstore/detail/context/aalnjolghjkkogicompabhhbbkljnlka?hl=en-US)+[Extension Automation](https://chrome.google.com/webstore/detail/extension-automation/ghopjgdkodchjclkkfdekhjfomdbakkb)\n\n>好用的插件太多,为了避免浪费内存需要按场景管理.\n\n前者按自定义的场景启动插件,后者按域名定制.对于插件重度使用者非常合适.\n\n插件轻度使用者还可以考虑[一键管理所有扩展插件](https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%80%E6%9C%89%E6%89%A9%E5%B1%95/niemebbfnfbjfojajlmnbiikmcpjkkja?hl=zh-CN)\n\n### 2.3 内存优化\n推荐[onetab](http://36kr.com/p/201819.html)\n\n>chrome比较吃内存,这下妈妈再也不用担心我的内存不足了.\n\n其他可选:\n\n* [panicbutton](https://chrome.google.com/webstore/detail/panicbutton/faminaibgiklngmfpfbhmokfmnglamcm?hl=en-US)\n* [The Great Suspender](https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg)\n\n\n### 2.4 安全\n\n#### 2.4.1 密码管理\n\n推荐[LastPass](https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en-US)\n\n> 这是你需要记住的最后一个密码\n\n其他可选[1password](https://chrome.google.com/webstore/detail/1password-password-manage/aomjjhallfgjeglblehebfpbcfeobpgk?hl=en-US)\n\n#### 2.4.2 防捆绑下载\n\n推荐[AntiAdware](https://greasyfork.org/zh-CN/scripts/4294-antiadware)\n\n> 妈妈再也不用担心我不小心下载了流氓软件了\n\n\n### 2.5 去广告\n\n#### 2.5.1 视频去广告\n\n推荐[Onens.Clean.Player](https://greasyfork.org/zh-CN/scripts/16349-onens-clean-player)\n\n> 去除优酷,爱奇艺等各种视频网站的广告\n\n#### 2.5.2 网页广告和隐私保护\n\n推荐[ublock origin](https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?utm_source=chrome-app-launcher-info-dialog)\n\n> 去掉广告本身也有网页加速的\"副作用\"\n\n其他可选:\n\n* 网页广告:[Adblock Plus](https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=en-US)\n\n* 隐私保护:[Ghostery](https://chrome.google.com/webstore/detail/ghostery/mlomiejdfkolichcflejclcbmpeaniij/related?hl=en-US)\n\n\n#### 2.5.3 去百度推广\n\n推荐[Purify Baidu Search](https://greasyfork.org/zh-CN/scripts/13808-purify-baidu-search)\n\n### 2.6 快速跳转\n\nbaidu和google搜索后,往往会重定向,比较耽误时间.\n\n* [google跳转](https://greasyfork.org/en/scripts/568-direct-google)\n\n* [baidu跳转](https://greasyfork.org/zh-CN/scripts/558-direct-baidu)\n\n## 3.学习工作\n\n### 3.1 RSS\n\n[RSS Feed Reader](https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp?hl=en-US)\n\n### 3.2 谷歌服务\n\n[black menu](https://chrome.google.com/webstore/detail/black-menu-for-google/eignhdfgaldabilaaegmdfbajngjmoke)\n\n> google所有服务大集合,用起来还挺方便的\n\n### 3.3 github\n\n[Octoree](https://github.com/buunguyen/octotree)\n\n> github使用者强烈推荐,查看代码非常方便.\n\n[Isometric Contributions](https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien)\n\n> 装逼利器,查看代码提交记录\n\n### 3.4 阅读\n\n[Clearly](http://pan.baidu.com/s/1pL27qgr)\n\n> evernote出品的,让你的网页阅读更清净.现在已经不再支持,这里是我的网盘的链接\n\n[Save to Pocket](https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj)\n\n> 配合Pocket App使用,谁用谁知道\n\n[Wiznote Web Clipper](https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=en-US)\n\n> 为知笔记,网页剪报\n\n其他可选:\n\n* [diigo](https://chrome.google.com/webstore/detail/diigo-web-collector-captu/pnhplgjpclknigjpccbcnmicgcieojbh?hl=en-US): Pocket功能增强版,可惜我用不上\n\n### 3.5 时间管理\n\n[pomotodo](https://chrome.google.com/webstore/detail/pomotodo/algakdpepofkajponmledaldoloboinf?hl=en-US)\n\n### 3.6 翻译\n\n[Auto-Translate](https://chrome.google.com/webstore/detail/auto-translate/obgoiaeapddkeekbocomnjlckbbfapmk)\n\n其他可选:\n\n* 前面谷歌合集中,很容易打开谷歌翻译\n\n### 3.7 图片\n\n#### 3.7.1 截图\n\n[Awesome screenshot](https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj?hl=en-US)\n\n> 网页截图神器,还可以做点简单的修改,挺不错的.\n\n#### 3.7.2 图床\n\n[新浪微博图床](https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=en-US)\n\n其他可选:\n\n* [围脖是个好图床](https://chrome.google.com/webstore/detail/%E5%9B%B4%E8%84%96%E6%98%AF%E4%B8%AA%E5%A5%BD%E5%9B%BE%E5%BA%8A/pngmcllbdfgmhdgnnpfaciaolgbjplhe?hl=en-US)\n\n#### 3.7.3 批量下载\n\n[Fatkun图片批量下载](https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf)\n\n## 4.社交娱乐\n\n### 4.1 视频\n\n[blibli助手](https://chrome.google.com/webstore/detail/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%8A%A9%E6%89%8B%EF%BC%9Abilibilicom-%E7%BB%BC%E5%90%88%E8%BE%85%E5%8A%A9%E6%89%A9%E5%B1%95/kpbnombpnpcffllnianjibmpadjolanh?hl=en-US)\n\n> 喜欢B站的同志,可以试试\n\n[youtube+](https://greasyfork.org/en/scripts/9932-youtube)\n\n> 油管的增强\n\n### 4.2 音乐\n\n[网易云音乐高音质支持](https://greasyfork.org/zh-CN/scripts/10582-%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%AB%98%E9%9F%B3%E8%B4%A8%E6%94%AF%E6%8C%81)\n\n> 网页版的网易云音乐默认为96kbit/s.安装插件后,调整为320kbit/s.\n\n### 4.3 购物\n\n[惠惠购物助手](https://chrome.google.com/webstore/detail/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/ohjkicjidmohhfcjjlahfppkdblibkkb?hl=en-US)\n\n> 比比价格,最好使用前面提到的automation按域名打开.\n\n## 5.界面美化\n\n### 5.1标签页\n\n[Dream Afar New Tab](https://chrome.google.com/webstore/detail/dream-afar-new-tab/henmfoppjjkcencpbjaigfahdjlgpegn?hl=en-US)\n\n其他可选:\n\n* [Momentum](https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca)\n\n> 这个功能更丰富,可惜我用不到.还是更喜欢上面个简洁一些.\n\n* [Speed Dial 2](https://chrome.google.com/webstore/detail/speed-dial-2/jpfpebmajhhopeonhlcgidhclcccjcik?hl=en-US)\n\n> 在标签页管理收藏夹,UI清新简洁的.\n\n### 5.2滚动条\n\n[scroll style](https://chrome.google.com/webstore/detail/scroll-style/lcfiapjcgfnalnpmgfoebehefdeekado)\n\n> 自动隐藏滚动条\n\n[SmoothScroll](https://chrome.google.com/webstore/detail/smoothscroll/nbokbjkabcmbfdlbddjidfmibcpneigj)\n\n> 平滑滚动\n\n### 5.3下一页\n\n[Super_preloaderPlus_one](chrome-extension://dhdgffkkebhmkfjojejmpbldmpobfkfo/ask.html?aid=505e6f05-5c96-4eaa-a7fe-30e9bb20130b)\n\n> 自动读取下一页\n\n其他可选:\n\n* [AutoPagerize](https://chrome.google.com/webstore/detail/autopagerize/igiofjhpmpihnifddepnpngfjhkfenbp?hl=en-US)\n\n\n### 5.4关键词\n\n[word highlight](https://chrome.google.com/webstore/detail/word-highlight/ooabkmkhabkahcjbgpiajffckeibpdoa?hl=en)\n\n> 搜索的关键词高亮\n\n## 6.快捷操作\n\n### 6.1 鼠标\n\n[Yet Another Drag and Go](https://chrome.google.com/webstore/detail/yet-another-drag-and-go/hnoonkgmmnklbdehoepdjcidhjbncjmi?hl=en-US)\n\n> 鼠标的拖拽功能增强\n\n[crxMouse Chrome Gestures](https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo?hl=en-US)\n\n> 鼠标手势\n\n### 6.2 键盘\n\n[Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb)\n\n> 大爱,强烈推荐.装逼神器\n\n### 6.3 以图搜图\n\n[Search By Image](https://greasyfork.org/en/scripts/2998-search-by-image)\n\n其他可选:\n\n* [Search by Image (by Google)](https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm)\n\n## 7.下载\n\n### 7.1下载管理器\n\n[下载管理器](https://chrome.google.com/webstore/detail/download-manager/daoidaoebhfcgccdpgjjcbdginkofmfe/reviews)\n\n> 我很讨厌,默认的下载条.安装插件后,下载管理类似firefox\n\n### 7.2资源\n[迅雷、快车、旋风专用链自动破解](https://chrome.google.com/webstore/detail/%E8%BF%85%E9%9B%B7%E3%80%81qq%E6%97%8B%E9%A3%8E-%E9%93%BE%E6%8E%A5%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2app/kpcjhgihkjbhglamhcjpaidnlniphdic)\n\n[Download YouTube Videos as MP4](https://greasyfork.org/en/scripts/1317-download-youtube-videos-as-mp4)\n\n[下载一键通](https://greasyfork.org/zh-CN/scripts/2510-%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%80%9A)\n\n[百度云插件+APIKey](https://greasyfork.org/zh-CN/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey)\n\n> 总之,就是各种资源.你懂得\n\n### 7.3百度云\n\n[百度网盘助手•改](https://greasyfork.org/zh-CN/scripts/17083-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B-%E6%94%B9)\n\n> 破解百度云的下载限制\n\n[百度云网盘离线下载](https://chrome.google.com/webstore/detail/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BD%91%E7%9B%98%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/pfkppcfegdgjijjijpinlmobpgliikkj)\n\n[网盘自动填写密码](https://greasyfork.org/zh-CN/scripts/13463-%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81-%E5%A2%9E%E5%BC%BA%E7%89%88)\n\n> 直接搞出提取密码..\n\n## 8.黑科技\n\n### 8.1邮件追踪\n\n[邮件打开追踪器](https://chrome.google.com/webstore/detail/%E8%84%89%E5%8F%AF%E5%AF%BB-%E9%82%AE%E4%BB%B6%E8%BF%BD%E8%B8%AA/aomgchcgfmlmkicjdghaipodnakhdndo)\n\n### 8.2翻墙\n\n[Proxy SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=en-US)\n\n### 8.3网页限制\n\n[网页限制解除](https://greasyfork.org/zh-CN/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4)\n\n> 通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制。\n\n### 8.4护眼\n\n[护眼脚本](https://greasyfork.org/zh-CN/scripts/14716-%E6%8A%A4%E7%9C%BC%E8%84%9A%E6%9C%AC)\n\n> 保护我的钛合金狗眼..\n\n### 8.5贴吧\n\n[百度贴吧：不登录即可看贴](https://greasyfork.org/zh-CN/scripts/14151-baidu-tieba-no-login)\n\n## 9.其他\n\n### 9.1懒得弄\n\n[Pushbullet](https://chrome.google.com/webstore/detail/pushbullet/chlffgpmiacpedhhbkiomidkjlcfhogd)\n\n> PC和手机间互传消息文件,可能刚开始需要翻墙.\n\n### 9.2开发者\n\nchrome下有大量开发者相关的插件,我不做网页开发.有需要的同学,自己去找找.\n\n## 尾记\n\n> 使用chrome是一种情怀\n\nchrome明明可以是个猛虎,玩成小猫就没啥意思了.如果有浏览到这里的同学不妨试试看.有其他好的插件,欢迎给我留言.\n\n下周再见 :wave:\n","slug":"我的chrome_插件篇","published":0,"date":"2016-04-08T16:00:00.000Z","updated":"2016-04-07T07:01:48.645Z","photos":[],"link":"","_id":"cimpzdpnb0005m1f1hs2pwtq9","content":"<p>本周是成胖子每周一博的第十七周 :smile:</p>\n<hr>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>以前曾经看过一期王自如的评测节目,里面提到用chrome是一种情怀.我虽然以前知道chrome很强大,但是一直没有时间好好搜集学习下.</p>\n<a id=\"more\"></a>\n<p>最近刚好有点时间,稍微整理了一下,把我用的感觉还不错的一些插件罗列一下,以供参考.</p>\n<p>插件由两部分组成,一部分来自<a href=\"https://chrome.google.com/webstore/category/apps?hl=en-US\" target=\"_blank\" rel=\"external\">chrome web store</a>,另外一部分来自<a href=\"https://greasyfork.org/zh-CN\" target=\"_blank\" rel=\"external\">Greasy Fork</a>的脚本库</p>\n<h2 id=\"2-系统优化\"><a href=\"#2-系统优化\" class=\"headerlink\" title=\"2.系统优化\"></a>2.系统优化</h2><h3 id=\"2-1-基础必备\"><a href=\"#2-1-基础必备\" class=\"headerlink\" title=\"2.1 基础必备\"></a>2.1 基础必备</h3><p><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo\" target=\"_blank\" rel=\"external\">Tampermonkey</a></p>\n<blockquote>\n<p>油猴,非常强大的脚本管理工具,必备.</p>\n</blockquote>\n<h3 id=\"2-2-插件管理\"><a href=\"#2-2-插件管理\" class=\"headerlink\" title=\"2.2 插件管理\"></a>2.2 插件管理</h3><p>推荐<a href=\"https://chrome.google.com/webstore/detail/context/aalnjolghjkkogicompabhhbbkljnlka?hl=en-US\" target=\"_blank\" rel=\"external\">context</a>+<a href=\"https://chrome.google.com/webstore/detail/extension-automation/ghopjgdkodchjclkkfdekhjfomdbakkb\" target=\"_blank\" rel=\"external\">Extension Automation</a></p>\n<blockquote>\n<p>好用的插件太多,为了避免浪费内存需要按场景管理.</p>\n</blockquote>\n<p>前者按自定义的场景启动插件,后者按域名定制.对于插件重度使用者非常合适.</p>\n<p>插件轻度使用者还可以考虑<a href=\"https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%80%E6%9C%89%E6%89%A9%E5%B1%95/niemebbfnfbjfojajlmnbiikmcpjkkja?hl=zh-CN\" target=\"_blank\" rel=\"external\">一键管理所有扩展插件</a></p>\n<h3 id=\"2-3-内存优化\"><a href=\"#2-3-内存优化\" class=\"headerlink\" title=\"2.3 内存优化\"></a>2.3 内存优化</h3><p>推荐<a href=\"http://36kr.com/p/201819.html\" target=\"_blank\" rel=\"external\">onetab</a></p>\n<blockquote>\n<p>chrome比较吃内存,这下妈妈再也不用担心我的内存不足了.</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/panicbutton/faminaibgiklngmfpfbhmokfmnglamcm?hl=en-US\" target=\"_blank\" rel=\"external\">panicbutton</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg\" target=\"_blank\" rel=\"external\">The Great Suspender</a></li>\n</ul>\n<h3 id=\"2-4-安全\"><a href=\"#2-4-安全\" class=\"headerlink\" title=\"2.4 安全\"></a>2.4 安全</h3><h4 id=\"2-4-1-密码管理\"><a href=\"#2-4-1-密码管理\" class=\"headerlink\" title=\"2.4.1 密码管理\"></a>2.4.1 密码管理</h4><p>推荐<a href=\"https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en-US\" target=\"_blank\" rel=\"external\">LastPass</a></p>\n<blockquote>\n<p>这是你需要记住的最后一个密码</p>\n</blockquote>\n<p>其他可选<a href=\"https://chrome.google.com/webstore/detail/1password-password-manage/aomjjhallfgjeglblehebfpbcfeobpgk?hl=en-US\" target=\"_blank\" rel=\"external\">1password</a></p>\n<h4 id=\"2-4-2-防捆绑下载\"><a href=\"#2-4-2-防捆绑下载\" class=\"headerlink\" title=\"2.4.2 防捆绑下载\"></a>2.4.2 防捆绑下载</h4><p>推荐<a href=\"https://greasyfork.org/zh-CN/scripts/4294-antiadware\" target=\"_blank\" rel=\"external\">AntiAdware</a></p>\n<blockquote>\n<p>妈妈再也不用担心我不小心下载了流氓软件了</p>\n</blockquote>\n<h3 id=\"2-5-去广告\"><a href=\"#2-5-去广告\" class=\"headerlink\" title=\"2.5 去广告\"></a>2.5 去广告</h3><h4 id=\"2-5-1-视频去广告\"><a href=\"#2-5-1-视频去广告\" class=\"headerlink\" title=\"2.5.1 视频去广告\"></a>2.5.1 视频去广告</h4><p>推荐<a href=\"https://greasyfork.org/zh-CN/scripts/16349-onens-clean-player\" target=\"_blank\" rel=\"external\">Onens.Clean.Player</a></p>\n<blockquote>\n<p>去除优酷,爱奇艺等各种视频网站的广告</p>\n</blockquote>\n<h4 id=\"2-5-2-网页广告和隐私保护\"><a href=\"#2-5-2-网页广告和隐私保护\" class=\"headerlink\" title=\"2.5.2 网页广告和隐私保护\"></a>2.5.2 网页广告和隐私保护</h4><p>推荐<a href=\"https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"external\">ublock origin</a></p>\n<blockquote>\n<p>去掉广告本身也有网页加速的”副作用”</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><p>网页广告:<a href=\"https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=en-US\" target=\"_blank\" rel=\"external\">Adblock Plus</a></p>\n</li>\n<li><p>隐私保护:<a href=\"https://chrome.google.com/webstore/detail/ghostery/mlomiejdfkolichcflejclcbmpeaniij/related?hl=en-US\" target=\"_blank\" rel=\"external\">Ghostery</a></p>\n</li>\n</ul>\n<h4 id=\"2-5-3-去百度推广\"><a href=\"#2-5-3-去百度推广\" class=\"headerlink\" title=\"2.5.3 去百度推广\"></a>2.5.3 去百度推广</h4><p>推荐<a href=\"https://greasyfork.org/zh-CN/scripts/13808-purify-baidu-search\" target=\"_blank\" rel=\"external\">Purify Baidu Search</a></p>\n<h3 id=\"2-6-快速跳转\"><a href=\"#2-6-快速跳转\" class=\"headerlink\" title=\"2.6 快速跳转\"></a>2.6 快速跳转</h3><p>baidu和google搜索后,往往会重定向,比较耽误时间.</p>\n<ul>\n<li><p><a href=\"https://greasyfork.org/en/scripts/568-direct-google\" target=\"_blank\" rel=\"external\">google跳转</a></p>\n</li>\n<li><p><a href=\"https://greasyfork.org/zh-CN/scripts/558-direct-baidu\" target=\"_blank\" rel=\"external\">baidu跳转</a></p>\n</li>\n</ul>\n<h2 id=\"3-学习工作\"><a href=\"#3-学习工作\" class=\"headerlink\" title=\"3.学习工作\"></a>3.学习工作</h2><h3 id=\"3-1-RSS\"><a href=\"#3-1-RSS\" class=\"headerlink\" title=\"3.1 RSS\"></a>3.1 RSS</h3><p><a href=\"https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp?hl=en-US\" target=\"_blank\" rel=\"external\">RSS Feed Reader</a></p>\n<h3 id=\"3-2-谷歌服务\"><a href=\"#3-2-谷歌服务\" class=\"headerlink\" title=\"3.2 谷歌服务\"></a>3.2 谷歌服务</h3><p><a href=\"https://chrome.google.com/webstore/detail/black-menu-for-google/eignhdfgaldabilaaegmdfbajngjmoke\" target=\"_blank\" rel=\"external\">black menu</a></p>\n<blockquote>\n<p>google所有服务大集合,用起来还挺方便的</p>\n</blockquote>\n<h3 id=\"3-3-github\"><a href=\"#3-3-github\" class=\"headerlink\" title=\"3.3 github\"></a>3.3 github</h3><p><a href=\"https://github.com/buunguyen/octotree\" target=\"_blank\" rel=\"external\">Octoree</a></p>\n<blockquote>\n<p>github使用者强烈推荐,查看代码非常方便.</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien\" target=\"_blank\" rel=\"external\">Isometric Contributions</a></p>\n<blockquote>\n<p>装逼利器,查看代码提交记录</p>\n</blockquote>\n<h3 id=\"3-4-阅读\"><a href=\"#3-4-阅读\" class=\"headerlink\" title=\"3.4 阅读\"></a>3.4 阅读</h3><p><a href=\"http://pan.baidu.com/s/1pL27qgr\" target=\"_blank\" rel=\"external\">Clearly</a></p>\n<blockquote>\n<p>evernote出品的,让你的网页阅读更清净.现在已经不再支持,这里是我的网盘的链接</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj\" target=\"_blank\" rel=\"external\">Save to Pocket</a></p>\n<blockquote>\n<p>配合Pocket App使用,谁用谁知道</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=en-US\" target=\"_blank\" rel=\"external\">Wiznote Web Clipper</a></p>\n<blockquote>\n<p>为知笔记,网页剪报</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/diigo-web-collector-captu/pnhplgjpclknigjpccbcnmicgcieojbh?hl=en-US\" target=\"_blank\" rel=\"external\">diigo</a>: Pocket功能增强版,可惜我用不上</li>\n</ul>\n<h3 id=\"3-5-时间管理\"><a href=\"#3-5-时间管理\" class=\"headerlink\" title=\"3.5 时间管理\"></a>3.5 时间管理</h3><p><a href=\"https://chrome.google.com/webstore/detail/pomotodo/algakdpepofkajponmledaldoloboinf?hl=en-US\" target=\"_blank\" rel=\"external\">pomotodo</a></p>\n<h3 id=\"3-6-翻译\"><a href=\"#3-6-翻译\" class=\"headerlink\" title=\"3.6 翻译\"></a>3.6 翻译</h3><p><a href=\"https://chrome.google.com/webstore/detail/auto-translate/obgoiaeapddkeekbocomnjlckbbfapmk\" target=\"_blank\" rel=\"external\">Auto-Translate</a></p>\n<p>其他可选:</p>\n<ul>\n<li>前面谷歌合集中,很容易打开谷歌翻译</li>\n</ul>\n<h3 id=\"3-7-图片\"><a href=\"#3-7-图片\" class=\"headerlink\" title=\"3.7 图片\"></a>3.7 图片</h3><h4 id=\"3-7-1-截图\"><a href=\"#3-7-1-截图\" class=\"headerlink\" title=\"3.7.1 截图\"></a>3.7.1 截图</h4><p><a href=\"https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj?hl=en-US\" target=\"_blank\" rel=\"external\">Awesome screenshot</a></p>\n<blockquote>\n<p>网页截图神器,还可以做点简单的修改,挺不错的.</p>\n</blockquote>\n<h4 id=\"3-7-2-图床\"><a href=\"#3-7-2-图床\" class=\"headerlink\" title=\"3.7.2 图床\"></a>3.7.2 图床</h4><p><a href=\"https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=en-US\" target=\"_blank\" rel=\"external\">新浪微博图床</a></p>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/%E5%9B%B4%E8%84%96%E6%98%AF%E4%B8%AA%E5%A5%BD%E5%9B%BE%E5%BA%8A/pngmcllbdfgmhdgnnpfaciaolgbjplhe?hl=en-US\" target=\"_blank\" rel=\"external\">围脖是个好图床</a></li>\n</ul>\n<h4 id=\"3-7-3-批量下载\"><a href=\"#3-7-3-批量下载\" class=\"headerlink\" title=\"3.7.3 批量下载\"></a>3.7.3 批量下载</h4><p><a href=\"https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf\" target=\"_blank\" rel=\"external\">Fatkun图片批量下载</a></p>\n<h2 id=\"4-社交娱乐\"><a href=\"#4-社交娱乐\" class=\"headerlink\" title=\"4.社交娱乐\"></a>4.社交娱乐</h2><h3 id=\"4-1-视频\"><a href=\"#4-1-视频\" class=\"headerlink\" title=\"4.1 视频\"></a>4.1 视频</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%8A%A9%E6%89%8B%EF%BC%9Abilibilicom-%E7%BB%BC%E5%90%88%E8%BE%85%E5%8A%A9%E6%89%A9%E5%B1%95/kpbnombpnpcffllnianjibmpadjolanh?hl=en-US\" target=\"_blank\" rel=\"external\">blibli助手</a></p>\n<blockquote>\n<p>喜欢B站的同志,可以试试</p>\n</blockquote>\n<p><a href=\"https://greasyfork.org/en/scripts/9932-youtube\" target=\"_blank\" rel=\"external\">youtube+</a></p>\n<blockquote>\n<p>油管的增强</p>\n</blockquote>\n<h3 id=\"4-2-音乐\"><a href=\"#4-2-音乐\" class=\"headerlink\" title=\"4.2 音乐\"></a>4.2 音乐</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/10582-%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%AB%98%E9%9F%B3%E8%B4%A8%E6%94%AF%E6%8C%81\" target=\"_blank\" rel=\"external\">网易云音乐高音质支持</a></p>\n<blockquote>\n<p>网页版的网易云音乐默认为96kbit/s.安装插件后,调整为320kbit/s.</p>\n</blockquote>\n<h3 id=\"4-3-购物\"><a href=\"#4-3-购物\" class=\"headerlink\" title=\"4.3 购物\"></a>4.3 购物</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/ohjkicjidmohhfcjjlahfppkdblibkkb?hl=en-US\" target=\"_blank\" rel=\"external\">惠惠购物助手</a></p>\n<blockquote>\n<p>比比价格,最好使用前面提到的automation按域名打开.</p>\n</blockquote>\n<h2 id=\"5-界面美化\"><a href=\"#5-界面美化\" class=\"headerlink\" title=\"5.界面美化\"></a>5.界面美化</h2><h3 id=\"5-1标签页\"><a href=\"#5-1标签页\" class=\"headerlink\" title=\"5.1标签页\"></a>5.1标签页</h3><p><a href=\"https://chrome.google.com/webstore/detail/dream-afar-new-tab/henmfoppjjkcencpbjaigfahdjlgpegn?hl=en-US\" target=\"_blank\" rel=\"external\">Dream Afar New Tab</a></p>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca\" target=\"_blank\" rel=\"external\">Momentum</a></li>\n</ul>\n<blockquote>\n<p>这个功能更丰富,可惜我用不到.还是更喜欢上面个简洁一些.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/speed-dial-2/jpfpebmajhhopeonhlcgidhclcccjcik?hl=en-US\" target=\"_blank\" rel=\"external\">Speed Dial 2</a></li>\n</ul>\n<blockquote>\n<p>在标签页管理收藏夹,UI清新简洁的.</p>\n</blockquote>\n<h3 id=\"5-2滚动条\"><a href=\"#5-2滚动条\" class=\"headerlink\" title=\"5.2滚动条\"></a>5.2滚动条</h3><p><a href=\"https://chrome.google.com/webstore/detail/scroll-style/lcfiapjcgfnalnpmgfoebehefdeekado\" target=\"_blank\" rel=\"external\">scroll style</a></p>\n<blockquote>\n<p>自动隐藏滚动条</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/smoothscroll/nbokbjkabcmbfdlbddjidfmibcpneigj\" target=\"_blank\" rel=\"external\">SmoothScroll</a></p>\n<blockquote>\n<p>平滑滚动</p>\n</blockquote>\n<h3 id=\"5-3下一页\"><a href=\"#5-3下一页\" class=\"headerlink\" title=\"5.3下一页\"></a>5.3下一页</h3><p><a href=\"chrome-extension://dhdgffkkebhmkfjojejmpbldmpobfkfo/ask.html?aid=505e6f05-5c96-4eaa-a7fe-30e9bb20130b\" target=\"_blank\" rel=\"external\">Super_preloaderPlus_one</a></p>\n<blockquote>\n<p>自动读取下一页</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/autopagerize/igiofjhpmpihnifddepnpngfjhkfenbp?hl=en-US\" target=\"_blank\" rel=\"external\">AutoPagerize</a></li>\n</ul>\n<h3 id=\"5-4关键词\"><a href=\"#5-4关键词\" class=\"headerlink\" title=\"5.4关键词\"></a>5.4关键词</h3><p><a href=\"https://chrome.google.com/webstore/detail/word-highlight/ooabkmkhabkahcjbgpiajffckeibpdoa?hl=en\" target=\"_blank\" rel=\"external\">word highlight</a></p>\n<blockquote>\n<p>搜索的关键词高亮</p>\n</blockquote>\n<h2 id=\"6-快捷操作\"><a href=\"#6-快捷操作\" class=\"headerlink\" title=\"6.快捷操作\"></a>6.快捷操作</h2><h3 id=\"6-1-鼠标\"><a href=\"#6-1-鼠标\" class=\"headerlink\" title=\"6.1 鼠标\"></a>6.1 鼠标</h3><p><a href=\"https://chrome.google.com/webstore/detail/yet-another-drag-and-go/hnoonkgmmnklbdehoepdjcidhjbncjmi?hl=en-US\" target=\"_blank\" rel=\"external\">Yet Another Drag and Go</a></p>\n<blockquote>\n<p>鼠标的拖拽功能增强</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo?hl=en-US\" target=\"_blank\" rel=\"external\">crxMouse Chrome Gestures</a></p>\n<blockquote>\n<p>鼠标手势</p>\n</blockquote>\n<h3 id=\"6-2-键盘\"><a href=\"#6-2-键盘\" class=\"headerlink\" title=\"6.2 键盘\"></a>6.2 键盘</h3><p><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb\" target=\"_blank\" rel=\"external\">Vimium</a></p>\n<blockquote>\n<p>大爱,强烈推荐.装逼神器</p>\n</blockquote>\n<h3 id=\"6-3-以图搜图\"><a href=\"#6-3-以图搜图\" class=\"headerlink\" title=\"6.3 以图搜图\"></a>6.3 以图搜图</h3><p><a href=\"https://greasyfork.org/en/scripts/2998-search-by-image\" target=\"_blank\" rel=\"external\">Search By Image</a></p>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm\" target=\"_blank\" rel=\"external\">Search by Image (by Google)</a></li>\n</ul>\n<h2 id=\"7-下载\"><a href=\"#7-下载\" class=\"headerlink\" title=\"7.下载\"></a>7.下载</h2><h3 id=\"7-1下载管理器\"><a href=\"#7-1下载管理器\" class=\"headerlink\" title=\"7.1下载管理器\"></a>7.1下载管理器</h3><p><a href=\"https://chrome.google.com/webstore/detail/download-manager/daoidaoebhfcgccdpgjjcbdginkofmfe/reviews\" target=\"_blank\" rel=\"external\">下载管理器</a></p>\n<blockquote>\n<p>我很讨厌,默认的下载条.安装插件后,下载管理类似firefox</p>\n</blockquote>\n<h3 id=\"7-2资源\"><a href=\"#7-2资源\" class=\"headerlink\" title=\"7.2资源\"></a>7.2资源</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E8%BF%85%E9%9B%B7%E3%80%81qq%E6%97%8B%E9%A3%8E-%E9%93%BE%E6%8E%A5%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2app/kpcjhgihkjbhglamhcjpaidnlniphdic\" target=\"_blank\" rel=\"external\">迅雷、快车、旋风专用链自动破解</a></p>\n<p><a href=\"https://greasyfork.org/en/scripts/1317-download-youtube-videos-as-mp4\" target=\"_blank\" rel=\"external\">Download YouTube Videos as MP4</a></p>\n<p><a href=\"https://greasyfork.org/zh-CN/scripts/2510-%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%80%9A\" target=\"_blank\" rel=\"external\">下载一键通</a></p>\n<p><a href=\"https://greasyfork.org/zh-CN/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey\" target=\"_blank\" rel=\"external\">百度云插件+APIKey</a></p>\n<blockquote>\n<p>总之,就是各种资源.你懂得</p>\n</blockquote>\n<h3 id=\"7-3百度云\"><a href=\"#7-3百度云\" class=\"headerlink\" title=\"7.3百度云\"></a>7.3百度云</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/17083-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B-%E6%94%B9\" target=\"_blank\" rel=\"external\">百度网盘助手•改</a></p>\n<blockquote>\n<p>破解百度云的下载限制</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BD%91%E7%9B%98%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/pfkppcfegdgjijjijpinlmobpgliikkj\" target=\"_blank\" rel=\"external\">百度云网盘离线下载</a></p>\n<p><a href=\"https://greasyfork.org/zh-CN/scripts/13463-%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81-%E5%A2%9E%E5%BC%BA%E7%89%88\" target=\"_blank\" rel=\"external\">网盘自动填写密码</a></p>\n<blockquote>\n<p>直接搞出提取密码..</p>\n</blockquote>\n<h2 id=\"8-黑科技\"><a href=\"#8-黑科技\" class=\"headerlink\" title=\"8.黑科技\"></a>8.黑科技</h2><h3 id=\"8-1邮件追踪\"><a href=\"#8-1邮件追踪\" class=\"headerlink\" title=\"8.1邮件追踪\"></a>8.1邮件追踪</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E8%84%89%E5%8F%AF%E5%AF%BB-%E9%82%AE%E4%BB%B6%E8%BF%BD%E8%B8%AA/aomgchcgfmlmkicjdghaipodnakhdndo\" target=\"_blank\" rel=\"external\">邮件打开追踪器</a></p>\n<h3 id=\"8-2翻墙\"><a href=\"#8-2翻墙\" class=\"headerlink\" title=\"8.2翻墙\"></a>8.2翻墙</h3><p><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=en-US\" target=\"_blank\" rel=\"external\">Proxy SwitchyOmega</a></p>\n<h3 id=\"8-3网页限制\"><a href=\"#8-3网页限制\" class=\"headerlink\" title=\"8.3网页限制\"></a>8.3网页限制</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4\" target=\"_blank\" rel=\"external\">网页限制解除</a></p>\n<blockquote>\n<p>通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制。</p>\n</blockquote>\n<h3 id=\"8-4护眼\"><a href=\"#8-4护眼\" class=\"headerlink\" title=\"8.4护眼\"></a>8.4护眼</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/14716-%E6%8A%A4%E7%9C%BC%E8%84%9A%E6%9C%AC\" target=\"_blank\" rel=\"external\">护眼脚本</a></p>\n<blockquote>\n<p>保护我的钛合金狗眼..</p>\n</blockquote>\n<h3 id=\"8-5贴吧\"><a href=\"#8-5贴吧\" class=\"headerlink\" title=\"8.5贴吧\"></a>8.5贴吧</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/14151-baidu-tieba-no-login\" target=\"_blank\" rel=\"external\">百度贴吧：不登录即可看贴</a></p>\n<h2 id=\"9-其他\"><a href=\"#9-其他\" class=\"headerlink\" title=\"9.其他\"></a>9.其他</h2><h3 id=\"9-1懒得弄\"><a href=\"#9-1懒得弄\" class=\"headerlink\" title=\"9.1懒得弄\"></a>9.1懒得弄</h3><p><a href=\"https://chrome.google.com/webstore/detail/pushbullet/chlffgpmiacpedhhbkiomidkjlcfhogd\" target=\"_blank\" rel=\"external\">Pushbullet</a></p>\n<blockquote>\n<p>PC和手机间互传消息文件,可能刚开始需要翻墙.</p>\n</blockquote>\n<h3 id=\"9-2开发者\"><a href=\"#9-2开发者\" class=\"headerlink\" title=\"9.2开发者\"></a>9.2开发者</h3><p>chrome下有大量开发者相关的插件,我不做网页开发.有需要的同学,自己去找找.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><blockquote>\n<p>使用chrome是一种情怀</p>\n</blockquote>\n<p>chrome明明可以是个猛虎,玩成小猫就没啥意思了.如果有浏览到这里的同学不妨试试看.有其他好的插件,欢迎给我留言.</p>\n<p>下周再见 :wave:</p>\n","excerpt":"<p>本周是成胖子每周一博的第十七周 :smile:</p>\n<hr>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>以前曾经看过一期王自如的评测节目,里面提到用chrome是一种情怀.我虽然以前知道chrome很强大,但是一直没有时间好好搜集学习下.</p>","more":"<p>最近刚好有点时间,稍微整理了一下,把我用的感觉还不错的一些插件罗列一下,以供参考.</p>\n<p>插件由两部分组成,一部分来自<a href=\"https://chrome.google.com/webstore/category/apps?hl=en-US\">chrome web store</a>,另外一部分来自<a href=\"https://greasyfork.org/zh-CN\">Greasy Fork</a>的脚本库</p>\n<h2 id=\"2-系统优化\"><a href=\"#2-系统优化\" class=\"headerlink\" title=\"2.系统优化\"></a>2.系统优化</h2><h3 id=\"2-1-基础必备\"><a href=\"#2-1-基础必备\" class=\"headerlink\" title=\"2.1 基础必备\"></a>2.1 基础必备</h3><p><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo\">Tampermonkey</a></p>\n<blockquote>\n<p>油猴,非常强大的脚本管理工具,必备.</p>\n</blockquote>\n<h3 id=\"2-2-插件管理\"><a href=\"#2-2-插件管理\" class=\"headerlink\" title=\"2.2 插件管理\"></a>2.2 插件管理</h3><p>推荐<a href=\"https://chrome.google.com/webstore/detail/context/aalnjolghjkkogicompabhhbbkljnlka?hl=en-US\">context</a>+<a href=\"https://chrome.google.com/webstore/detail/extension-automation/ghopjgdkodchjclkkfdekhjfomdbakkb\">Extension Automation</a></p>\n<blockquote>\n<p>好用的插件太多,为了避免浪费内存需要按场景管理.</p>\n</blockquote>\n<p>前者按自定义的场景启动插件,后者按域名定制.对于插件重度使用者非常合适.</p>\n<p>插件轻度使用者还可以考虑<a href=\"https://chrome.google.com/webstore/detail/%E4%B8%80%E9%94%AE%E7%AE%A1%E7%90%86%E6%89%80%E6%9C%89%E6%89%A9%E5%B1%95/niemebbfnfbjfojajlmnbiikmcpjkkja?hl=zh-CN\">一键管理所有扩展插件</a></p>\n<h3 id=\"2-3-内存优化\"><a href=\"#2-3-内存优化\" class=\"headerlink\" title=\"2.3 内存优化\"></a>2.3 内存优化</h3><p>推荐<a href=\"http://36kr.com/p/201819.html\">onetab</a></p>\n<blockquote>\n<p>chrome比较吃内存,这下妈妈再也不用担心我的内存不足了.</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/panicbutton/faminaibgiklngmfpfbhmokfmnglamcm?hl=en-US\">panicbutton</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg\">The Great Suspender</a></li>\n</ul>\n<h3 id=\"2-4-安全\"><a href=\"#2-4-安全\" class=\"headerlink\" title=\"2.4 安全\"></a>2.4 安全</h3><h4 id=\"2-4-1-密码管理\"><a href=\"#2-4-1-密码管理\" class=\"headerlink\" title=\"2.4.1 密码管理\"></a>2.4.1 密码管理</h4><p>推荐<a href=\"https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en-US\">LastPass</a></p>\n<blockquote>\n<p>这是你需要记住的最后一个密码</p>\n</blockquote>\n<p>其他可选<a href=\"https://chrome.google.com/webstore/detail/1password-password-manage/aomjjhallfgjeglblehebfpbcfeobpgk?hl=en-US\">1password</a></p>\n<h4 id=\"2-4-2-防捆绑下载\"><a href=\"#2-4-2-防捆绑下载\" class=\"headerlink\" title=\"2.4.2 防捆绑下载\"></a>2.4.2 防捆绑下载</h4><p>推荐<a href=\"https://greasyfork.org/zh-CN/scripts/4294-antiadware\">AntiAdware</a></p>\n<blockquote>\n<p>妈妈再也不用担心我不小心下载了流氓软件了</p>\n</blockquote>\n<h3 id=\"2-5-去广告\"><a href=\"#2-5-去广告\" class=\"headerlink\" title=\"2.5 去广告\"></a>2.5 去广告</h3><h4 id=\"2-5-1-视频去广告\"><a href=\"#2-5-1-视频去广告\" class=\"headerlink\" title=\"2.5.1 视频去广告\"></a>2.5.1 视频去广告</h4><p>推荐<a href=\"https://greasyfork.org/zh-CN/scripts/16349-onens-clean-player\">Onens.Clean.Player</a></p>\n<blockquote>\n<p>去除优酷,爱奇艺等各种视频网站的广告</p>\n</blockquote>\n<h4 id=\"2-5-2-网页广告和隐私保护\"><a href=\"#2-5-2-网页广告和隐私保护\" class=\"headerlink\" title=\"2.5.2 网页广告和隐私保护\"></a>2.5.2 网页广告和隐私保护</h4><p>推荐<a href=\"https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?utm_source=chrome-app-launcher-info-dialog\">ublock origin</a></p>\n<blockquote>\n<p>去掉广告本身也有网页加速的”副作用”</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><p>网页广告:<a href=\"https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb?hl=en-US\">Adblock Plus</a></p>\n</li>\n<li><p>隐私保护:<a href=\"https://chrome.google.com/webstore/detail/ghostery/mlomiejdfkolichcflejclcbmpeaniij/related?hl=en-US\">Ghostery</a></p>\n</li>\n</ul>\n<h4 id=\"2-5-3-去百度推广\"><a href=\"#2-5-3-去百度推广\" class=\"headerlink\" title=\"2.5.3 去百度推广\"></a>2.5.3 去百度推广</h4><p>推荐<a href=\"https://greasyfork.org/zh-CN/scripts/13808-purify-baidu-search\">Purify Baidu Search</a></p>\n<h3 id=\"2-6-快速跳转\"><a href=\"#2-6-快速跳转\" class=\"headerlink\" title=\"2.6 快速跳转\"></a>2.6 快速跳转</h3><p>baidu和google搜索后,往往会重定向,比较耽误时间.</p>\n<ul>\n<li><p><a href=\"https://greasyfork.org/en/scripts/568-direct-google\">google跳转</a></p>\n</li>\n<li><p><a href=\"https://greasyfork.org/zh-CN/scripts/558-direct-baidu\">baidu跳转</a></p>\n</li>\n</ul>\n<h2 id=\"3-学习工作\"><a href=\"#3-学习工作\" class=\"headerlink\" title=\"3.学习工作\"></a>3.学习工作</h2><h3 id=\"3-1-RSS\"><a href=\"#3-1-RSS\" class=\"headerlink\" title=\"3.1 RSS\"></a>3.1 RSS</h3><p><a href=\"https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp?hl=en-US\">RSS Feed Reader</a></p>\n<h3 id=\"3-2-谷歌服务\"><a href=\"#3-2-谷歌服务\" class=\"headerlink\" title=\"3.2 谷歌服务\"></a>3.2 谷歌服务</h3><p><a href=\"https://chrome.google.com/webstore/detail/black-menu-for-google/eignhdfgaldabilaaegmdfbajngjmoke\">black menu</a></p>\n<blockquote>\n<p>google所有服务大集合,用起来还挺方便的</p>\n</blockquote>\n<h3 id=\"3-3-github\"><a href=\"#3-3-github\" class=\"headerlink\" title=\"3.3 github\"></a>3.3 github</h3><p><a href=\"https://github.com/buunguyen/octotree\">Octoree</a></p>\n<blockquote>\n<p>github使用者强烈推荐,查看代码非常方便.</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien\">Isometric Contributions</a></p>\n<blockquote>\n<p>装逼利器,查看代码提交记录</p>\n</blockquote>\n<h3 id=\"3-4-阅读\"><a href=\"#3-4-阅读\" class=\"headerlink\" title=\"3.4 阅读\"></a>3.4 阅读</h3><p><a href=\"http://pan.baidu.com/s/1pL27qgr\">Clearly</a></p>\n<blockquote>\n<p>evernote出品的,让你的网页阅读更清净.现在已经不再支持,这里是我的网盘的链接</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj\">Save to Pocket</a></p>\n<blockquote>\n<p>配合Pocket App使用,谁用谁知道</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/wiznote-web-clipper/jfanfpmalehkemdiiebjljddhgojhfab?hl=en-US\">Wiznote Web Clipper</a></p>\n<blockquote>\n<p>为知笔记,网页剪报</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/diigo-web-collector-captu/pnhplgjpclknigjpccbcnmicgcieojbh?hl=en-US\">diigo</a>: Pocket功能增强版,可惜我用不上</li>\n</ul>\n<h3 id=\"3-5-时间管理\"><a href=\"#3-5-时间管理\" class=\"headerlink\" title=\"3.5 时间管理\"></a>3.5 时间管理</h3><p><a href=\"https://chrome.google.com/webstore/detail/pomotodo/algakdpepofkajponmledaldoloboinf?hl=en-US\">pomotodo</a></p>\n<h3 id=\"3-6-翻译\"><a href=\"#3-6-翻译\" class=\"headerlink\" title=\"3.6 翻译\"></a>3.6 翻译</h3><p><a href=\"https://chrome.google.com/webstore/detail/auto-translate/obgoiaeapddkeekbocomnjlckbbfapmk\">Auto-Translate</a></p>\n<p>其他可选:</p>\n<ul>\n<li>前面谷歌合集中,很容易打开谷歌翻译</li>\n</ul>\n<h3 id=\"3-7-图片\"><a href=\"#3-7-图片\" class=\"headerlink\" title=\"3.7 图片\"></a>3.7 图片</h3><h4 id=\"3-7-1-截图\"><a href=\"#3-7-1-截图\" class=\"headerlink\" title=\"3.7.1 截图\"></a>3.7.1 截图</h4><p><a href=\"https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj?hl=en-US\">Awesome screenshot</a></p>\n<blockquote>\n<p>网页截图神器,还可以做点简单的修改,挺不错的.</p>\n</blockquote>\n<h4 id=\"3-7-2-图床\"><a href=\"#3-7-2-图床\" class=\"headerlink\" title=\"3.7.2 图床\"></a>3.7.2 图床</h4><p><a href=\"https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=en-US\">新浪微博图床</a></p>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/%E5%9B%B4%E8%84%96%E6%98%AF%E4%B8%AA%E5%A5%BD%E5%9B%BE%E5%BA%8A/pngmcllbdfgmhdgnnpfaciaolgbjplhe?hl=en-US\">围脖是个好图床</a></li>\n</ul>\n<h4 id=\"3-7-3-批量下载\"><a href=\"#3-7-3-批量下载\" class=\"headerlink\" title=\"3.7.3 批量下载\"></a>3.7.3 批量下载</h4><p><a href=\"https://chrome.google.com/webstore/detail/fatkun-batch-download-ima/nnjjahlikiabnchcpehcpkdeckfgnohf\">Fatkun图片批量下载</a></p>\n<h2 id=\"4-社交娱乐\"><a href=\"#4-社交娱乐\" class=\"headerlink\" title=\"4.社交娱乐\"></a>4.社交娱乐</h2><h3 id=\"4-1-视频\"><a href=\"#4-1-视频\" class=\"headerlink\" title=\"4.1 视频\"></a>4.1 视频</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%8A%A9%E6%89%8B%EF%BC%9Abilibilicom-%E7%BB%BC%E5%90%88%E8%BE%85%E5%8A%A9%E6%89%A9%E5%B1%95/kpbnombpnpcffllnianjibmpadjolanh?hl=en-US\">blibli助手</a></p>\n<blockquote>\n<p>喜欢B站的同志,可以试试</p>\n</blockquote>\n<p><a href=\"https://greasyfork.org/en/scripts/9932-youtube\">youtube+</a></p>\n<blockquote>\n<p>油管的增强</p>\n</blockquote>\n<h3 id=\"4-2-音乐\"><a href=\"#4-2-音乐\" class=\"headerlink\" title=\"4.2 音乐\"></a>4.2 音乐</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/10582-%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%AB%98%E9%9F%B3%E8%B4%A8%E6%94%AF%E6%8C%81\">网易云音乐高音质支持</a></p>\n<blockquote>\n<p>网页版的网易云音乐默认为96kbit/s.安装插件后,调整为320kbit/s.</p>\n</blockquote>\n<h3 id=\"4-3-购物\"><a href=\"#4-3-购物\" class=\"headerlink\" title=\"4.3 购物\"></a>4.3 购物</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E6%83%A0%E6%83%A0%E8%B4%AD%E7%89%A9%E5%8A%A9%E6%89%8B/ohjkicjidmohhfcjjlahfppkdblibkkb?hl=en-US\">惠惠购物助手</a></p>\n<blockquote>\n<p>比比价格,最好使用前面提到的automation按域名打开.</p>\n</blockquote>\n<h2 id=\"5-界面美化\"><a href=\"#5-界面美化\" class=\"headerlink\" title=\"5.界面美化\"></a>5.界面美化</h2><h3 id=\"5-1标签页\"><a href=\"#5-1标签页\" class=\"headerlink\" title=\"5.1标签页\"></a>5.1标签页</h3><p><a href=\"https://chrome.google.com/webstore/detail/dream-afar-new-tab/henmfoppjjkcencpbjaigfahdjlgpegn?hl=en-US\">Dream Afar New Tab</a></p>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca\">Momentum</a></li>\n</ul>\n<blockquote>\n<p>这个功能更丰富,可惜我用不到.还是更喜欢上面个简洁一些.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/speed-dial-2/jpfpebmajhhopeonhlcgidhclcccjcik?hl=en-US\">Speed Dial 2</a></li>\n</ul>\n<blockquote>\n<p>在标签页管理收藏夹,UI清新简洁的.</p>\n</blockquote>\n<h3 id=\"5-2滚动条\"><a href=\"#5-2滚动条\" class=\"headerlink\" title=\"5.2滚动条\"></a>5.2滚动条</h3><p><a href=\"https://chrome.google.com/webstore/detail/scroll-style/lcfiapjcgfnalnpmgfoebehefdeekado\">scroll style</a></p>\n<blockquote>\n<p>自动隐藏滚动条</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/smoothscroll/nbokbjkabcmbfdlbddjidfmibcpneigj\">SmoothScroll</a></p>\n<blockquote>\n<p>平滑滚动</p>\n</blockquote>\n<h3 id=\"5-3下一页\"><a href=\"#5-3下一页\" class=\"headerlink\" title=\"5.3下一页\"></a>5.3下一页</h3><p><a href=\"chrome-extension://dhdgffkkebhmkfjojejmpbldmpobfkfo/ask.html?aid=505e6f05-5c96-4eaa-a7fe-30e9bb20130b\">Super_preloaderPlus_one</a></p>\n<blockquote>\n<p>自动读取下一页</p>\n</blockquote>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/autopagerize/igiofjhpmpihnifddepnpngfjhkfenbp?hl=en-US\">AutoPagerize</a></li>\n</ul>\n<h3 id=\"5-4关键词\"><a href=\"#5-4关键词\" class=\"headerlink\" title=\"5.4关键词\"></a>5.4关键词</h3><p><a href=\"https://chrome.google.com/webstore/detail/word-highlight/ooabkmkhabkahcjbgpiajffckeibpdoa?hl=en\">word highlight</a></p>\n<blockquote>\n<p>搜索的关键词高亮</p>\n</blockquote>\n<h2 id=\"6-快捷操作\"><a href=\"#6-快捷操作\" class=\"headerlink\" title=\"6.快捷操作\"></a>6.快捷操作</h2><h3 id=\"6-1-鼠标\"><a href=\"#6-1-鼠标\" class=\"headerlink\" title=\"6.1 鼠标\"></a>6.1 鼠标</h3><p><a href=\"https://chrome.google.com/webstore/detail/yet-another-drag-and-go/hnoonkgmmnklbdehoepdjcidhjbncjmi?hl=en-US\">Yet Another Drag and Go</a></p>\n<blockquote>\n<p>鼠标的拖拽功能增强</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/crxmouse-chrome-gestures/jlgkpaicikihijadgifklkbpdajbkhjo?hl=en-US\">crxMouse Chrome Gestures</a></p>\n<blockquote>\n<p>鼠标手势</p>\n</blockquote>\n<h3 id=\"6-2-键盘\"><a href=\"#6-2-键盘\" class=\"headerlink\" title=\"6.2 键盘\"></a>6.2 键盘</h3><p><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb\">Vimium</a></p>\n<blockquote>\n<p>大爱,强烈推荐.装逼神器</p>\n</blockquote>\n<h3 id=\"6-3-以图搜图\"><a href=\"#6-3-以图搜图\" class=\"headerlink\" title=\"6.3 以图搜图\"></a>6.3 以图搜图</h3><p><a href=\"https://greasyfork.org/en/scripts/2998-search-by-image\">Search By Image</a></p>\n<p>其他可选:</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/search-by-image-by-google/dajedkncpodkggklbegccjpmnglmnflm\">Search by Image (by Google)</a></li>\n</ul>\n<h2 id=\"7-下载\"><a href=\"#7-下载\" class=\"headerlink\" title=\"7.下载\"></a>7.下载</h2><h3 id=\"7-1下载管理器\"><a href=\"#7-1下载管理器\" class=\"headerlink\" title=\"7.1下载管理器\"></a>7.1下载管理器</h3><p><a href=\"https://chrome.google.com/webstore/detail/download-manager/daoidaoebhfcgccdpgjjcbdginkofmfe/reviews\">下载管理器</a></p>\n<blockquote>\n<p>我很讨厌,默认的下载条.安装插件后,下载管理类似firefox</p>\n</blockquote>\n<h3 id=\"7-2资源\"><a href=\"#7-2资源\" class=\"headerlink\" title=\"7.2资源\"></a>7.2资源</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E8%BF%85%E9%9B%B7%E3%80%81qq%E6%97%8B%E9%A3%8E-%E9%93%BE%E6%8E%A5%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2app/kpcjhgihkjbhglamhcjpaidnlniphdic\">迅雷、快车、旋风专用链自动破解</a></p>\n<p><a href=\"https://greasyfork.org/en/scripts/1317-download-youtube-videos-as-mp4\">Download YouTube Videos as MP4</a></p>\n<p><a href=\"https://greasyfork.org/zh-CN/scripts/2510-%E4%B8%8B%E8%BD%BD%E4%B8%80%E9%94%AE%E9%80%9A\">下载一键通</a></p>\n<p><a href=\"https://greasyfork.org/zh-CN/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey\">百度云插件+APIKey</a></p>\n<blockquote>\n<p>总之,就是各种资源.你懂得</p>\n</blockquote>\n<h3 id=\"7-3百度云\"><a href=\"#7-3百度云\" class=\"headerlink\" title=\"7.3百度云\"></a>7.3百度云</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/17083-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B-%E6%94%B9\">百度网盘助手•改</a></p>\n<blockquote>\n<p>破解百度云的下载限制</p>\n</blockquote>\n<p><a href=\"https://chrome.google.com/webstore/detail/%E7%99%BE%E5%BA%A6%E4%BA%91%E7%BD%91%E7%9B%98%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/pfkppcfegdgjijjijpinlmobpgliikkj\">百度云网盘离线下载</a></p>\n<p><a href=\"https://greasyfork.org/zh-CN/scripts/13463-%E7%BD%91%E7%9B%98%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81-%E5%A2%9E%E5%BC%BA%E7%89%88\">网盘自动填写密码</a></p>\n<blockquote>\n<p>直接搞出提取密码..</p>\n</blockquote>\n<h2 id=\"8-黑科技\"><a href=\"#8-黑科技\" class=\"headerlink\" title=\"8.黑科技\"></a>8.黑科技</h2><h3 id=\"8-1邮件追踪\"><a href=\"#8-1邮件追踪\" class=\"headerlink\" title=\"8.1邮件追踪\"></a>8.1邮件追踪</h3><p><a href=\"https://chrome.google.com/webstore/detail/%E8%84%89%E5%8F%AF%E5%AF%BB-%E9%82%AE%E4%BB%B6%E8%BF%BD%E8%B8%AA/aomgchcgfmlmkicjdghaipodnakhdndo\">邮件打开追踪器</a></p>\n<h3 id=\"8-2翻墙\"><a href=\"#8-2翻墙\" class=\"headerlink\" title=\"8.2翻墙\"></a>8.2翻墙</h3><p><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=en-US\">Proxy SwitchyOmega</a></p>\n<h3 id=\"8-3网页限制\"><a href=\"#8-3网页限制\" class=\"headerlink\" title=\"8.3网页限制\"></a>8.3网页限制</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/14146-%E7%BD%91%E9%A1%B5%E9%99%90%E5%88%B6%E8%A7%A3%E9%99%A4\">网页限制解除</a></p>\n<blockquote>\n<p>通杀大部分网站，可以解除禁止复制、剪切、选择文本、右键菜单的限制。</p>\n</blockquote>\n<h3 id=\"8-4护眼\"><a href=\"#8-4护眼\" class=\"headerlink\" title=\"8.4护眼\"></a>8.4护眼</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/14716-%E6%8A%A4%E7%9C%BC%E8%84%9A%E6%9C%AC\">护眼脚本</a></p>\n<blockquote>\n<p>保护我的钛合金狗眼..</p>\n</blockquote>\n<h3 id=\"8-5贴吧\"><a href=\"#8-5贴吧\" class=\"headerlink\" title=\"8.5贴吧\"></a>8.5贴吧</h3><p><a href=\"https://greasyfork.org/zh-CN/scripts/14151-baidu-tieba-no-login\">百度贴吧：不登录即可看贴</a></p>\n<h2 id=\"9-其他\"><a href=\"#9-其他\" class=\"headerlink\" title=\"9.其他\"></a>9.其他</h2><h3 id=\"9-1懒得弄\"><a href=\"#9-1懒得弄\" class=\"headerlink\" title=\"9.1懒得弄\"></a>9.1懒得弄</h3><p><a href=\"https://chrome.google.com/webstore/detail/pushbullet/chlffgpmiacpedhhbkiomidkjlcfhogd\">Pushbullet</a></p>\n<blockquote>\n<p>PC和手机间互传消息文件,可能刚开始需要翻墙.</p>\n</blockquote>\n<h3 id=\"9-2开发者\"><a href=\"#9-2开发者\" class=\"headerlink\" title=\"9.2开发者\"></a>9.2开发者</h3><p>chrome下有大量开发者相关的插件,我不做网页开发.有需要的同学,自己去找找.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><blockquote>\n<p>使用chrome是一种情怀</p>\n</blockquote>\n<p>chrome明明可以是个猛虎,玩成小猫就没啥意思了.如果有浏览到这里的同学不妨试试看.有其他好的插件,欢迎给我留言.</p>\n<p>下周再见 :wave:</p>"},{"layout":"post","title":"我的chrome续","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十八周 :smile:\n\n---\n\n<!--more-->\n\n## 前言\n\n## 搜索技巧\n\n## 小技巧\n\n## 开发者工具\n\n## 尾记\n","source":"_drafts/2016-04-16-我的chrome续.md","raw":"---\nlayout: post\ntitle: 我的chrome续\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十八周 :smile:\n\n---\n\n<!--more-->\n\n## 前言\n\n## 搜索技巧\n\n## 小技巧\n\n## 开发者工具\n\n## 尾记\n","slug":"我的chrome续","published":0,"date":"2016-04-15T16:00:00.000Z","updated":"2016-04-07T07:01:48.649Z","photos":[],"link":"","_id":"cimpzdpnd0006m1f18nxtxhfk","content":"<p>本周是成胖子每周一博的第十八周 :smile:</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"搜索技巧\"><a href=\"#搜索技巧\" class=\"headerlink\" title=\"搜索技巧\"></a>搜索技巧</h2><h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h2 id=\"开发者工具\"><a href=\"#开发者工具\" class=\"headerlink\" title=\"开发者工具\"></a>开发者工具</h2><h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2>","excerpt":"<p>本周是成胖子每周一博的第十八周 :smile:</p>\n<hr>","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h2 id=\"搜索技巧\"><a href=\"#搜索技巧\" class=\"headerlink\" title=\"搜索技巧\"></a>搜索技巧</h2><h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h2 id=\"开发者工具\"><a href=\"#开发者工具\" class=\"headerlink\" title=\"开发者工具\"></a>开发者工具</h2><h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2>"},{"layout":"post","title":"openwrt简单ipk生成及Makefile解释","comments":1,"analytics":true,"_content":"\n\n\n##前言\n\n类似的文章其实网上比较多了,我写这个的目的:\n>1,网上文章良莠不齐,有些自己都没实际动手操作,随便复制粘贴,实际操作不可行.\n2,基本只讲了操作,我当时最关心的Makefile文件的解释没有.\n\n所以我自己总结了一篇.\n\n<!--more-->\n\n---\n\n###说明\n开发板为MT7620a,openwrt版本为:barrier_breaker_14.07.编译主机为ubuntu 14.04 32位.\n`git clone git://git.openwrt.org/14.07/openwrt.git`\n关于怎么搭建编译环境以及编译请参考[网上](http://blog.chinaunix.net/uid-22547469-id-4364254.html)\n\n---\n\n##正文\n下面我们开始,我们遵循传统以helloworld开始.\n### 1.创建helloworld项目\n首先我们新建helloworld.c文件和对应的Makefile文件\n\n```\n$mkdir -p ~/temp/hellworld/src\n$cd ~/temp/helloworld/src\n$touch helloworld.c Makefile\n```\n\n如下为helloworld.c的内容:\n\n```\n#include <stdio.h>\nint main()\n{\n    printf(\"This is my helloworld!\\n\");\n    return 0;\n}\n```\n\n如下为Makefile文件的内容:\n\n```\nhelloworld : helloworld.o\n\t$(CC) $(LDFLAGS) helloworld.o -o helloworld\n\nhelloworld.o : helloworld.c\n\t$(CC) $(CFLAGS) -c helloworld.c\n\nclean :\n\trm *.o helloworld\n```\n\n$(CC)\n>   这个值由其他Makefile文件规定,表示我们使用编译器.\n\n$(LDFLAGS)\\$(CFLAGS)\n>   这个表示编译器的一些选项,这里是可选的,去掉也没有问题.\n\n下面可以输入`$make`看看有没有问题,注意Makefile文件的书写格式.\n最后,输入`$make clean`来清理掉生成的二进制文件.因为上一步`make`所使用的编译器并不是我们的交叉编译链,生成的二进制文件并不能在开发板中运行.上一步只是验证我们的src中的内容正确与否.\n\n---\n### 2.创建helloworld包\n下一步我们要创建一个新的Makefile文件,在这个文件中我们要描述的是helloworld包的信息,比如:如何配置,如何编译,如何打包,安装位置等.\n\n```\n$cd ~/temp/helloworld\n$touch Makefile\n```\n\n如下为Makefile内容:\n\n```\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=helloworld\nPKG_RELEASE:=1\nPKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/helloworld\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tTITLE:=Helloworld -- prints a snarky message\nendef\n\ndefine Package/helloworld/description\n\tIt's my first package demo.\nendef\n\ndefine Build/Prepare\n\techo \"Here is Package/Prepare\"\n\tmkdir -p $(PKG_BUILD_DIR)\n    $(CP) ./src/* $(PKG_BUILD_DIR)/\nendef\n\ndefine Package/helloworld/install\n\techo \"Here is Package/install\"\n\t$(INSTALL_DIR) $(1)/bin\n\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/helloworld $(1)/bin/\nendef\n\n$(eval $(call BuildPackage,helloworld))\n```\n\n如下是最后的文件树形图:\n\n![树形图](http://i3.tietuku.com/8e9f244567388099.jpg)\n\n---\n\n### 3.Makefile注释\n\n第1行`include $(TOPDIR)/rules.mk`\n>   一般在Makefile的开头,包含了包的基本信息,\n\n>比如Makefile中的`$(BUILD_DIR)`,`$(INCLUDE_DIR)`,`$(CP)`,`$(INSTALL_DIR)`,`$(INSTALL_BIN)`都是这里定义的.具体内容可以到源码主目录下,查看`rules.mk`文件.\n\n3~5行,软件包的信息均以“PKG_”开头，其意思和作用如下\n>   PKG_NAME：软件包名称，将在menuconfig和ipkg可以看到。\n\n>    PKG_VERSION：软件版本号。\n\n>    PKG_RELEASE：Makefile的版本号\n\n>    PKG_SOURCE：源代码的文件名。\n\n>    PKG_SOURCE_URL：源代码的下载网站位置。\n\n>    PKG_MD5SUM：源代码文件的效验码。用于核对软件包是否下载正确。\n\n>    PKG_CAT：源代码文件的解压方法。包括zcat, bzcat, unzip等。\n\n>    PKG_BUILD_DIR：软件包编译目录。它的父目录为$(BUILD_DIR)。\n\n第7行`include $(INCLUDE_DIR)/package.mk`\n>   一般在软件包的基本信息完成后再引入，他定义了用户态软件包的规则。\n\n>编译包分为用户态和内核模块，用户态软件包使用Package，内核模块使用KernelPackage.\n\n>`$(INCLUDE_DIR)/Kernel.mk`文件对于软件包为内核时不可缺少，\n\n>`$(INCLUDE_DIR)/package.mk`应用在用户态。\n\n>接下来讲述用户态软件包。用户程序的编译包以`Package/`开头，然后接着软件名，在Package定义中的软件名可以与软件包名不一样，而且可以多个定义。\n\n9~13行\n>   定义包的名称为`helloworld`\n\n> SECTION : 包的类型为`utils`\n\n> CATEGORY : 目录为Utilitis,即文件在`menuconfig`中的位置;有时还会有`SUBMENU`项,即子目录.\n\n> TITLE : 用于软件包的简短描述,将显示在`menuconfig`中.\n\n> URL ： 软件包的下载位置。\n\n> MAINTAINER ： 维护者选项。\n\n> **DEPENDS** ： 与其他软件的依赖。即如编译或安装需要其他软件时需要说明。如果存在多个依赖，则每个依赖需用空格分开。依赖前使用+号表示默认显示，即对象沒有选中时也会显示，使用@则默认为不显示，即当依赖对象选中后才显示。\n\n15~17行\n>   软件包的详细描述,将显示在`make menuconfig`中\n\n19~23行\n>   编译准备方法，对于网上下载的软件包不需要再描述。对于非网上下载或自行开发的软件包必须说明编译准备方法。\n\n> 本文所用的准备方法就是首先创建软件包目录，然后将源码拷贝到刚刚创建的目录中。按OpenWrt的习惯，一般把自己设计的程序全部放在src目录下。\n\n25~29行\n>   软件包的安装方法，包括一系列拷贝编译好的文件到指定位置。调用时会带一个参数，就是嵌入系统的镜像文件系统目录，因此$(1)表示嵌入系统的镜像目录。\n\n>`INSTALL_DIR:=install -d -m0755` : 创建所属用戶可读写、执行，其他用戶可读可执行的目录\n\n>`INSTALL_BIN:=install -m0755` : 编译好的文件到镜像文件目录\n\n31行 `$(eval $(call BuildPackage,helloworld))`\n>   完成前面定义后，必须使用eval函数实现各种定义。其格式为：\n\n> 对于一般软件包：`$(eval $(call Package,$(PKG_NAME)))`\n\n> 或对于内核模块：`$(eval $(call KernelPackage,$(PKG_NAME)))`\n\n> 如果一个软件包有多个程序，例如：一个应用程序有自己的内核模块，上面使用的`PKG_NAME`需要灵活变通。`eval`函数可能设计多个。也可以当成多个软件包处理。\n\n这里简单地解释了Makefile文件,更具体地请[参考](http://wiki.openwrt.org/doc/devel/packages)\n\n---\n### 4.编译软件\n至此我们的软件已经基本完成,下面进行编译\n首先将文件文件夹拷贝到**openwrt目录中的package文件中**,这里我的源码目录为`~/openwrt`,你需要把openwrt目录替换为你的openwrt源码目录.\n\n```\n$mv ~/temp/helloworld ~/openwrt/package\n```\n\n然后回到项目主目录运行make menuconfig\n\n```\n$cd ~/openwrt\n$make menuconfig\n```\n\n按\"/\"后,输入helloworld,搜索对应的路径\n\n![搜索](http://i3.tietuku.com/3376b2fa48621a57.png)\n![搜索结果](http://i3.tietuku.com/9947195c15c0d77f.png)\n\n接着到Utilities目录下,找到helloworld并按空格打开;\n![打开编译开关](http://i3.tietuku.com/b389aec1d8d367ee.png)\n\n保存后退出;\n\n```\n$cd ~/openwrt\n$make package/helloworld/compile V=s\n```\n\n编译完成后,ipk应该已经生成\n\n```\n$find bin/ -name \"helloworld*.ipk\"\n```\n\n至此我们已经生成简单的ipk,恭喜:)\n最后可以通过[winscp](http://pan.baidu.com/s/1bnHfXyJ),将ipk[安装](http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&tid=3238)到开发板中.\n\n![结局](http://i3.tietuku.com/1ac2f9939aa02cb9.jpg)\n\n---\n##尾记\n我比较薄弱的是Makefile方面的知识,刚好加强下这个方面的学习,欢迎交流~\n","source":"_posts/2015-08-31-helloworld-ipk.md","raw":"---\nlayout: post\ntitle: openwrt简单ipk生成及Makefile解释\ncategory: openwrt\ntags: openwrt\ncomments: true\nanalytics: true\n---\n\n\n\n##前言\n\n类似的文章其实网上比较多了,我写这个的目的:\n>1,网上文章良莠不齐,有些自己都没实际动手操作,随便复制粘贴,实际操作不可行.\n2,基本只讲了操作,我当时最关心的Makefile文件的解释没有.\n\n所以我自己总结了一篇.\n\n<!--more-->\n\n---\n\n###说明\n开发板为MT7620a,openwrt版本为:barrier_breaker_14.07.编译主机为ubuntu 14.04 32位.\n`git clone git://git.openwrt.org/14.07/openwrt.git`\n关于怎么搭建编译环境以及编译请参考[网上](http://blog.chinaunix.net/uid-22547469-id-4364254.html)\n\n---\n\n##正文\n下面我们开始,我们遵循传统以helloworld开始.\n### 1.创建helloworld项目\n首先我们新建helloworld.c文件和对应的Makefile文件\n\n```\n$mkdir -p ~/temp/hellworld/src\n$cd ~/temp/helloworld/src\n$touch helloworld.c Makefile\n```\n\n如下为helloworld.c的内容:\n\n```\n#include <stdio.h>\nint main()\n{\n    printf(\"This is my helloworld!\\n\");\n    return 0;\n}\n```\n\n如下为Makefile文件的内容:\n\n```\nhelloworld : helloworld.o\n\t$(CC) $(LDFLAGS) helloworld.o -o helloworld\n\nhelloworld.o : helloworld.c\n\t$(CC) $(CFLAGS) -c helloworld.c\n\nclean :\n\trm *.o helloworld\n```\n\n$(CC)\n>   这个值由其他Makefile文件规定,表示我们使用编译器.\n\n$(LDFLAGS)\\$(CFLAGS)\n>   这个表示编译器的一些选项,这里是可选的,去掉也没有问题.\n\n下面可以输入`$make`看看有没有问题,注意Makefile文件的书写格式.\n最后,输入`$make clean`来清理掉生成的二进制文件.因为上一步`make`所使用的编译器并不是我们的交叉编译链,生成的二进制文件并不能在开发板中运行.上一步只是验证我们的src中的内容正确与否.\n\n---\n### 2.创建helloworld包\n下一步我们要创建一个新的Makefile文件,在这个文件中我们要描述的是helloworld包的信息,比如:如何配置,如何编译,如何打包,安装位置等.\n\n```\n$cd ~/temp/helloworld\n$touch Makefile\n```\n\n如下为Makefile内容:\n\n```\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=helloworld\nPKG_RELEASE:=1\nPKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/helloworld\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tTITLE:=Helloworld -- prints a snarky message\nendef\n\ndefine Package/helloworld/description\n\tIt's my first package demo.\nendef\n\ndefine Build/Prepare\n\techo \"Here is Package/Prepare\"\n\tmkdir -p $(PKG_BUILD_DIR)\n    $(CP) ./src/* $(PKG_BUILD_DIR)/\nendef\n\ndefine Package/helloworld/install\n\techo \"Here is Package/install\"\n\t$(INSTALL_DIR) $(1)/bin\n\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/helloworld $(1)/bin/\nendef\n\n$(eval $(call BuildPackage,helloworld))\n```\n\n如下是最后的文件树形图:\n\n![树形图](http://i3.tietuku.com/8e9f244567388099.jpg)\n\n---\n\n### 3.Makefile注释\n\n第1行`include $(TOPDIR)/rules.mk`\n>   一般在Makefile的开头,包含了包的基本信息,\n\n>比如Makefile中的`$(BUILD_DIR)`,`$(INCLUDE_DIR)`,`$(CP)`,`$(INSTALL_DIR)`,`$(INSTALL_BIN)`都是这里定义的.具体内容可以到源码主目录下,查看`rules.mk`文件.\n\n3~5行,软件包的信息均以“PKG_”开头，其意思和作用如下\n>   PKG_NAME：软件包名称，将在menuconfig和ipkg可以看到。\n\n>    PKG_VERSION：软件版本号。\n\n>    PKG_RELEASE：Makefile的版本号\n\n>    PKG_SOURCE：源代码的文件名。\n\n>    PKG_SOURCE_URL：源代码的下载网站位置。\n\n>    PKG_MD5SUM：源代码文件的效验码。用于核对软件包是否下载正确。\n\n>    PKG_CAT：源代码文件的解压方法。包括zcat, bzcat, unzip等。\n\n>    PKG_BUILD_DIR：软件包编译目录。它的父目录为$(BUILD_DIR)。\n\n第7行`include $(INCLUDE_DIR)/package.mk`\n>   一般在软件包的基本信息完成后再引入，他定义了用户态软件包的规则。\n\n>编译包分为用户态和内核模块，用户态软件包使用Package，内核模块使用KernelPackage.\n\n>`$(INCLUDE_DIR)/Kernel.mk`文件对于软件包为内核时不可缺少，\n\n>`$(INCLUDE_DIR)/package.mk`应用在用户态。\n\n>接下来讲述用户态软件包。用户程序的编译包以`Package/`开头，然后接着软件名，在Package定义中的软件名可以与软件包名不一样，而且可以多个定义。\n\n9~13行\n>   定义包的名称为`helloworld`\n\n> SECTION : 包的类型为`utils`\n\n> CATEGORY : 目录为Utilitis,即文件在`menuconfig`中的位置;有时还会有`SUBMENU`项,即子目录.\n\n> TITLE : 用于软件包的简短描述,将显示在`menuconfig`中.\n\n> URL ： 软件包的下载位置。\n\n> MAINTAINER ： 维护者选项。\n\n> **DEPENDS** ： 与其他软件的依赖。即如编译或安装需要其他软件时需要说明。如果存在多个依赖，则每个依赖需用空格分开。依赖前使用+号表示默认显示，即对象沒有选中时也会显示，使用@则默认为不显示，即当依赖对象选中后才显示。\n\n15~17行\n>   软件包的详细描述,将显示在`make menuconfig`中\n\n19~23行\n>   编译准备方法，对于网上下载的软件包不需要再描述。对于非网上下载或自行开发的软件包必须说明编译准备方法。\n\n> 本文所用的准备方法就是首先创建软件包目录，然后将源码拷贝到刚刚创建的目录中。按OpenWrt的习惯，一般把自己设计的程序全部放在src目录下。\n\n25~29行\n>   软件包的安装方法，包括一系列拷贝编译好的文件到指定位置。调用时会带一个参数，就是嵌入系统的镜像文件系统目录，因此$(1)表示嵌入系统的镜像目录。\n\n>`INSTALL_DIR:=install -d -m0755` : 创建所属用戶可读写、执行，其他用戶可读可执行的目录\n\n>`INSTALL_BIN:=install -m0755` : 编译好的文件到镜像文件目录\n\n31行 `$(eval $(call BuildPackage,helloworld))`\n>   完成前面定义后，必须使用eval函数实现各种定义。其格式为：\n\n> 对于一般软件包：`$(eval $(call Package,$(PKG_NAME)))`\n\n> 或对于内核模块：`$(eval $(call KernelPackage,$(PKG_NAME)))`\n\n> 如果一个软件包有多个程序，例如：一个应用程序有自己的内核模块，上面使用的`PKG_NAME`需要灵活变通。`eval`函数可能设计多个。也可以当成多个软件包处理。\n\n这里简单地解释了Makefile文件,更具体地请[参考](http://wiki.openwrt.org/doc/devel/packages)\n\n---\n### 4.编译软件\n至此我们的软件已经基本完成,下面进行编译\n首先将文件文件夹拷贝到**openwrt目录中的package文件中**,这里我的源码目录为`~/openwrt`,你需要把openwrt目录替换为你的openwrt源码目录.\n\n```\n$mv ~/temp/helloworld ~/openwrt/package\n```\n\n然后回到项目主目录运行make menuconfig\n\n```\n$cd ~/openwrt\n$make menuconfig\n```\n\n按\"/\"后,输入helloworld,搜索对应的路径\n\n![搜索](http://i3.tietuku.com/3376b2fa48621a57.png)\n![搜索结果](http://i3.tietuku.com/9947195c15c0d77f.png)\n\n接着到Utilities目录下,找到helloworld并按空格打开;\n![打开编译开关](http://i3.tietuku.com/b389aec1d8d367ee.png)\n\n保存后退出;\n\n```\n$cd ~/openwrt\n$make package/helloworld/compile V=s\n```\n\n编译完成后,ipk应该已经生成\n\n```\n$find bin/ -name \"helloworld*.ipk\"\n```\n\n至此我们已经生成简单的ipk,恭喜:)\n最后可以通过[winscp](http://pan.baidu.com/s/1bnHfXyJ),将ipk[安装](http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&tid=3238)到开发板中.\n\n![结局](http://i3.tietuku.com/1ac2f9939aa02cb9.jpg)\n\n---\n##尾记\n我比较薄弱的是Makefile方面的知识,刚好加强下这个方面的学习,欢迎交流~\n","slug":"helloworld-ipk","published":1,"date":"2015-08-30T16:00:00.000Z","updated":"2016-04-07T06:36:44.281Z","photos":[],"link":"","_id":"cimpzdpnf0008m1f1e2956a0q","content":"<p>##前言</p>\n<p>类似的文章其实网上比较多了,我写这个的目的:</p>\n<blockquote>\n<p>1,网上文章良莠不齐,有些自己都没实际动手操作,随便复制粘贴,实际操作不可行.<br>2,基本只讲了操作,我当时最关心的Makefile文件的解释没有.</p>\n</blockquote>\n<p>所以我自己总结了一篇.</p>\n<a id=\"more\"></a>\n<hr>\n<p>###说明<br>开发板为MT7620a,openwrt版本为:barrier_breaker_14.07.编译主机为ubuntu 14.04 32位.<br><code>git clone git://git.openwrt.org/14.07/openwrt.git</code><br>关于怎么搭建编译环境以及编译请参考<a href=\"http://blog.chinaunix.net/uid-22547469-id-4364254.html\" target=\"_blank\" rel=\"external\">网上</a></p>\n<hr>\n<p>##正文<br>下面我们开始,我们遵循传统以helloworld开始.</p>\n<h3 id=\"1-创建helloworld项目\"><a href=\"#1-创建helloworld项目\" class=\"headerlink\" title=\"1.创建helloworld项目\"></a>1.创建helloworld项目</h3><p>首先我们新建helloworld.c文件和对应的Makefile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$mkdir -p ~/temp/hellworld/src</span><br><span class=\"line\">$cd ~/temp/helloworld/src</span><br><span class=\"line\">$touch helloworld.c Makefile</span><br></pre></td></tr></table></figure>\n<p>如下为helloworld.c的内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    printf(&quot;This is my helloworld!\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下为Makefile文件的内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helloworld : helloworld.o</span><br><span class=\"line\">\t$(CC) $(LDFLAGS) helloworld.o -o helloworld</span><br><span class=\"line\"></span><br><span class=\"line\">helloworld.o : helloworld.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS) -c helloworld.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm *.o helloworld</span><br></pre></td></tr></table></figure>\n<p>$(CC)</p>\n<blockquote>\n<p>  这个值由其他Makefile文件规定,表示我们使用编译器.</p>\n</blockquote>\n<p>$(LDFLAGS)\\$(CFLAGS)</p>\n<blockquote>\n<p>  这个表示编译器的一些选项,这里是可选的,去掉也没有问题.</p>\n</blockquote>\n<p>下面可以输入<code>$make</code>看看有没有问题,注意Makefile文件的书写格式.<br>最后,输入<code>$make clean</code>来清理掉生成的二进制文件.因为上一步<code>make</code>所使用的编译器并不是我们的交叉编译链,生成的二进制文件并不能在开发板中运行.上一步只是验证我们的src中的内容正确与否.</p>\n<hr>\n<h3 id=\"2-创建helloworld包\"><a href=\"#2-创建helloworld包\" class=\"headerlink\" title=\"2.创建helloworld包\"></a>2.创建helloworld包</h3><p>下一步我们要创建一个新的Makefile文件,在这个文件中我们要描述的是helloworld包的信息,比如:如何配置,如何编译,如何打包,安装位置等.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd ~/temp/helloworld</span><br><span class=\"line\">$touch Makefile</span><br></pre></td></tr></table></figure>\n<p>如下为Makefile内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include $(TOPDIR)/rules.mk</span><br><span class=\"line\"></span><br><span class=\"line\">PKG_NAME:=helloworld</span><br><span class=\"line\">PKG_RELEASE:=1</span><br><span class=\"line\">PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">include $(INCLUDE_DIR)/package.mk</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/helloworld</span><br><span class=\"line\">\tSECTION:=utils</span><br><span class=\"line\">\tCATEGORY:=Utilities</span><br><span class=\"line\">\tTITLE:=Helloworld -- prints a snarky message</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/helloworld/description</span><br><span class=\"line\">\tIt&apos;s my first package demo.</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Prepare</span><br><span class=\"line\">\techo &quot;Here is Package/Prepare&quot;</span><br><span class=\"line\">\tmkdir -p $(PKG_BUILD_DIR)</span><br><span class=\"line\">    $(CP) ./src/* $(PKG_BUILD_DIR)/</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/helloworld/install</span><br><span class=\"line\">\techo &quot;Here is Package/install&quot;</span><br><span class=\"line\">\t$(INSTALL_DIR) $(1)/bin</span><br><span class=\"line\">\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/helloworld $(1)/bin/</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call BuildPackage,helloworld))</span><br></pre></td></tr></table></figure>\n<p>如下是最后的文件树形图:</p>\n<p><img src=\"http://i3.tietuku.com/8e9f244567388099.jpg\" alt=\"树形图\"></p>\n<hr>\n<h3 id=\"3-Makefile注释\"><a href=\"#3-Makefile注释\" class=\"headerlink\" title=\"3.Makefile注释\"></a>3.Makefile注释</h3><p>第1行<code>include $(TOPDIR)/rules.mk</code></p>\n<blockquote>\n<p>  一般在Makefile的开头,包含了包的基本信息,</p>\n<p>比如Makefile中的<code>$(BUILD_DIR)</code>,<code>$(INCLUDE_DIR)</code>,<code>$(CP)</code>,<code>$(INSTALL_DIR)</code>,<code>$(INSTALL_BIN)</code>都是这里定义的.具体内容可以到源码主目录下,查看<code>rules.mk</code>文件.</p>\n</blockquote>\n<p>3~5行,软件包的信息均以“PKG_”开头，其意思和作用如下</p>\n<blockquote>\n<p>  PKG_NAME：软件包名称，将在menuconfig和ipkg可以看到。</p>\n<p>   PKG_VERSION：软件版本号。</p>\n<p>   PKG_RELEASE：Makefile的版本号</p>\n<p>   PKG_SOURCE：源代码的文件名。</p>\n<p>   PKG_SOURCE_URL：源代码的下载网站位置。</p>\n<p>   PKG_MD5SUM：源代码文件的效验码。用于核对软件包是否下载正确。</p>\n<p>   PKG_CAT：源代码文件的解压方法。包括zcat, bzcat, unzip等。</p>\n<p>   PKG_BUILD_DIR：软件包编译目录。它的父目录为$(BUILD_DIR)。</p>\n</blockquote>\n<p>第7行<code>include $(INCLUDE_DIR)/package.mk</code></p>\n<blockquote>\n<p>  一般在软件包的基本信息完成后再引入，他定义了用户态软件包的规则。</p>\n<p>编译包分为用户态和内核模块，用户态软件包使用Package，内核模块使用KernelPackage.</p>\n<p><code>$(INCLUDE_DIR)/Kernel.mk</code>文件对于软件包为内核时不可缺少，</p>\n<p><code>$(INCLUDE_DIR)/package.mk</code>应用在用户态。</p>\n<p>接下来讲述用户态软件包。用户程序的编译包以<code>Package/</code>开头，然后接着软件名，在Package定义中的软件名可以与软件包名不一样，而且可以多个定义。</p>\n</blockquote>\n<p>9~13行</p>\n<blockquote>\n<p>  定义包的名称为<code>helloworld</code></p>\n<p>SECTION : 包的类型为<code>utils</code></p>\n<p>CATEGORY : 目录为Utilitis,即文件在<code>menuconfig</code>中的位置;有时还会有<code>SUBMENU</code>项,即子目录.</p>\n<p>TITLE : 用于软件包的简短描述,将显示在<code>menuconfig</code>中.</p>\n<p>URL ： 软件包的下载位置。</p>\n<p>MAINTAINER ： 维护者选项。</p>\n<p><strong>DEPENDS</strong> ： 与其他软件的依赖。即如编译或安装需要其他软件时需要说明。如果存在多个依赖，则每个依赖需用空格分开。依赖前使用+号表示默认显示，即对象沒有选中时也会显示，使用@则默认为不显示，即当依赖对象选中后才显示。</p>\n</blockquote>\n<p>15~17行</p>\n<blockquote>\n<p>  软件包的详细描述,将显示在<code>make menuconfig</code>中</p>\n</blockquote>\n<p>19~23行</p>\n<blockquote>\n<p>  编译准备方法，对于网上下载的软件包不需要再描述。对于非网上下载或自行开发的软件包必须说明编译准备方法。</p>\n<p>本文所用的准备方法就是首先创建软件包目录，然后将源码拷贝到刚刚创建的目录中。按OpenWrt的习惯，一般把自己设计的程序全部放在src目录下。</p>\n</blockquote>\n<p>25~29行</p>\n<blockquote>\n<p>  软件包的安装方法，包括一系列拷贝编译好的文件到指定位置。调用时会带一个参数，就是嵌入系统的镜像文件系统目录，因此$(1)表示嵌入系统的镜像目录。</p>\n<p><code>INSTALL_DIR:=install -d -m0755</code> : 创建所属用戶可读写、执行，其他用戶可读可执行的目录</p>\n<p><code>INSTALL_BIN:=install -m0755</code> : 编译好的文件到镜像文件目录</p>\n</blockquote>\n<p>31行 <code>$(eval $(call BuildPackage,helloworld))</code></p>\n<blockquote>\n<p>  完成前面定义后，必须使用eval函数实现各种定义。其格式为：</p>\n<p>对于一般软件包：<code>$(eval $(call Package,$(PKG_NAME)))</code></p>\n<p>或对于内核模块：<code>$(eval $(call KernelPackage,$(PKG_NAME)))</code></p>\n<p>如果一个软件包有多个程序，例如：一个应用程序有自己的内核模块，上面使用的<code>PKG_NAME</code>需要灵活变通。<code>eval</code>函数可能设计多个。也可以当成多个软件包处理。</p>\n</blockquote>\n<p>这里简单地解释了Makefile文件,更具体地请<a href=\"http://wiki.openwrt.org/doc/devel/packages\" target=\"_blank\" rel=\"external\">参考</a></p>\n<hr>\n<h3 id=\"4-编译软件\"><a href=\"#4-编译软件\" class=\"headerlink\" title=\"4.编译软件\"></a>4.编译软件</h3><p>至此我们的软件已经基本完成,下面进行编译<br>首先将文件文件夹拷贝到<strong>openwrt目录中的package文件中</strong>,这里我的源码目录为<code>~/openwrt</code>,你需要把openwrt目录替换为你的openwrt源码目录.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$mv ~/temp/helloworld ~/openwrt/package</span><br></pre></td></tr></table></figure>\n<p>然后回到项目主目录运行make menuconfig</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd ~/openwrt</span><br><span class=\"line\">$make menuconfig</span><br></pre></td></tr></table></figure>\n<p>按”/“后,输入helloworld,搜索对应的路径</p>\n<p><img src=\"http://i3.tietuku.com/3376b2fa48621a57.png\" alt=\"搜索\"><br><img src=\"http://i3.tietuku.com/9947195c15c0d77f.png\" alt=\"搜索结果\"></p>\n<p>接着到Utilities目录下,找到helloworld并按空格打开;<br><img src=\"http://i3.tietuku.com/b389aec1d8d367ee.png\" alt=\"打开编译开关\"></p>\n<p>保存后退出;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd ~/openwrt</span><br><span class=\"line\">$make package/helloworld/compile V=s</span><br></pre></td></tr></table></figure>\n<p>编译完成后,ipk应该已经生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find bin/ -name &quot;helloworld*.ipk&quot;</span><br></pre></td></tr></table></figure>\n<p>至此我们已经生成简单的ipk,恭喜:)<br>最后可以通过<a href=\"http://pan.baidu.com/s/1bnHfXyJ\" target=\"_blank\" rel=\"external\">winscp</a>,将ipk<a href=\"http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&amp;tid=3238\" target=\"_blank\" rel=\"external\">安装</a>到开发板中.</p>\n<p><img src=\"http://i3.tietuku.com/1ac2f9939aa02cb9.jpg\" alt=\"结局\"></p>\n<hr>\n<p>##尾记<br>我比较薄弱的是Makefile方面的知识,刚好加强下这个方面的学习,欢迎交流~</p>\n","excerpt":"<p>##前言</p>\n<p>类似的文章其实网上比较多了,我写这个的目的:</p>\n<blockquote>\n<p>1,网上文章良莠不齐,有些自己都没实际动手操作,随便复制粘贴,实际操作不可行.<br>2,基本只讲了操作,我当时最关心的Makefile文件的解释没有.</p>\n</blockquote>\n<p>所以我自己总结了一篇.</p>","more":"<hr>\n<p>###说明<br>开发板为MT7620a,openwrt版本为:barrier_breaker_14.07.编译主机为ubuntu 14.04 32位.<br><code>git clone git://git.openwrt.org/14.07/openwrt.git</code><br>关于怎么搭建编译环境以及编译请参考<a href=\"http://blog.chinaunix.net/uid-22547469-id-4364254.html\">网上</a></p>\n<hr>\n<p>##正文<br>下面我们开始,我们遵循传统以helloworld开始.</p>\n<h3 id=\"1-创建helloworld项目\"><a href=\"#1-创建helloworld项目\" class=\"headerlink\" title=\"1.创建helloworld项目\"></a>1.创建helloworld项目</h3><p>首先我们新建helloworld.c文件和对应的Makefile文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$mkdir -p ~/temp/hellworld/src</span><br><span class=\"line\">$cd ~/temp/helloworld/src</span><br><span class=\"line\">$touch helloworld.c Makefile</span><br></pre></td></tr></table></figure>\n<p>如下为helloworld.c的内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    printf(&quot;This is my helloworld!\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如下为Makefile文件的内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">helloworld : helloworld.o</span><br><span class=\"line\">\t$(CC) $(LDFLAGS) helloworld.o -o helloworld</span><br><span class=\"line\"></span><br><span class=\"line\">helloworld.o : helloworld.c</span><br><span class=\"line\">\t$(CC) $(CFLAGS) -c helloworld.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm *.o helloworld</span><br></pre></td></tr></table></figure>\n<p>$(CC)</p>\n<blockquote>\n<p>  这个值由其他Makefile文件规定,表示我们使用编译器.</p>\n</blockquote>\n<p>$(LDFLAGS)\\$(CFLAGS)</p>\n<blockquote>\n<p>  这个表示编译器的一些选项,这里是可选的,去掉也没有问题.</p>\n</blockquote>\n<p>下面可以输入<code>$make</code>看看有没有问题,注意Makefile文件的书写格式.<br>最后,输入<code>$make clean</code>来清理掉生成的二进制文件.因为上一步<code>make</code>所使用的编译器并不是我们的交叉编译链,生成的二进制文件并不能在开发板中运行.上一步只是验证我们的src中的内容正确与否.</p>\n<hr>\n<h3 id=\"2-创建helloworld包\"><a href=\"#2-创建helloworld包\" class=\"headerlink\" title=\"2.创建helloworld包\"></a>2.创建helloworld包</h3><p>下一步我们要创建一个新的Makefile文件,在这个文件中我们要描述的是helloworld包的信息,比如:如何配置,如何编译,如何打包,安装位置等.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd ~/temp/helloworld</span><br><span class=\"line\">$touch Makefile</span><br></pre></td></tr></table></figure>\n<p>如下为Makefile内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include $(TOPDIR)/rules.mk</span><br><span class=\"line\"></span><br><span class=\"line\">PKG_NAME:=helloworld</span><br><span class=\"line\">PKG_RELEASE:=1</span><br><span class=\"line\">PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">include $(INCLUDE_DIR)/package.mk</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/helloworld</span><br><span class=\"line\">\tSECTION:=utils</span><br><span class=\"line\">\tCATEGORY:=Utilities</span><br><span class=\"line\">\tTITLE:=Helloworld -- prints a snarky message</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/helloworld/description</span><br><span class=\"line\">\tIt&apos;s my first package demo.</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Prepare</span><br><span class=\"line\">\techo &quot;Here is Package/Prepare&quot;</span><br><span class=\"line\">\tmkdir -p $(PKG_BUILD_DIR)</span><br><span class=\"line\">    $(CP) ./src/* $(PKG_BUILD_DIR)/</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/helloworld/install</span><br><span class=\"line\">\techo &quot;Here is Package/install&quot;</span><br><span class=\"line\">\t$(INSTALL_DIR) $(1)/bin</span><br><span class=\"line\">\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/helloworld $(1)/bin/</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call BuildPackage,helloworld))</span><br></pre></td></tr></table></figure>\n<p>如下是最后的文件树形图:</p>\n<p><img src=\"http://i3.tietuku.com/8e9f244567388099.jpg\" alt=\"树形图\"></p>\n<hr>\n<h3 id=\"3-Makefile注释\"><a href=\"#3-Makefile注释\" class=\"headerlink\" title=\"3.Makefile注释\"></a>3.Makefile注释</h3><p>第1行<code>include $(TOPDIR)/rules.mk</code></p>\n<blockquote>\n<p>  一般在Makefile的开头,包含了包的基本信息,</p>\n<p>比如Makefile中的<code>$(BUILD_DIR)</code>,<code>$(INCLUDE_DIR)</code>,<code>$(CP)</code>,<code>$(INSTALL_DIR)</code>,<code>$(INSTALL_BIN)</code>都是这里定义的.具体内容可以到源码主目录下,查看<code>rules.mk</code>文件.</p>\n</blockquote>\n<p>3~5行,软件包的信息均以“PKG_”开头，其意思和作用如下</p>\n<blockquote>\n<p>  PKG_NAME：软件包名称，将在menuconfig和ipkg可以看到。</p>\n<p>   PKG_VERSION：软件版本号。</p>\n<p>   PKG_RELEASE：Makefile的版本号</p>\n<p>   PKG_SOURCE：源代码的文件名。</p>\n<p>   PKG_SOURCE_URL：源代码的下载网站位置。</p>\n<p>   PKG_MD5SUM：源代码文件的效验码。用于核对软件包是否下载正确。</p>\n<p>   PKG_CAT：源代码文件的解压方法。包括zcat, bzcat, unzip等。</p>\n<p>   PKG_BUILD_DIR：软件包编译目录。它的父目录为$(BUILD_DIR)。</p>\n</blockquote>\n<p>第7行<code>include $(INCLUDE_DIR)/package.mk</code></p>\n<blockquote>\n<p>  一般在软件包的基本信息完成后再引入，他定义了用户态软件包的规则。</p>\n<p>编译包分为用户态和内核模块，用户态软件包使用Package，内核模块使用KernelPackage.</p>\n<p><code>$(INCLUDE_DIR)/Kernel.mk</code>文件对于软件包为内核时不可缺少，</p>\n<p><code>$(INCLUDE_DIR)/package.mk</code>应用在用户态。</p>\n<p>接下来讲述用户态软件包。用户程序的编译包以<code>Package/</code>开头，然后接着软件名，在Package定义中的软件名可以与软件包名不一样，而且可以多个定义。</p>\n</blockquote>\n<p>9~13行</p>\n<blockquote>\n<p>  定义包的名称为<code>helloworld</code></p>\n<p>SECTION : 包的类型为<code>utils</code></p>\n<p>CATEGORY : 目录为Utilitis,即文件在<code>menuconfig</code>中的位置;有时还会有<code>SUBMENU</code>项,即子目录.</p>\n<p>TITLE : 用于软件包的简短描述,将显示在<code>menuconfig</code>中.</p>\n<p>URL ： 软件包的下载位置。</p>\n<p>MAINTAINER ： 维护者选项。</p>\n<p><strong>DEPENDS</strong> ： 与其他软件的依赖。即如编译或安装需要其他软件时需要说明。如果存在多个依赖，则每个依赖需用空格分开。依赖前使用+号表示默认显示，即对象沒有选中时也会显示，使用@则默认为不显示，即当依赖对象选中后才显示。</p>\n</blockquote>\n<p>15~17行</p>\n<blockquote>\n<p>  软件包的详细描述,将显示在<code>make menuconfig</code>中</p>\n</blockquote>\n<p>19~23行</p>\n<blockquote>\n<p>  编译准备方法，对于网上下载的软件包不需要再描述。对于非网上下载或自行开发的软件包必须说明编译准备方法。</p>\n<p>本文所用的准备方法就是首先创建软件包目录，然后将源码拷贝到刚刚创建的目录中。按OpenWrt的习惯，一般把自己设计的程序全部放在src目录下。</p>\n</blockquote>\n<p>25~29行</p>\n<blockquote>\n<p>  软件包的安装方法，包括一系列拷贝编译好的文件到指定位置。调用时会带一个参数，就是嵌入系统的镜像文件系统目录，因此$(1)表示嵌入系统的镜像目录。</p>\n<p><code>INSTALL_DIR:=install -d -m0755</code> : 创建所属用戶可读写、执行，其他用戶可读可执行的目录</p>\n<p><code>INSTALL_BIN:=install -m0755</code> : 编译好的文件到镜像文件目录</p>\n</blockquote>\n<p>31行 <code>$(eval $(call BuildPackage,helloworld))</code></p>\n<blockquote>\n<p>  完成前面定义后，必须使用eval函数实现各种定义。其格式为：</p>\n<p>对于一般软件包：<code>$(eval $(call Package,$(PKG_NAME)))</code></p>\n<p>或对于内核模块：<code>$(eval $(call KernelPackage,$(PKG_NAME)))</code></p>\n<p>如果一个软件包有多个程序，例如：一个应用程序有自己的内核模块，上面使用的<code>PKG_NAME</code>需要灵活变通。<code>eval</code>函数可能设计多个。也可以当成多个软件包处理。</p>\n</blockquote>\n<p>这里简单地解释了Makefile文件,更具体地请<a href=\"http://wiki.openwrt.org/doc/devel/packages\">参考</a></p>\n<hr>\n<h3 id=\"4-编译软件\"><a href=\"#4-编译软件\" class=\"headerlink\" title=\"4.编译软件\"></a>4.编译软件</h3><p>至此我们的软件已经基本完成,下面进行编译<br>首先将文件文件夹拷贝到<strong>openwrt目录中的package文件中</strong>,这里我的源码目录为<code>~/openwrt</code>,你需要把openwrt目录替换为你的openwrt源码目录.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$mv ~/temp/helloworld ~/openwrt/package</span><br></pre></td></tr></table></figure>\n<p>然后回到项目主目录运行make menuconfig</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd ~/openwrt</span><br><span class=\"line\">$make menuconfig</span><br></pre></td></tr></table></figure>\n<p>按”/“后,输入helloworld,搜索对应的路径</p>\n<p><img src=\"http://i3.tietuku.com/3376b2fa48621a57.png\" alt=\"搜索\"><br><img src=\"http://i3.tietuku.com/9947195c15c0d77f.png\" alt=\"搜索结果\"></p>\n<p>接着到Utilities目录下,找到helloworld并按空格打开;<br><img src=\"http://i3.tietuku.com/b389aec1d8d367ee.png\" alt=\"打开编译开关\"></p>\n<p>保存后退出;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cd ~/openwrt</span><br><span class=\"line\">$make package/helloworld/compile V=s</span><br></pre></td></tr></table></figure>\n<p>编译完成后,ipk应该已经生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find bin/ -name &quot;helloworld*.ipk&quot;</span><br></pre></td></tr></table></figure>\n<p>至此我们已经生成简单的ipk,恭喜:)<br>最后可以通过<a href=\"http://pan.baidu.com/s/1bnHfXyJ\">winscp</a>,将ipk<a href=\"http://www.openwrt.org.cn/bbs/forum.php?mod=viewthread&amp;tid=3238\">安装</a>到开发板中.</p>\n<p><img src=\"http://i3.tietuku.com/1ac2f9939aa02cb9.jpg\" alt=\"结局\"></p>\n<hr>\n<p>##尾记<br>我比较薄弱的是Makefile方面的知识,刚好加强下这个方面的学习,欢迎交流~</p>"},{"layout":"post","title":"xargs用法详解","comments":1,"analytics":true,"_content":"\n\n\n##前言\n　最近我从svn上checkout出来了一个文件夹,然后加入了git的跟踪目录.用过svn的同学可能知道,这个文件夹里面每一层级都有个.svn隐藏文件夹,需要删除他们.本来我准备笨拙地一个一个手动删除的,一位同事在我面前敲了大概是`$find . -type d -name \"*.svn\" | xargs rm -rf`这样的命令,顿时觉得很高端大气上档次.刚好新学了Markdown,就顺便整理下xargs的用法,练练手.[参考网址](http://czmmiao.iteye.com/blog/1949225),当然更主要的参考来自于伟大的`$man xargs`.\n\n<!--more-->\n\n----\n\n### 1.概述\n`xargs`从标准输入(stdin)中读取数据进行处理\n\n* 数据以空格进行分隔\n* 可以根据参数进行一次或多次处理,默认的处理命令是`/bin/echo`\n* 空行不进行处理,会被忽略\n* 遇到命令状态为255时,xargs会立刻停止,譬如发生错误时.\n\n下面我们来看看`xargs`有哪些参数可以选择.\n\n### 2.options\n\n* -a *file*\n:   从*file*中读入数据\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$xargs -a 1.txt\naaa bbb ccc ddd a b\n```\n\n* -0\n:   当输入有特殊字符时,将其当作一般字符处理,比如\"\\\"和空格\n\n```\n$echo \"// \" | xargs\n//\n$echo \"// \" | xargs -0\n//\n```\n\n* -d\n:   指定分隔符\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$cat 1.txt | xargs -d 'c'\naaa bbb     ddd\na b\n```\n\n* -E *eof-str*\n:   指定结束标志为`eof-str`,`xargs`处理到这个标志就会停止\n\n```\n$xargs -E 'ddd' -a 1.txt\naaa bbb ccc\n$xargs -E 'dd' -a 1.txt\naaa bbb ccc ddd a b\n$cat 1.txt | xargs -E 'ddd'\naaa bbb ccc\n```\n\n* -I *replace-str*\n:   将每行输入输入内容替换为`replace-str`\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$cat 1.txt | xargs -t -I {} echo {} >> 1.txt\necho aaa bbb ccc ddd\necho a b\n$cat 1.txt\naaa bbb ccc ddd\na b\naaa bbb ccc ddd\na b\n```\n\n* -i\n:   等同于`-I{}`\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$cat 1.txt | xargs -t -i echo {} >> 1.txt\necho aaa bbb ccc ddd\necho a b\n$cat 1.txt\naaa bbb ccc ddd\na\naaa bbb ccc ddd\na b\n$cat 1.txt |xargs -L 2\naaa bbb ccc ddd a b\n$cat 1.txt |xar -L 1\naaa bbb ccc ddd\na b\n```\n\n* -l\n:   类似于`-L`,区别在于`-l`可以不指定参数,默认为1.\n\n* -n *max-args*\n:   每行执行`max-args`个输入,默认执行所有\n\n```\n$cat 1.txt | xargs -n 2\naaa bbb\nccc ddd\na b\n```\n\n* -p\n:   交互模式,执行前询问是否执行\n\n```\n$cat 1.txt | xargs -p\n/bin/echo aaa bbb ccc ddd a b ?...y\naaa bbb ccc ddd a b\n$cat 1.txt | xargs -p\n/bin/echo aaa bbb ccc ddd a b ?...n\n```\n\n* -r\n:   无输入则停止执行,默认至少执行1次\n\n```\n$ echo \"\"|xargs -t mv\nmv\nmv: missing file operand\nTry `mv --help` for more information.\n$ echo \"\"|xargs -t -r mv    #直接退出\n```\n\n* -s *max-chars*\n:   `xargs`每次执行命令的最大长度(含空格)\n\n```\n$ cat 1.txt\naaa bbb ccc ddd a b\n$ cat 1.txt |xargs -t -s 30\n/bin/echo aaa bbb ccc ddd a b\naaa bbb ccc ddd a b\n#length(/bin/echo aaa bbb ccc ddd a b )=30\n$cat 1.txt |xargs -t -s 14\n/bin/echo aaa\naaa\n/bin/echo bbb\nbbb\n/bin/echo ccc\nccc\n/bin/echo ddd\nddd\n/bin/echo a b\na b\n#length(/bin/echo aaa )=14\n```\n\n* -t\n:   先打印执行的命令,然后执行\n\n```\n$cat 1.txt | xargs -t\n/bin/echo aaa bbb ccc ddd a b\naaa bbb ccc ddd a b\n```\n\n* -x\n:   当`xargs`执行的命令长度大于`-s max-char`时,停止执行\n\n* -P *max-procs*\n:   修改线程数,默认为单线程.`max-procs`为0时,`as many processes as possible`\n\n---\n\n### 3. find和xargs\n　在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。find命令把匹配到的文件 传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一 批，并如此继续下去。\n\n　在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目 都会根据该命令的选项及系统内核中相应的可调参数来确定。\n\n　管道是把一个命令的输出传递给另一个命令作为输入，比如：`command1 | command2`但是command2仅仅把command1输出的内容作为输入参数。`find . -name \"install.log\" -print`打印出的是*install.log*这个字符串，如果仅仅使用管道，那么command2能够使用的仅仅是install.log这个字符串，不能把它当作文件来进行处理。\n　当然这个command2除了xargs。xargs就是为了能够对find搜索到的文件进行操作而编写的。它能把管道传来的字符串当作文件交给其后的命令执行。\n\n###4 Example\n\n```\n$find . -name \"1.txt\"  | cat\n./1.txt\n#显示从管道传来的内容，仅仅作为字符串来处理\n```\n\n```\n$find . -name \"1.txt\" | xargs cat\naaa bbb ccc ddd\na b\n#将管道传来的内容作为文件，交给cat执行。也就是说，该命令执行的是如果存在1.txt，那么就打印出这个文件的内容。\n```\n\n```\n$find . -perm -7 -print | xargs chmod o-w\n#在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限\n```\n\n```\n$ find . -type f -print | xargs file\n#查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件\n```\n\n```\n$find ~ -name '*.log' -print0 | xargs -i -0 rm -f {}\n#尝试用rm 删除太多的文件，你可能得到一个错误信息：/bin/rm Argument list too long. 用xargs 去避免这个问题\n```\n\n```\n$find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz\n#查找所有的jpg 文件，并且压缩它\n```\n\n```\n$ls *.jpg | xargs -n 1 -i cp {} /external-hard-drive/directory\n#拷贝所有的图片文件到一个外部的硬盘驱动\n```\n\n---\n##尾记\n这里只是最简略的用法,目的是快速理解上手使用.如果遇到问题,请使用`man xargs`或者拨打`10086`:)\n\n特别鸣谢:\n\nhttp://blog.csdn.net/zhangfn2011/article/details/6776925\nhttp://blog.csdn.net/hittata/article/details/8021500\nhttp://www.cnblogs.com/wdpp/archive/2012/02/28/2386683.html\nhttp://blog.163.com/ly_89/blog/static/18690229920117208314257/\nhttp://aix.chinaunix.net/doc/2008/03/01/1108340.shtml\nhttp://blog.chinaunix.net/uid-15117916-id-4920.html\n","source":"_posts/2015-08-20-xargs用法详解.md","raw":"---\nlayout: post\ntitle: xargs用法详解\ncategory: 命令行的艺术\ntags: Linux\ncomments: true\nanalytics: true\n---\n\n\n\n##前言\n　最近我从svn上checkout出来了一个文件夹,然后加入了git的跟踪目录.用过svn的同学可能知道,这个文件夹里面每一层级都有个.svn隐藏文件夹,需要删除他们.本来我准备笨拙地一个一个手动删除的,一位同事在我面前敲了大概是`$find . -type d -name \"*.svn\" | xargs rm -rf`这样的命令,顿时觉得很高端大气上档次.刚好新学了Markdown,就顺便整理下xargs的用法,练练手.[参考网址](http://czmmiao.iteye.com/blog/1949225),当然更主要的参考来自于伟大的`$man xargs`.\n\n<!--more-->\n\n----\n\n### 1.概述\n`xargs`从标准输入(stdin)中读取数据进行处理\n\n* 数据以空格进行分隔\n* 可以根据参数进行一次或多次处理,默认的处理命令是`/bin/echo`\n* 空行不进行处理,会被忽略\n* 遇到命令状态为255时,xargs会立刻停止,譬如发生错误时.\n\n下面我们来看看`xargs`有哪些参数可以选择.\n\n### 2.options\n\n* -a *file*\n:   从*file*中读入数据\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$xargs -a 1.txt\naaa bbb ccc ddd a b\n```\n\n* -0\n:   当输入有特殊字符时,将其当作一般字符处理,比如\"\\\"和空格\n\n```\n$echo \"// \" | xargs\n//\n$echo \"// \" | xargs -0\n//\n```\n\n* -d\n:   指定分隔符\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$cat 1.txt | xargs -d 'c'\naaa bbb     ddd\na b\n```\n\n* -E *eof-str*\n:   指定结束标志为`eof-str`,`xargs`处理到这个标志就会停止\n\n```\n$xargs -E 'ddd' -a 1.txt\naaa bbb ccc\n$xargs -E 'dd' -a 1.txt\naaa bbb ccc ddd a b\n$cat 1.txt | xargs -E 'ddd'\naaa bbb ccc\n```\n\n* -I *replace-str*\n:   将每行输入输入内容替换为`replace-str`\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$cat 1.txt | xargs -t -I {} echo {} >> 1.txt\necho aaa bbb ccc ddd\necho a b\n$cat 1.txt\naaa bbb ccc ddd\na b\naaa bbb ccc ddd\na b\n```\n\n* -i\n:   等同于`-I{}`\n\n```\n$cat 1.txt\naaa bbb ccc ddd\na b\n$cat 1.txt | xargs -t -i echo {} >> 1.txt\necho aaa bbb ccc ddd\necho a b\n$cat 1.txt\naaa bbb ccc ddd\na\naaa bbb ccc ddd\na b\n$cat 1.txt |xargs -L 2\naaa bbb ccc ddd a b\n$cat 1.txt |xar -L 1\naaa bbb ccc ddd\na b\n```\n\n* -l\n:   类似于`-L`,区别在于`-l`可以不指定参数,默认为1.\n\n* -n *max-args*\n:   每行执行`max-args`个输入,默认执行所有\n\n```\n$cat 1.txt | xargs -n 2\naaa bbb\nccc ddd\na b\n```\n\n* -p\n:   交互模式,执行前询问是否执行\n\n```\n$cat 1.txt | xargs -p\n/bin/echo aaa bbb ccc ddd a b ?...y\naaa bbb ccc ddd a b\n$cat 1.txt | xargs -p\n/bin/echo aaa bbb ccc ddd a b ?...n\n```\n\n* -r\n:   无输入则停止执行,默认至少执行1次\n\n```\n$ echo \"\"|xargs -t mv\nmv\nmv: missing file operand\nTry `mv --help` for more information.\n$ echo \"\"|xargs -t -r mv    #直接退出\n```\n\n* -s *max-chars*\n:   `xargs`每次执行命令的最大长度(含空格)\n\n```\n$ cat 1.txt\naaa bbb ccc ddd a b\n$ cat 1.txt |xargs -t -s 30\n/bin/echo aaa bbb ccc ddd a b\naaa bbb ccc ddd a b\n#length(/bin/echo aaa bbb ccc ddd a b )=30\n$cat 1.txt |xargs -t -s 14\n/bin/echo aaa\naaa\n/bin/echo bbb\nbbb\n/bin/echo ccc\nccc\n/bin/echo ddd\nddd\n/bin/echo a b\na b\n#length(/bin/echo aaa )=14\n```\n\n* -t\n:   先打印执行的命令,然后执行\n\n```\n$cat 1.txt | xargs -t\n/bin/echo aaa bbb ccc ddd a b\naaa bbb ccc ddd a b\n```\n\n* -x\n:   当`xargs`执行的命令长度大于`-s max-char`时,停止执行\n\n* -P *max-procs*\n:   修改线程数,默认为单线程.`max-procs`为0时,`as many processes as possible`\n\n---\n\n### 3. find和xargs\n　在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。find命令把匹配到的文件 传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一 批，并如此继续下去。\n\n　在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目 都会根据该命令的选项及系统内核中相应的可调参数来确定。\n\n　管道是把一个命令的输出传递给另一个命令作为输入，比如：`command1 | command2`但是command2仅仅把command1输出的内容作为输入参数。`find . -name \"install.log\" -print`打印出的是*install.log*这个字符串，如果仅仅使用管道，那么command2能够使用的仅仅是install.log这个字符串，不能把它当作文件来进行处理。\n　当然这个command2除了xargs。xargs就是为了能够对find搜索到的文件进行操作而编写的。它能把管道传来的字符串当作文件交给其后的命令执行。\n\n###4 Example\n\n```\n$find . -name \"1.txt\"  | cat\n./1.txt\n#显示从管道传来的内容，仅仅作为字符串来处理\n```\n\n```\n$find . -name \"1.txt\" | xargs cat\naaa bbb ccc ddd\na b\n#将管道传来的内容作为文件，交给cat执行。也就是说，该命令执行的是如果存在1.txt，那么就打印出这个文件的内容。\n```\n\n```\n$find . -perm -7 -print | xargs chmod o-w\n#在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限\n```\n\n```\n$ find . -type f -print | xargs file\n#查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件\n```\n\n```\n$find ~ -name '*.log' -print0 | xargs -i -0 rm -f {}\n#尝试用rm 删除太多的文件，你可能得到一个错误信息：/bin/rm Argument list too long. 用xargs 去避免这个问题\n```\n\n```\n$find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz\n#查找所有的jpg 文件，并且压缩它\n```\n\n```\n$ls *.jpg | xargs -n 1 -i cp {} /external-hard-drive/directory\n#拷贝所有的图片文件到一个外部的硬盘驱动\n```\n\n---\n##尾记\n这里只是最简略的用法,目的是快速理解上手使用.如果遇到问题,请使用`man xargs`或者拨打`10086`:)\n\n特别鸣谢:\n\nhttp://blog.csdn.net/zhangfn2011/article/details/6776925\nhttp://blog.csdn.net/hittata/article/details/8021500\nhttp://www.cnblogs.com/wdpp/archive/2012/02/28/2386683.html\nhttp://blog.163.com/ly_89/blog/static/18690229920117208314257/\nhttp://aix.chinaunix.net/doc/2008/03/01/1108340.shtml\nhttp://blog.chinaunix.net/uid-15117916-id-4920.html\n","slug":"xargs用法详解","published":1,"date":"2015-08-19T16:00:00.000Z","updated":"2016-04-07T06:36:34.169Z","photos":[],"link":"","_id":"cimpzdpni000am1f1hsnz3pue","content":"<p>##前言<br>　最近我从svn上checkout出来了一个文件夹,然后加入了git的跟踪目录.用过svn的同学可能知道,这个文件夹里面每一层级都有个.svn隐藏文件夹,需要删除他们.本来我准备笨拙地一个一个手动删除的,一位同事在我面前敲了大概是<code>$find . -type d -name &quot;*.svn&quot; | xargs rm -rf</code>这样的命令,顿时觉得很高端大气上档次.刚好新学了Markdown,就顺便整理下xargs的用法,练练手.<a href=\"http://czmmiao.iteye.com/blog/1949225\" target=\"_blank\" rel=\"external\">参考网址</a>,当然更主要的参考来自于伟大的<code>$man xargs</code>.</p>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h3><p><code>xargs</code>从标准输入(stdin)中读取数据进行处理</p>\n<ul>\n<li>数据以空格进行分隔</li>\n<li>可以根据参数进行一次或多次处理,默认的处理命令是<code>/bin/echo</code></li>\n<li>空行不进行处理,会被忽略</li>\n<li>遇到命令状态为255时,xargs会立刻停止,譬如发生错误时.</li>\n</ul>\n<p>下面我们来看看<code>xargs</code>有哪些参数可以选择.</p>\n<h3 id=\"2-options\"><a href=\"#2-options\" class=\"headerlink\" title=\"2.options\"></a>2.options</h3><ul>\n<li>-a <em>file</em><br>:   从<em>file</em>中读入数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$xargs -a 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-0<br>:   当输入有特殊字符时,将其当作一般字符处理,比如”\\”和空格</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$echo &quot;// &quot; | xargs</span><br><span class=\"line\">//</span><br><span class=\"line\">$echo &quot;// &quot; | xargs -0</span><br><span class=\"line\">//</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-d<br>:   指定分隔符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt | xargs -d &apos;c&apos;</span><br><span class=\"line\">aaa bbb     ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-E <em>eof-str</em><br>:   指定结束标志为<code>eof-str</code>,<code>xargs</code>处理到这个标志就会停止</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$xargs -E &apos;ddd&apos; -a 1.txt</span><br><span class=\"line\">aaa bbb ccc</span><br><span class=\"line\">$xargs -E &apos;dd&apos; -a 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$cat 1.txt | xargs -E &apos;ddd&apos;</span><br><span class=\"line\">aaa bbb ccc</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-I <em>replace-str</em><br>:   将每行输入输入内容替换为<code>replace-str</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt | xargs -t -I &#123;&#125; echo &#123;&#125; &gt;&gt; 1.txt</span><br><span class=\"line\">echo aaa bbb ccc ddd</span><br><span class=\"line\">echo a b</span><br><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-i<br>:   等同于<code>-I{}</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt | xargs -t -i echo &#123;&#125; &gt;&gt; 1.txt</span><br><span class=\"line\">echo aaa bbb ccc ddd</span><br><span class=\"line\">echo a b</span><br><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt |xargs -L 2</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$cat 1.txt |xar -L 1</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>-l<br>:   类似于<code>-L</code>,区别在于<code>-l</code>可以不指定参数,默认为1.</p>\n</li>\n<li><p>-n <em>max-args</em><br>:   每行执行<code>max-args</code>个输入,默认执行所有</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt | xargs -n 2</span><br><span class=\"line\">aaa bbb</span><br><span class=\"line\">ccc ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-p<br>:   交互模式,执行前询问是否执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt | xargs -p</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b ?...y</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$cat 1.txt | xargs -p</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b ?...n</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-r<br>:   无输入则停止执行,默认至少执行1次</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;&quot;|xargs -t mv</span><br><span class=\"line\">mv</span><br><span class=\"line\">mv: missing file operand</span><br><span class=\"line\">Try `mv --help` for more information.</span><br><span class=\"line\">$ echo &quot;&quot;|xargs -t -r mv    #直接退出</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-s <em>max-chars</em><br>:   <code>xargs</code>每次执行命令的最大长度(含空格)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$ cat 1.txt |xargs -t -s 30</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">#length(/bin/echo aaa bbb ccc ddd a b )=30</span><br><span class=\"line\">$cat 1.txt |xargs -t -s 14</span><br><span class=\"line\">/bin/echo aaa</span><br><span class=\"line\">aaa</span><br><span class=\"line\">/bin/echo bbb</span><br><span class=\"line\">bbb</span><br><span class=\"line\">/bin/echo ccc</span><br><span class=\"line\">ccc</span><br><span class=\"line\">/bin/echo ddd</span><br><span class=\"line\">ddd</span><br><span class=\"line\">/bin/echo a b</span><br><span class=\"line\">a b</span><br><span class=\"line\">#length(/bin/echo aaa )=14</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-t<br>:   先打印执行的命令,然后执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt | xargs -t</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>-x<br>:   当<code>xargs</code>执行的命令长度大于<code>-s max-char</code>时,停止执行</p>\n</li>\n<li><p>-P <em>max-procs</em><br>:   修改线程数,默认为单线程.<code>max-procs</code>为0时,<code>as many processes as possible</code></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-find和xargs\"><a href=\"#3-find和xargs\" class=\"headerlink\" title=\"3. find和xargs\"></a>3. find和xargs</h3><p>　在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。find命令把匹配到的文件 传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一 批，并如此继续下去。</p>\n<p>　在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目 都会根据该命令的选项及系统内核中相应的可调参数来确定。</p>\n<p>　管道是把一个命令的输出传递给另一个命令作为输入，比如：<code>command1 | command2</code>但是command2仅仅把command1输出的内容作为输入参数。<code>find . -name &quot;install.log&quot; -print</code>打印出的是<em>install.log</em>这个字符串，如果仅仅使用管道，那么command2能够使用的仅仅是install.log这个字符串，不能把它当作文件来进行处理。<br>　当然这个command2除了xargs。xargs就是为了能够对find搜索到的文件进行操作而编写的。它能把管道传来的字符串当作文件交给其后的命令执行。</p>\n<p>###4 Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find . -name &quot;1.txt&quot;  | cat</span><br><span class=\"line\">./1.txt</span><br><span class=\"line\">#显示从管道传来的内容，仅仅作为字符串来处理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find . -name &quot;1.txt&quot; | xargs cat</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">#将管道传来的内容作为文件，交给cat执行。也就是说，该命令执行的是如果存在1.txt，那么就打印出这个文件的内容。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find . -perm -7 -print | xargs chmod o-w</span><br><span class=\"line\">#在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -type f -print | xargs file</span><br><span class=\"line\">#查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find ~ -name &apos;*.log&apos; -print0 | xargs -i -0 rm -f &#123;&#125;</span><br><span class=\"line\">#尝试用rm 删除太多的文件，你可能得到一个错误信息：/bin/rm Argument list too long. 用xargs 去避免这个问题</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</span><br><span class=\"line\">#查找所有的jpg 文件，并且压缩它</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ls *.jpg | xargs -n 1 -i cp &#123;&#125; /external-hard-drive/directory</span><br><span class=\"line\">#拷贝所有的图片文件到一个外部的硬盘驱动</span><br></pre></td></tr></table></figure>\n<hr>\n<p>##尾记<br>这里只是最简略的用法,目的是快速理解上手使用.如果遇到问题,请使用<code>man xargs</code>或者拨打<code>10086</code>:)</p>\n<p>特别鸣谢:</p>\n<p><a href=\"http://blog.csdn.net/zhangfn2011/article/details/6776925\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/zhangfn2011/article/details/6776925</a><br><a href=\"http://blog.csdn.net/hittata/article/details/8021500\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/hittata/article/details/8021500</a><br><a href=\"http://www.cnblogs.com/wdpp/archive/2012/02/28/2386683.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/wdpp/archive/2012/02/28/2386683.html</a><br><a href=\"http://blog.163.com/ly_89/blog/static/18690229920117208314257/\" target=\"_blank\" rel=\"external\">http://blog.163.com/ly_89/blog/static/18690229920117208314257/</a><br><a href=\"http://aix.chinaunix.net/doc/2008/03/01/1108340.shtml\" target=\"_blank\" rel=\"external\">http://aix.chinaunix.net/doc/2008/03/01/1108340.shtml</a><br><a href=\"http://blog.chinaunix.net/uid-15117916-id-4920.html\" target=\"_blank\" rel=\"external\">http://blog.chinaunix.net/uid-15117916-id-4920.html</a></p>\n","excerpt":"<p>##前言<br>　最近我从svn上checkout出来了一个文件夹,然后加入了git的跟踪目录.用过svn的同学可能知道,这个文件夹里面每一层级都有个.svn隐藏文件夹,需要删除他们.本来我准备笨拙地一个一个手动删除的,一位同事在我面前敲了大概是<code>$find . -type d -name &quot;*.svn&quot; | xargs rm -rf</code>这样的命令,顿时觉得很高端大气上档次.刚好新学了Markdown,就顺便整理下xargs的用法,练练手.<a href=\"http://czmmiao.iteye.com/blog/1949225\">参考网址</a>,当然更主要的参考来自于伟大的<code>$man xargs</code>.</p>","more":"<hr>\n<h3 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1.概述\"></a>1.概述</h3><p><code>xargs</code>从标准输入(stdin)中读取数据进行处理</p>\n<ul>\n<li>数据以空格进行分隔</li>\n<li>可以根据参数进行一次或多次处理,默认的处理命令是<code>/bin/echo</code></li>\n<li>空行不进行处理,会被忽略</li>\n<li>遇到命令状态为255时,xargs会立刻停止,譬如发生错误时.</li>\n</ul>\n<p>下面我们来看看<code>xargs</code>有哪些参数可以选择.</p>\n<h3 id=\"2-options\"><a href=\"#2-options\" class=\"headerlink\" title=\"2.options\"></a>2.options</h3><ul>\n<li>-a <em>file</em><br>:   从<em>file</em>中读入数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$xargs -a 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-0<br>:   当输入有特殊字符时,将其当作一般字符处理,比如”\\”和空格</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$echo &quot;// &quot; | xargs</span><br><span class=\"line\">//</span><br><span class=\"line\">$echo &quot;// &quot; | xargs -0</span><br><span class=\"line\">//</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-d<br>:   指定分隔符</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt | xargs -d &apos;c&apos;</span><br><span class=\"line\">aaa bbb     ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-E <em>eof-str</em><br>:   指定结束标志为<code>eof-str</code>,<code>xargs</code>处理到这个标志就会停止</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$xargs -E &apos;ddd&apos; -a 1.txt</span><br><span class=\"line\">aaa bbb ccc</span><br><span class=\"line\">$xargs -E &apos;dd&apos; -a 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$cat 1.txt | xargs -E &apos;ddd&apos;</span><br><span class=\"line\">aaa bbb ccc</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-I <em>replace-str</em><br>:   将每行输入输入内容替换为<code>replace-str</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt | xargs -t -I &#123;&#125; echo &#123;&#125; &gt;&gt; 1.txt</span><br><span class=\"line\">echo aaa bbb ccc ddd</span><br><span class=\"line\">echo a b</span><br><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-i<br>:   等同于<code>-I{}</code></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt | xargs -t -i echo &#123;&#125; &gt;&gt; 1.txt</span><br><span class=\"line\">echo aaa bbb ccc ddd</span><br><span class=\"line\">echo a b</span><br><span class=\"line\">$cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">$cat 1.txt |xargs -L 2</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$cat 1.txt |xar -L 1</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>-l<br>:   类似于<code>-L</code>,区别在于<code>-l</code>可以不指定参数,默认为1.</p>\n</li>\n<li><p>-n <em>max-args</em><br>:   每行执行<code>max-args</code>个输入,默认执行所有</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt | xargs -n 2</span><br><span class=\"line\">aaa bbb</span><br><span class=\"line\">ccc ddd</span><br><span class=\"line\">a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-p<br>:   交互模式,执行前询问是否执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt | xargs -p</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b ?...y</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$cat 1.txt | xargs -p</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b ?...n</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-r<br>:   无输入则停止执行,默认至少执行1次</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &quot;&quot;|xargs -t mv</span><br><span class=\"line\">mv</span><br><span class=\"line\">mv: missing file operand</span><br><span class=\"line\">Try `mv --help` for more information.</span><br><span class=\"line\">$ echo &quot;&quot;|xargs -t -r mv    #直接退出</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-s <em>max-chars</em><br>:   <code>xargs</code>每次执行命令的最大长度(含空格)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat 1.txt</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">$ cat 1.txt |xargs -t -s 30</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br><span class=\"line\">#length(/bin/echo aaa bbb ccc ddd a b )=30</span><br><span class=\"line\">$cat 1.txt |xargs -t -s 14</span><br><span class=\"line\">/bin/echo aaa</span><br><span class=\"line\">aaa</span><br><span class=\"line\">/bin/echo bbb</span><br><span class=\"line\">bbb</span><br><span class=\"line\">/bin/echo ccc</span><br><span class=\"line\">ccc</span><br><span class=\"line\">/bin/echo ddd</span><br><span class=\"line\">ddd</span><br><span class=\"line\">/bin/echo a b</span><br><span class=\"line\">a b</span><br><span class=\"line\">#length(/bin/echo aaa )=14</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-t<br>:   先打印执行的命令,然后执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cat 1.txt | xargs -t</span><br><span class=\"line\">/bin/echo aaa bbb ccc ddd a b</span><br><span class=\"line\">aaa bbb ccc ddd a b</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>-x<br>:   当<code>xargs</code>执行的命令长度大于<code>-s max-char</code>时,停止执行</p>\n</li>\n<li><p>-P <em>max-procs</em><br>:   修改线程数,默认为单线程.<code>max-procs</code>为0时,<code>as many processes as possible</code></p>\n</li>\n</ul>\n<hr>\n<h3 id=\"3-find和xargs\"><a href=\"#3-find和xargs\" class=\"headerlink\" title=\"3. find和xargs\"></a>3. find和xargs</h3><p>　在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。find命令把匹配到的文件 传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一 批，并如此继续下去。</p>\n<p>　在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高；而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目 都会根据该命令的选项及系统内核中相应的可调参数来确定。</p>\n<p>　管道是把一个命令的输出传递给另一个命令作为输入，比如：<code>command1 | command2</code>但是command2仅仅把command1输出的内容作为输入参数。<code>find . -name &quot;install.log&quot; -print</code>打印出的是<em>install.log</em>这个字符串，如果仅仅使用管道，那么command2能够使用的仅仅是install.log这个字符串，不能把它当作文件来进行处理。<br>　当然这个command2除了xargs。xargs就是为了能够对find搜索到的文件进行操作而编写的。它能把管道传来的字符串当作文件交给其后的命令执行。</p>\n<p>###4 Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find . -name &quot;1.txt&quot;  | cat</span><br><span class=\"line\">./1.txt</span><br><span class=\"line\">#显示从管道传来的内容，仅仅作为字符串来处理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find . -name &quot;1.txt&quot; | xargs cat</span><br><span class=\"line\">aaa bbb ccc ddd</span><br><span class=\"line\">a b</span><br><span class=\"line\">#将管道传来的内容作为文件，交给cat执行。也就是说，该命令执行的是如果存在1.txt，那么就打印出这个文件的内容。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find . -perm -7 -print | xargs chmod o-w</span><br><span class=\"line\">#在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -type f -print | xargs file</span><br><span class=\"line\">#查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find ~ -name &apos;*.log&apos; -print0 | xargs -i -0 rm -f &#123;&#125;</span><br><span class=\"line\">#尝试用rm 删除太多的文件，你可能得到一个错误信息：/bin/rm Argument list too long. 用xargs 去避免这个问题</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</span><br><span class=\"line\">#查找所有的jpg 文件，并且压缩它</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ls *.jpg | xargs -n 1 -i cp &#123;&#125; /external-hard-drive/directory</span><br><span class=\"line\">#拷贝所有的图片文件到一个外部的硬盘驱动</span><br></pre></td></tr></table></figure>\n<hr>\n<p>##尾记<br>这里只是最简略的用法,目的是快速理解上手使用.如果遇到问题,请使用<code>man xargs</code>或者拨打<code>10086</code>:)</p>\n<p>特别鸣谢:</p>\n<p><a href=\"http://blog.csdn.net/zhangfn2011/article/details/6776925\">http://blog.csdn.net/zhangfn2011/article/details/6776925</a><br><a href=\"http://blog.csdn.net/hittata/article/details/8021500\">http://blog.csdn.net/hittata/article/details/8021500</a><br><a href=\"http://www.cnblogs.com/wdpp/archive/2012/02/28/2386683.html\">http://www.cnblogs.com/wdpp/archive/2012/02/28/2386683.html</a><br><a href=\"http://blog.163.com/ly_89/blog/static/18690229920117208314257/\">http://blog.163.com/ly_89/blog/static/18690229920117208314257/</a><br><a href=\"http://aix.chinaunix.net/doc/2008/03/01/1108340.shtml\">http://aix.chinaunix.net/doc/2008/03/01/1108340.shtml</a><br><a href=\"http://blog.chinaunix.net/uid-15117916-id-4920.html\">http://blog.chinaunix.net/uid-15117916-id-4920.html</a></p>"},{"layout":"post","title":"Openwrt LuCI模块练习详细步骤","comments":1,"analytics":true,"_content":"\n\n## 前言\n又到了成胖子每周一博的时间了.最近在学习openwrt luci方面的知识,为了贯穿整个知识体系,练习题目为:\n\n> 通过页面配置周期性地往/tmp/addtest文件写入内容和时间戳\n\n> 1.在web主页面的下拉菜单做一个按钮,进入设置页面;\n\n> 2.两个设置项:输入的内容和周期;\n\n> 3.读取/tmp/addtest中的内容并显示在页面上;\n\n代码已经[开源](https://github.com/chengyi818/addtest),欢迎交流~\n\n<!--more-->\n\n---\n\n## 知识准备\n\n### 源码编译及ipk生成\n这部分网上相关文章很多,也可以参见[拙作](http://www.cnblogs.com/chengyi818/p/4774043.html)\n\n### LuCI\n首先回答一个问题:什么是Luci?\n\n~~>LuCI是OpenWrt上的Web管理界面，LuCI采用了MVC三层架构，使用Lua脚本开发.~~\n\n>简单地说,Luci就是用来做openwrt的页面的.不同于常见的html+css+javascript,Openwrt是用lua脚本语言开发的.\n\n怎么开发一个页面呢?\n\n>要开发一个新的功能页面,开发者只要根据MVC框架写些简单的lua脚本,剩下的部分由openwrt为你自动完成.\n\n说到MVC框架了,什么是MVC框架呢?\n\n>MVC是model+view+controller的简写.为了便于开发,openwrt将实现不同功能的lua脚本放在不同的文件夹中.请看下图:\n\n![MVC架构](http://i3.tietuku.com/11e2965d6e4c95e4.jpg)\n\n什么是controller控制器?\n\n>我们在这里设置功能在页面的位置,同时设置点击页面后,将要调用的功能.是要去Model模型读写配置数据呢?还是要呈现一个静态页面,或者是直接执行lua脚本函数.\n\n什么是model模型?\n\n>这里我们常用的是,通过cbi模块和UCI(统一配置接口)进行交互.简单地说,就是我们在这里将页面和路由器里面的配置关联起来,从而将页面的设置写到路由器当中.\n\n什么是view视图?\n\n>这个应该是最容易理解的,就是呈现的页面的样式,有点类似于传统的html页面.\n\n上面说到了UCI(Unified Configuartion Interface),这是什么龟?\n\n>openwrt将配置用统一的格式书写,放在规定的地方(/etc/config/),同时提供接口函数进行读取和设置.\n\n如果还不太明白,接着向下看.如果有可能跟着我动动手,相信你很快就会掌握:)\n\n---\n\n## 正文\n我们先看下最终效果图:\n\n![最终效果](http://i3.tietuku.com/cf83e41dbd8859bf.jpg)\n\n我们在页面上面的`System`下拉框的下面加了一个`AddTest`按钮,下面有两个子选项:`Set`和`Info`.其中`Set`用于选择是否开启功能,设置时间间隔和内容.`Info`用于显示`/tmp/addtest`文件中的内容.\n\n### 准备工作\n首先,嗯~\n你得有环境,得有电,有源码,编译过简单的ipk.如果没有,请[回炉](http://www.cnblogs.com/chengyi818/p/4774043.html)重造.\n\n其次,建立相应的文件夹及文件.至于linux操作神马的,我相信你一定没有问题.\n\n```\n$mkdir -p ~/temp/addtest\n$cd ~/temp/addtest\n```\n\n最终文件树形图\n\n![树形图](http://i3.tietuku.com/e0e8a0b049ed0f45.jpg)\n\n骨架已经有了,下面只需要往里面填肉了,是不是感觉很快~\n不要管为什么要这样,我们后面慢慢解释.\n\n---\n\n### controller\n前面我们提到,controller主要用于控制页面按钮位置,以及调用的功能.首先来编辑这个文件.\n\n```\n$vim ~/temp/addtest/files/usr/lib/lua/luci/controller/addtest.lua\n```\n\n代码如下:\n\n```\nmodule(\"luci.controller.addtest\",package.seeall)\n\nfunction index()\n    entry({\"admin\",\"system\",\"addtest\"},alias(\"admin\",\"system\",\"addtest\",\"set\"),_(\"AddTest\"),99).index=true\n    entry({\"admin\",\"system\",\"addtest\",\"set\"},cbi(\"addtest\"),_(\"Set\"),1)\n    entry({\"admin\",\"system\",\"addtest\",\"info\"},call(\"action_info\"),_(\"Info\"),2)\nend\n\nfunction action_info()\n    if not nixio.fs.access(\"/tmp/addtest\") then\n        return\n    end\n\n    local info = nixio.fs.readfile(\"/tmp/addtest\")\n    luci.template.render(\"addtest_info\",{info=info})\nend\n```\n\n格式模板:\n\n```\nmodule(\"luci.controller.控制器名\", package.seeall)\n\nfunction index()\n        entry(路径, 调用目标, _(\"显示名称\"), 显示顺序)\n        end\n```\n\n这个脚本文件可以分为3块:第1行,3~7行,9~16行\n\n第1行\n\n> 说明了模块的名称,本文在controller目录下创建了`addtest.lua`文件,将模板中的控制器名替换为`addtest`即可.\n\n第3行\n\n>  第3~7行定义按钮的位置,调用的功能,显示名称.其中第3行和第7行是固定的模板格式,不需要修改\n\n第4行\n\n>   entry表示添加新的模块.\n第一个参数`{\"admin\",\"system\",\"addtest\"}`表示按钮的位置.`admin`表示我们这个功能只有以管理员身份登录页面才可以看到.`system`表示一级菜单名,`addtest`则是一级菜单下的子菜单.第二个参数`alias(\"admin\",\"system\",\"addtest\",\"set\")`表示调用的功能.这个按钮没有独立的功能,而是将它关联到它的下一级子菜单`set`.\n第三个参数`_(\"AddTest\")`表示显示名称,可选.如果页面按钮想做成中文,可以在这里设置.\n第四个参数`99`表示显示顺序的优先级,Luci根据这个值为同一父菜单的所有子菜单排序.\n\n第5行\n\n> 第一个参数`{\"admin\",\"system\",\"addtest\",\"set\"}`表示在`addtest`下再增加一个子选项`set`.\n第二个参数`cbi(\"addtest\")`表示调用cbi模块,这里将会调用到`/usr/lib/lua/luci/model/cbi/addtest.lua`\n\n第6行\n\n> 第二个参数`call(\"action_info\")`表示执行指定方法,这里将会调用我们下面写的`acttion_info`函数.\n\n备注\n:   关于`entry`第二个参数调用目标.我们还有一个`template`没有涉及,它表示访问指定页面.比如`template(addtest_info)`将会直接访问`/usr/lib/lua/luci/view/addtest_info.htm`.\n\n9~16行\n\n>  这里使用lua语言调用`nixio`接口写了一个简单的函数,首先判断文件是否存在,然后读取其中的内容赋值给变量`info`,最后访问指定页面`/usr/lib/lua/luci/view/addtest_info.htm`,同时将变量`info`传递过去.\n[luci接口手册](http://luci.subsignal.org/api/luci/)\n[nixio接口手册](http://luci.subsignal.org/api/nixio/)\n\n---\n\n### UCI\nUCI是openwrt的配置管理机制,它将配置统一放到`/etc/config`文件夹下.详细地介绍请参考[这里](http://www.leiphone.com/news/201406/diy-a-smart-router-topic-system-configuration.html).\n下面来编辑这个文件\n\n```\n$vim ~/temp/addtest/files/etc/config/addtest\n```\n\n代码如下:\n\n```\nconfig arguments\n    option interval ''\n    option content ''\n```\n\nSection开始语法: `config '类型' '名字'`\n参数定义语法: `option '键' '值'`\n列表定义语法: `list '集合名字' '值'`\n\n简单解释下,我们在`/etc/config`下新建一个名为`addtest`的配置文件,其中类型为`arguments`,名字省略.有两个键,一个名为`interval`用来存时间间隔.一个名为`content`用来存准备周期性输入的内容.\n\n---\n\n### Model\n在**controller**章节中,我们提到`cbi`会调用到`model`文件夹中的`addtest.lua`文件.下面我们来编辑它.\n\n```\n$vim ~/temp/addtest/files/usr/lib/lua/luci/model/cbi/addtest.lua\n```\n\n代码如下:\n\n```\nm=Map(\"addtest\",translate(\"Luci practice\"),translate(\"fat cheng's test\"))\n\ns=m:section(TypedSection,\"arguments\",\"\")\ns.addremove=true\ns.anonymous=false\n\ns:option(Flag,\"enable\",translate(\"Enable\"))\ns:option(Value,\"interval\",translate(\"Interval\"))\ns:option(Value,\"content\",translate(\"Content\"))\n\nlocal apply=luci.http.formvalue(\"cbi.apply\")\nif apply then\n    io.popen(\"/etc/init.d/addtestd restart\")\nend\n\nreturn m\n```\n\n下面我们来解释下这个文件.\n\n第1行\n\n>   模板`m = Map(\"配置文件文件名\", \"配置页面标题\", \"配置页面说明\")`   \n第一个参数:上一步我们新建配置文件`/etc/config/addtest`.这里就是建立与配置文件的联系.\n第二,三两个参数,则是页面的主标题和副标题.还不清楚的话,翻上去看看最终效果图,看看它们在哪里.\n\n第3行\n\n>   在一个配置文件中可能有很多Section,所以我们需要创建与配置文件中我们想要的Section的联系.\n有两种方式可以选择:NamedSection(name,type,title,description)和TypedSection(type,title,description),前者根据配置文件中的Section名，而后者根据配置文件中的Section类型.我们选用了第二种.\n\n第4行\n\n>   设定不允许增加或删除Section\n\n第5行\n\n>   设定显示Section的名称,这里建议你可以试试设定为`true`,看看会发生什么.\n\n7~9行\n\n>   接着则是建立与Section中的option之间的联系.模板`s:option(交互形式,option键值,显示名称)`.\n第一个参数:常见的交互形式有Value(文本框),ListValue(下拉框),Flag(选择框).,不知道为啥我打不开[官方文档](http://luci.subsignal.org/trac/wiki/Documentation/CBI),这里也可以[参考](http://blog.csdn.net/qq_21949217/article/details/44151595)\n第二个参数表示在配置文件中的option的键值\n第三个参数表示,你希望在页面上呈现的名称.\n创建后开发者无需考虑读取以及写入配置文件的问题，系统会自动处理.\n\n11~14行\n\n>   系统会为我们在页面上自动创建一些按钮`Save&Apply`,`Save`,`Reset`.我们仅仅将配置写入`/etc/config`下对应的文件是不够的,我们还希望可以根据这个配置进行一些操作.\n这部分代码的作用是,当你按下页面的`apply`按钮后,相当于在串口shell下输入`/etc/init.d/addtestd restart`\n\n---\n\n### init.d\n上一节我们已经可以读写配置了,怎么根据配置来进行操作呢?这是我们这一节要谈的.我们来编辑`~/temp/addtest/files/etc/init.d/addtestd`这个文件.\n代码如下:\n\n```\n#!/bin/sh /etc/rc.common\nSTART=50\n\nrun_addtest()\n{\n    local enable\n    config_get_bool enable $1 enable\n\n    if [ $enable ]; then\n        local interval\n        local content\n        config_get interval $1 interval\n        config_get content $1 content\n\n        addtest $interval $content           \n    fi\n}\n\nstart()\n{\n    config_load addtest\n    config_foreach run_addtest arguments\n}\n\nstop()\n{\n    result=`pidof addtest`\n    kill -9 $result\n    echo \"addtest has stoped\"\n}\n```\n\n第1行\n\n>   Linux 系统根据 \"#!\" 及该字串后面的信息确定该文件的类型,表示这个文件需要由/bin/sh和/etc/rc.common来解释执行.\n\n第2行\n\n>   表示启动的优先级,这里暂时用不到\n\n4~17行\n\n>   是一个函数,主要作用是读取`/etc/config/addtest`中的内容,然后根据是否打开开关在第15行将配置传递给可执行文件`addtest`,由它根据配置执行指定的操作.\n读取配置的方法,我强烈推荐你阅读[官方文档](http://wiki.openwrt.org/doc/devel/config-scripting),精炼而简洁.\n获取布尔值类型:`config_get_bool 变量名 Section名 Section参数名`\n获取变量值:`config_get 变量名 Section名 Section参数名`\n\n19~23行\n\n>   对应于`/etc/init.d/addtestd start`.首先使用`config_load 配置文件名`的方法载入配置文件,然后使用`config_foreach 遍历函数名 Section类型`的方法,遍历配置文件中的Section.\n\n25~30行\n\n>   对应于`/etc/init.d/addtestd stop`.找到`addtest`这个进程的进程号,然后杀死它\n\n备注\n:   前一节提到的`/etc/init.d/addtestd restart`中的`restart`命令,在`/etc/rc.common`进行了定义,简单来讲就是先执行了`stop`命令,再执行`start`命令.\n最后务必执行**`$sudo chmod 755 ~/temp/addtest/files/etc/init.d/addtestd`**.\n\n---\n\n### src\n前一节,我们谈到`run_addtest`调用可执行文件`addtest`,现在我们编辑这部分内容\n\n```\n$vim ~/temp/addtest/files/src/addtest.c\n```\n\n代码如下:\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n    int index;\n    for(index=0; index<10; index++)\n    {\n        FILE *fp=fopen(\"/tmp/addtest\",\"at\");\n        system(\"date >> /tmp/addtest\");\n        fprintf(fp, \"%s\\n\", argv[2]);\n        fclose(fp);\n        printf(\"interval=%d\\n\",atoi(argv[1]));\n        sleep(  atoi(argv[1]) );\n    }\n    return 0;\n}\n```\n\n这部分代码比较简短,我们不再解释.需要掌握的点有:\n\n> 1.`argc`和`argv[]`的使用方法\n\n> 2.`fopen`函数,`fclose`函数以及`fprintf`函数的使用方法\n\n> 3.`system`函数的使用方法\n\n> 4.`sleep`函数和`atoi`函数的使用方法,`argv[1]`的类型为`char`需要转换为整型.\n\n通过这个可执行文件,我们周期性地将时间戳和内容写入了`/tmp/addtest`文件.\n最后我们写一个简单的Makefile:\n\n```\n$vim $vim ~/temp/addtest/files/src/Makefile\n```\n\n代码如下:\n\n```\naddtest : addtest.o\n\t$(CC) addtest.o -o addtest\n\naddtest.o : addtest.c\n\t$(CC) -c addtest.c\n\nclean :\n\trm *.o addtest\n```\n\n---\n\n### View\n上一节,我们已经根据配置将指定的内容周期性地写入了`/tmp/addtest`.在**controller**那一节,我们的函数`action_info`读取了`/tmp/addtest`中的内容并访问指定页面`/usr/lib/lua/luci/view/addtest_info.htm`,同时将读取的内容通过变量`info`传递过去.\n\n下面我们来编辑这个页面,\n`$vim ~/temp/addtest/files/usr/lib/lua/luci/view/addtest_info.htm`\n代码如下:\n\n```\n<%+header%>\n<h2><a id=\"content\" name=\"content\"><%:Addtest Info%></a></h2>\n<div id=\"content_addtest_info\">\n<textarea readonly=\"readonly\" wrap=\"off\" rows=\"<%=info:cmatch(\"\\n\")+2%>\" id=\"info\"><%=info:pcdata()%></textarea>\n</div>\n<%+footer%>\n```\n\n这部分和传统的`html`很类似,我主要是根据其他页面照猫画虎,不是很美观.有机会还要加强这个方面的学习.\n\n---\n\n### Makefile\n不知不觉,我们居然已经将代码全部写完了,竟还有点恋恋不舍呢.下面我们用一个`Makefie`文件将它们打包生成一个ipk文件.\n\n```\n$vim ~/temp/addtest/Makefile\n```\n\n代码如下:\n\n```\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=addtest\nPKG_VERSION=1.0\nPKG_RELEASE:=1\n\nPKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/addtest\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tTITLE:=Addtest--print something to /var/addtest\nendef\n\ndefine Package/addtest/description\n\tIt's a test,print something to /var/addtest cyclicaliy\nendef\n\ndefine Build/Prepare\n\tmkdir -p $(PKG_BUILD_DIR)\n\t$(CP) ./src/* $(PKG_BUILD_DIR)/\nendef\n\ndefine Package/addtest/postinst\n#!/bin/sh\nrm -rf /tmp/luci*\nendef\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\n\t$(call Build/Compile/Default)\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(CP) ./files/* $(1)/\n\t$(INSTALL_DIR) $(1)/bin\n\t$(INSTALL_BIN)  $(PKG_BUILD_DIR)/addtest  $(1)/bin\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n```\n\nMakefile的解释,请参见[拙作](http://www.cnblogs.com/chengyi818/p/4774043.html).我们这里稍作补充.\n\n26~29行\n\n>   由于luci会将模块加载到`/tmp`目录下运行,每次新加载luci模块后,需要执行`$rm -rf /tmp/luci*`.这里表示安装了ipk之后,将会自动执行删除命令,重新载入.\n\n39行\n\n>   $(1)是传入的参数,表示系统镜像目录,你可以将之视为路由器最后的文件系统.所以这句的意思就是将我们`files`下的内容拷贝到路由器的文件系统中.这也是我们为什么要建立一开始那么复杂的目录树的原因.\n\n---\n\n### 编译&安装\n简直像裹脚布一样,又臭又长.不要说读了,我自己写的都快有点受不了了.读到这里的人真是辛苦了,下面到了我们收获果实的时候了.\n将文件拷贝到源码目录的`package`目录下.其余部分,请参考[拙作](http://www.cnblogs.com/chengyi818/p/4774043.html)\n\n```\n$cp ~/temp/addtest ~/openwrt/package\n```\n\n把它拷贝到你的开发板中,试试看.\n\n---\n\n### 调试方法\n我们当然希望可以一次成功,不过世间不如意之事十之八九.我来谈谈我自己的调试方法.\n\n`src`部分\n\n>   `src`文件下有`Makefile`文件,你可以直接在编译机上执行`$make`生成可执行文件`addtest`,然后在编译机上`src`目录下执行`$./addtest 参数1 参数2`.最后记得执行`$make clean`.\n\n`luci`部分\n\n>   将ipk安装到开发板后,可以通过串口或者ssh的方式登录开发板,然后直接在开发板中修改文件内容,再执行`$rm -rf /tmp/luci*`.最后重新载入设备页面.\n\n---\n\n## 尾记\n不知不觉到了分手的时候,竟感觉有些忧桑呢.\n\n### 不足\n1. 我自己刚接触学习,难免很多不足\n2. 页面输入没有防呆机制\n\n多多包含:)\n\n### 感谢\n除了官方文档之外,这两篇博客给我很多指导:\n[开发OpenWrt路由器上LuCI的模块](http://www.tuicool.com/articles/zaUNfy),[ openwrt中luci学习笔记](http://blog.chinaunix.net/uid-23780428-id-4367351.html).\n我的同事宁财神给我们做了luci的框架介绍,同时在我的调试过程中,给予我很多帮助.\n最后感谢管工给出这样一个练习题,虽然很小巧,居然可以贯通整个知识体系.我现在还是为他的高屋建瓴感到惊叹.\n\n### Q&A\n在整篇文章学习完成后,我们希望可以回答以下几个问题:\n\n> 1.MVC是什么?各部分有哪些功能?\n\n> 2.怎么在页面上指定位置做出一个子页面.\n\n> 3.怎么将配置写入到路由器中,又怎么读取?\n\n> 4.页面怎么和可执行文件关联起来?或者通俗地说,页面点了一下,开发板怎么就执行了命令.\n\n> 5.ipk怎么生成,安装过程中发生了什么?\n","source":"_posts/2015-09-02-Openwrt_LuCI模块练习详细步骤.md","raw":"---\nlayout: post\ntitle: Openwrt LuCI模块练习详细步骤\ncategory: openwrt\ntags: [openwrt,深度]\ncomments: true\nanalytics: true\n---\n\n\n## 前言\n又到了成胖子每周一博的时间了.最近在学习openwrt luci方面的知识,为了贯穿整个知识体系,练习题目为:\n\n> 通过页面配置周期性地往/tmp/addtest文件写入内容和时间戳\n\n> 1.在web主页面的下拉菜单做一个按钮,进入设置页面;\n\n> 2.两个设置项:输入的内容和周期;\n\n> 3.读取/tmp/addtest中的内容并显示在页面上;\n\n代码已经[开源](https://github.com/chengyi818/addtest),欢迎交流~\n\n<!--more-->\n\n---\n\n## 知识准备\n\n### 源码编译及ipk生成\n这部分网上相关文章很多,也可以参见[拙作](http://www.cnblogs.com/chengyi818/p/4774043.html)\n\n### LuCI\n首先回答一个问题:什么是Luci?\n\n~~>LuCI是OpenWrt上的Web管理界面，LuCI采用了MVC三层架构，使用Lua脚本开发.~~\n\n>简单地说,Luci就是用来做openwrt的页面的.不同于常见的html+css+javascript,Openwrt是用lua脚本语言开发的.\n\n怎么开发一个页面呢?\n\n>要开发一个新的功能页面,开发者只要根据MVC框架写些简单的lua脚本,剩下的部分由openwrt为你自动完成.\n\n说到MVC框架了,什么是MVC框架呢?\n\n>MVC是model+view+controller的简写.为了便于开发,openwrt将实现不同功能的lua脚本放在不同的文件夹中.请看下图:\n\n![MVC架构](http://i3.tietuku.com/11e2965d6e4c95e4.jpg)\n\n什么是controller控制器?\n\n>我们在这里设置功能在页面的位置,同时设置点击页面后,将要调用的功能.是要去Model模型读写配置数据呢?还是要呈现一个静态页面,或者是直接执行lua脚本函数.\n\n什么是model模型?\n\n>这里我们常用的是,通过cbi模块和UCI(统一配置接口)进行交互.简单地说,就是我们在这里将页面和路由器里面的配置关联起来,从而将页面的设置写到路由器当中.\n\n什么是view视图?\n\n>这个应该是最容易理解的,就是呈现的页面的样式,有点类似于传统的html页面.\n\n上面说到了UCI(Unified Configuartion Interface),这是什么龟?\n\n>openwrt将配置用统一的格式书写,放在规定的地方(/etc/config/),同时提供接口函数进行读取和设置.\n\n如果还不太明白,接着向下看.如果有可能跟着我动动手,相信你很快就会掌握:)\n\n---\n\n## 正文\n我们先看下最终效果图:\n\n![最终效果](http://i3.tietuku.com/cf83e41dbd8859bf.jpg)\n\n我们在页面上面的`System`下拉框的下面加了一个`AddTest`按钮,下面有两个子选项:`Set`和`Info`.其中`Set`用于选择是否开启功能,设置时间间隔和内容.`Info`用于显示`/tmp/addtest`文件中的内容.\n\n### 准备工作\n首先,嗯~\n你得有环境,得有电,有源码,编译过简单的ipk.如果没有,请[回炉](http://www.cnblogs.com/chengyi818/p/4774043.html)重造.\n\n其次,建立相应的文件夹及文件.至于linux操作神马的,我相信你一定没有问题.\n\n```\n$mkdir -p ~/temp/addtest\n$cd ~/temp/addtest\n```\n\n最终文件树形图\n\n![树形图](http://i3.tietuku.com/e0e8a0b049ed0f45.jpg)\n\n骨架已经有了,下面只需要往里面填肉了,是不是感觉很快~\n不要管为什么要这样,我们后面慢慢解释.\n\n---\n\n### controller\n前面我们提到,controller主要用于控制页面按钮位置,以及调用的功能.首先来编辑这个文件.\n\n```\n$vim ~/temp/addtest/files/usr/lib/lua/luci/controller/addtest.lua\n```\n\n代码如下:\n\n```\nmodule(\"luci.controller.addtest\",package.seeall)\n\nfunction index()\n    entry({\"admin\",\"system\",\"addtest\"},alias(\"admin\",\"system\",\"addtest\",\"set\"),_(\"AddTest\"),99).index=true\n    entry({\"admin\",\"system\",\"addtest\",\"set\"},cbi(\"addtest\"),_(\"Set\"),1)\n    entry({\"admin\",\"system\",\"addtest\",\"info\"},call(\"action_info\"),_(\"Info\"),2)\nend\n\nfunction action_info()\n    if not nixio.fs.access(\"/tmp/addtest\") then\n        return\n    end\n\n    local info = nixio.fs.readfile(\"/tmp/addtest\")\n    luci.template.render(\"addtest_info\",{info=info})\nend\n```\n\n格式模板:\n\n```\nmodule(\"luci.controller.控制器名\", package.seeall)\n\nfunction index()\n        entry(路径, 调用目标, _(\"显示名称\"), 显示顺序)\n        end\n```\n\n这个脚本文件可以分为3块:第1行,3~7行,9~16行\n\n第1行\n\n> 说明了模块的名称,本文在controller目录下创建了`addtest.lua`文件,将模板中的控制器名替换为`addtest`即可.\n\n第3行\n\n>  第3~7行定义按钮的位置,调用的功能,显示名称.其中第3行和第7行是固定的模板格式,不需要修改\n\n第4行\n\n>   entry表示添加新的模块.\n第一个参数`{\"admin\",\"system\",\"addtest\"}`表示按钮的位置.`admin`表示我们这个功能只有以管理员身份登录页面才可以看到.`system`表示一级菜单名,`addtest`则是一级菜单下的子菜单.第二个参数`alias(\"admin\",\"system\",\"addtest\",\"set\")`表示调用的功能.这个按钮没有独立的功能,而是将它关联到它的下一级子菜单`set`.\n第三个参数`_(\"AddTest\")`表示显示名称,可选.如果页面按钮想做成中文,可以在这里设置.\n第四个参数`99`表示显示顺序的优先级,Luci根据这个值为同一父菜单的所有子菜单排序.\n\n第5行\n\n> 第一个参数`{\"admin\",\"system\",\"addtest\",\"set\"}`表示在`addtest`下再增加一个子选项`set`.\n第二个参数`cbi(\"addtest\")`表示调用cbi模块,这里将会调用到`/usr/lib/lua/luci/model/cbi/addtest.lua`\n\n第6行\n\n> 第二个参数`call(\"action_info\")`表示执行指定方法,这里将会调用我们下面写的`acttion_info`函数.\n\n备注\n:   关于`entry`第二个参数调用目标.我们还有一个`template`没有涉及,它表示访问指定页面.比如`template(addtest_info)`将会直接访问`/usr/lib/lua/luci/view/addtest_info.htm`.\n\n9~16行\n\n>  这里使用lua语言调用`nixio`接口写了一个简单的函数,首先判断文件是否存在,然后读取其中的内容赋值给变量`info`,最后访问指定页面`/usr/lib/lua/luci/view/addtest_info.htm`,同时将变量`info`传递过去.\n[luci接口手册](http://luci.subsignal.org/api/luci/)\n[nixio接口手册](http://luci.subsignal.org/api/nixio/)\n\n---\n\n### UCI\nUCI是openwrt的配置管理机制,它将配置统一放到`/etc/config`文件夹下.详细地介绍请参考[这里](http://www.leiphone.com/news/201406/diy-a-smart-router-topic-system-configuration.html).\n下面来编辑这个文件\n\n```\n$vim ~/temp/addtest/files/etc/config/addtest\n```\n\n代码如下:\n\n```\nconfig arguments\n    option interval ''\n    option content ''\n```\n\nSection开始语法: `config '类型' '名字'`\n参数定义语法: `option '键' '值'`\n列表定义语法: `list '集合名字' '值'`\n\n简单解释下,我们在`/etc/config`下新建一个名为`addtest`的配置文件,其中类型为`arguments`,名字省略.有两个键,一个名为`interval`用来存时间间隔.一个名为`content`用来存准备周期性输入的内容.\n\n---\n\n### Model\n在**controller**章节中,我们提到`cbi`会调用到`model`文件夹中的`addtest.lua`文件.下面我们来编辑它.\n\n```\n$vim ~/temp/addtest/files/usr/lib/lua/luci/model/cbi/addtest.lua\n```\n\n代码如下:\n\n```\nm=Map(\"addtest\",translate(\"Luci practice\"),translate(\"fat cheng's test\"))\n\ns=m:section(TypedSection,\"arguments\",\"\")\ns.addremove=true\ns.anonymous=false\n\ns:option(Flag,\"enable\",translate(\"Enable\"))\ns:option(Value,\"interval\",translate(\"Interval\"))\ns:option(Value,\"content\",translate(\"Content\"))\n\nlocal apply=luci.http.formvalue(\"cbi.apply\")\nif apply then\n    io.popen(\"/etc/init.d/addtestd restart\")\nend\n\nreturn m\n```\n\n下面我们来解释下这个文件.\n\n第1行\n\n>   模板`m = Map(\"配置文件文件名\", \"配置页面标题\", \"配置页面说明\")`   \n第一个参数:上一步我们新建配置文件`/etc/config/addtest`.这里就是建立与配置文件的联系.\n第二,三两个参数,则是页面的主标题和副标题.还不清楚的话,翻上去看看最终效果图,看看它们在哪里.\n\n第3行\n\n>   在一个配置文件中可能有很多Section,所以我们需要创建与配置文件中我们想要的Section的联系.\n有两种方式可以选择:NamedSection(name,type,title,description)和TypedSection(type,title,description),前者根据配置文件中的Section名，而后者根据配置文件中的Section类型.我们选用了第二种.\n\n第4行\n\n>   设定不允许增加或删除Section\n\n第5行\n\n>   设定显示Section的名称,这里建议你可以试试设定为`true`,看看会发生什么.\n\n7~9行\n\n>   接着则是建立与Section中的option之间的联系.模板`s:option(交互形式,option键值,显示名称)`.\n第一个参数:常见的交互形式有Value(文本框),ListValue(下拉框),Flag(选择框).,不知道为啥我打不开[官方文档](http://luci.subsignal.org/trac/wiki/Documentation/CBI),这里也可以[参考](http://blog.csdn.net/qq_21949217/article/details/44151595)\n第二个参数表示在配置文件中的option的键值\n第三个参数表示,你希望在页面上呈现的名称.\n创建后开发者无需考虑读取以及写入配置文件的问题，系统会自动处理.\n\n11~14行\n\n>   系统会为我们在页面上自动创建一些按钮`Save&Apply`,`Save`,`Reset`.我们仅仅将配置写入`/etc/config`下对应的文件是不够的,我们还希望可以根据这个配置进行一些操作.\n这部分代码的作用是,当你按下页面的`apply`按钮后,相当于在串口shell下输入`/etc/init.d/addtestd restart`\n\n---\n\n### init.d\n上一节我们已经可以读写配置了,怎么根据配置来进行操作呢?这是我们这一节要谈的.我们来编辑`~/temp/addtest/files/etc/init.d/addtestd`这个文件.\n代码如下:\n\n```\n#!/bin/sh /etc/rc.common\nSTART=50\n\nrun_addtest()\n{\n    local enable\n    config_get_bool enable $1 enable\n\n    if [ $enable ]; then\n        local interval\n        local content\n        config_get interval $1 interval\n        config_get content $1 content\n\n        addtest $interval $content           \n    fi\n}\n\nstart()\n{\n    config_load addtest\n    config_foreach run_addtest arguments\n}\n\nstop()\n{\n    result=`pidof addtest`\n    kill -9 $result\n    echo \"addtest has stoped\"\n}\n```\n\n第1行\n\n>   Linux 系统根据 \"#!\" 及该字串后面的信息确定该文件的类型,表示这个文件需要由/bin/sh和/etc/rc.common来解释执行.\n\n第2行\n\n>   表示启动的优先级,这里暂时用不到\n\n4~17行\n\n>   是一个函数,主要作用是读取`/etc/config/addtest`中的内容,然后根据是否打开开关在第15行将配置传递给可执行文件`addtest`,由它根据配置执行指定的操作.\n读取配置的方法,我强烈推荐你阅读[官方文档](http://wiki.openwrt.org/doc/devel/config-scripting),精炼而简洁.\n获取布尔值类型:`config_get_bool 变量名 Section名 Section参数名`\n获取变量值:`config_get 变量名 Section名 Section参数名`\n\n19~23行\n\n>   对应于`/etc/init.d/addtestd start`.首先使用`config_load 配置文件名`的方法载入配置文件,然后使用`config_foreach 遍历函数名 Section类型`的方法,遍历配置文件中的Section.\n\n25~30行\n\n>   对应于`/etc/init.d/addtestd stop`.找到`addtest`这个进程的进程号,然后杀死它\n\n备注\n:   前一节提到的`/etc/init.d/addtestd restart`中的`restart`命令,在`/etc/rc.common`进行了定义,简单来讲就是先执行了`stop`命令,再执行`start`命令.\n最后务必执行**`$sudo chmod 755 ~/temp/addtest/files/etc/init.d/addtestd`**.\n\n---\n\n### src\n前一节,我们谈到`run_addtest`调用可执行文件`addtest`,现在我们编辑这部分内容\n\n```\n$vim ~/temp/addtest/files/src/addtest.c\n```\n\n代码如下:\n\n```\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[])\n{\n    int index;\n    for(index=0; index<10; index++)\n    {\n        FILE *fp=fopen(\"/tmp/addtest\",\"at\");\n        system(\"date >> /tmp/addtest\");\n        fprintf(fp, \"%s\\n\", argv[2]);\n        fclose(fp);\n        printf(\"interval=%d\\n\",atoi(argv[1]));\n        sleep(  atoi(argv[1]) );\n    }\n    return 0;\n}\n```\n\n这部分代码比较简短,我们不再解释.需要掌握的点有:\n\n> 1.`argc`和`argv[]`的使用方法\n\n> 2.`fopen`函数,`fclose`函数以及`fprintf`函数的使用方法\n\n> 3.`system`函数的使用方法\n\n> 4.`sleep`函数和`atoi`函数的使用方法,`argv[1]`的类型为`char`需要转换为整型.\n\n通过这个可执行文件,我们周期性地将时间戳和内容写入了`/tmp/addtest`文件.\n最后我们写一个简单的Makefile:\n\n```\n$vim $vim ~/temp/addtest/files/src/Makefile\n```\n\n代码如下:\n\n```\naddtest : addtest.o\n\t$(CC) addtest.o -o addtest\n\naddtest.o : addtest.c\n\t$(CC) -c addtest.c\n\nclean :\n\trm *.o addtest\n```\n\n---\n\n### View\n上一节,我们已经根据配置将指定的内容周期性地写入了`/tmp/addtest`.在**controller**那一节,我们的函数`action_info`读取了`/tmp/addtest`中的内容并访问指定页面`/usr/lib/lua/luci/view/addtest_info.htm`,同时将读取的内容通过变量`info`传递过去.\n\n下面我们来编辑这个页面,\n`$vim ~/temp/addtest/files/usr/lib/lua/luci/view/addtest_info.htm`\n代码如下:\n\n```\n<%+header%>\n<h2><a id=\"content\" name=\"content\"><%:Addtest Info%></a></h2>\n<div id=\"content_addtest_info\">\n<textarea readonly=\"readonly\" wrap=\"off\" rows=\"<%=info:cmatch(\"\\n\")+2%>\" id=\"info\"><%=info:pcdata()%></textarea>\n</div>\n<%+footer%>\n```\n\n这部分和传统的`html`很类似,我主要是根据其他页面照猫画虎,不是很美观.有机会还要加强这个方面的学习.\n\n---\n\n### Makefile\n不知不觉,我们居然已经将代码全部写完了,竟还有点恋恋不舍呢.下面我们用一个`Makefie`文件将它们打包生成一个ipk文件.\n\n```\n$vim ~/temp/addtest/Makefile\n```\n\n代码如下:\n\n```\ninclude $(TOPDIR)/rules.mk\n\nPKG_NAME:=addtest\nPKG_VERSION=1.0\nPKG_RELEASE:=1\n\nPKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)\n\ninclude $(INCLUDE_DIR)/package.mk\n\ndefine Package/addtest\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tTITLE:=Addtest--print something to /var/addtest\nendef\n\ndefine Package/addtest/description\n\tIt's a test,print something to /var/addtest cyclicaliy\nendef\n\ndefine Build/Prepare\n\tmkdir -p $(PKG_BUILD_DIR)\n\t$(CP) ./src/* $(PKG_BUILD_DIR)/\nendef\n\ndefine Package/addtest/postinst\n#!/bin/sh\nrm -rf /tmp/luci*\nendef\n\ndefine Build/Configure\nendef\n\ndefine Build/Compile\n\t$(call Build/Compile/Default)\nendef\n\ndefine Package/$(PKG_NAME)/install\n\t$(CP) ./files/* $(1)/\n\t$(INSTALL_DIR) $(1)/bin\n\t$(INSTALL_BIN)  $(PKG_BUILD_DIR)/addtest  $(1)/bin\nendef\n\n$(eval $(call BuildPackage,$(PKG_NAME)))\n```\n\nMakefile的解释,请参见[拙作](http://www.cnblogs.com/chengyi818/p/4774043.html).我们这里稍作补充.\n\n26~29行\n\n>   由于luci会将模块加载到`/tmp`目录下运行,每次新加载luci模块后,需要执行`$rm -rf /tmp/luci*`.这里表示安装了ipk之后,将会自动执行删除命令,重新载入.\n\n39行\n\n>   $(1)是传入的参数,表示系统镜像目录,你可以将之视为路由器最后的文件系统.所以这句的意思就是将我们`files`下的内容拷贝到路由器的文件系统中.这也是我们为什么要建立一开始那么复杂的目录树的原因.\n\n---\n\n### 编译&安装\n简直像裹脚布一样,又臭又长.不要说读了,我自己写的都快有点受不了了.读到这里的人真是辛苦了,下面到了我们收获果实的时候了.\n将文件拷贝到源码目录的`package`目录下.其余部分,请参考[拙作](http://www.cnblogs.com/chengyi818/p/4774043.html)\n\n```\n$cp ~/temp/addtest ~/openwrt/package\n```\n\n把它拷贝到你的开发板中,试试看.\n\n---\n\n### 调试方法\n我们当然希望可以一次成功,不过世间不如意之事十之八九.我来谈谈我自己的调试方法.\n\n`src`部分\n\n>   `src`文件下有`Makefile`文件,你可以直接在编译机上执行`$make`生成可执行文件`addtest`,然后在编译机上`src`目录下执行`$./addtest 参数1 参数2`.最后记得执行`$make clean`.\n\n`luci`部分\n\n>   将ipk安装到开发板后,可以通过串口或者ssh的方式登录开发板,然后直接在开发板中修改文件内容,再执行`$rm -rf /tmp/luci*`.最后重新载入设备页面.\n\n---\n\n## 尾记\n不知不觉到了分手的时候,竟感觉有些忧桑呢.\n\n### 不足\n1. 我自己刚接触学习,难免很多不足\n2. 页面输入没有防呆机制\n\n多多包含:)\n\n### 感谢\n除了官方文档之外,这两篇博客给我很多指导:\n[开发OpenWrt路由器上LuCI的模块](http://www.tuicool.com/articles/zaUNfy),[ openwrt中luci学习笔记](http://blog.chinaunix.net/uid-23780428-id-4367351.html).\n我的同事宁财神给我们做了luci的框架介绍,同时在我的调试过程中,给予我很多帮助.\n最后感谢管工给出这样一个练习题,虽然很小巧,居然可以贯通整个知识体系.我现在还是为他的高屋建瓴感到惊叹.\n\n### Q&A\n在整篇文章学习完成后,我们希望可以回答以下几个问题:\n\n> 1.MVC是什么?各部分有哪些功能?\n\n> 2.怎么在页面上指定位置做出一个子页面.\n\n> 3.怎么将配置写入到路由器中,又怎么读取?\n\n> 4.页面怎么和可执行文件关联起来?或者通俗地说,页面点了一下,开发板怎么就执行了命令.\n\n> 5.ipk怎么生成,安装过程中发生了什么?\n","slug":"Openwrt_LuCI模块练习详细步骤","published":1,"date":"2015-09-01T16:00:00.000Z","updated":"2016-04-07T06:45:01.665Z","photos":[],"link":"","_id":"cimpzdpnm000cm1f1f4r6oi2h","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>又到了成胖子每周一博的时间了.最近在学习openwrt luci方面的知识,为了贯穿整个知识体系,练习题目为:</p>\n<blockquote>\n<p>通过页面配置周期性地往/tmp/addtest文件写入内容和时间戳</p>\n<p>1.在web主页面的下拉菜单做一个按钮,进入设置页面;</p>\n<p>2.两个设置项:输入的内容和周期;</p>\n<p>3.读取/tmp/addtest中的内容并显示在页面上;</p>\n</blockquote>\n<p>代码已经<a href=\"https://github.com/chengyi818/addtest\" target=\"_blank\" rel=\"external\">开源</a>,欢迎交流~</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"知识准备\"><a href=\"#知识准备\" class=\"headerlink\" title=\"知识准备\"></a>知识准备</h2><h3 id=\"源码编译及ipk生成\"><a href=\"#源码编译及ipk生成\" class=\"headerlink\" title=\"源码编译及ipk生成\"></a>源码编译及ipk生成</h3><p>这部分网上相关文章很多,也可以参见<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\" target=\"_blank\" rel=\"external\">拙作</a></p>\n<h3 id=\"LuCI\"><a href=\"#LuCI\" class=\"headerlink\" title=\"LuCI\"></a>LuCI</h3><p>首先回答一个问题:什么是Luci?</p>\n<p><del>&gt;LuCI是OpenWrt上的Web管理界面，LuCI采用了MVC三层架构，使用Lua脚本开发.</del></p>\n<blockquote>\n<p>简单地说,Luci就是用来做openwrt的页面的.不同于常见的html+css+javascript,Openwrt是用lua脚本语言开发的.</p>\n</blockquote>\n<p>怎么开发一个页面呢?</p>\n<blockquote>\n<p>要开发一个新的功能页面,开发者只要根据MVC框架写些简单的lua脚本,剩下的部分由openwrt为你自动完成.</p>\n</blockquote>\n<p>说到MVC框架了,什么是MVC框架呢?</p>\n<blockquote>\n<p>MVC是model+view+controller的简写.为了便于开发,openwrt将实现不同功能的lua脚本放在不同的文件夹中.请看下图:</p>\n</blockquote>\n<p><img src=\"http://i3.tietuku.com/11e2965d6e4c95e4.jpg\" alt=\"MVC架构\"></p>\n<p>什么是controller控制器?</p>\n<blockquote>\n<p>我们在这里设置功能在页面的位置,同时设置点击页面后,将要调用的功能.是要去Model模型读写配置数据呢?还是要呈现一个静态页面,或者是直接执行lua脚本函数.</p>\n</blockquote>\n<p>什么是model模型?</p>\n<blockquote>\n<p>这里我们常用的是,通过cbi模块和UCI(统一配置接口)进行交互.简单地说,就是我们在这里将页面和路由器里面的配置关联起来,从而将页面的设置写到路由器当中.</p>\n</blockquote>\n<p>什么是view视图?</p>\n<blockquote>\n<p>这个应该是最容易理解的,就是呈现的页面的样式,有点类似于传统的html页面.</p>\n</blockquote>\n<p>上面说到了UCI(Unified Configuartion Interface),这是什么龟?</p>\n<blockquote>\n<p>openwrt将配置用统一的格式书写,放在规定的地方(/etc/config/),同时提供接口函数进行读取和设置.</p>\n</blockquote>\n<p>如果还不太明白,接着向下看.如果有可能跟着我动动手,相信你很快就会掌握:)</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>我们先看下最终效果图:</p>\n<p><img src=\"http://i3.tietuku.com/cf83e41dbd8859bf.jpg\" alt=\"最终效果\"></p>\n<p>我们在页面上面的<code>System</code>下拉框的下面加了一个<code>AddTest</code>按钮,下面有两个子选项:<code>Set</code>和<code>Info</code>.其中<code>Set</code>用于选择是否开启功能,设置时间间隔和内容.<code>Info</code>用于显示<code>/tmp/addtest</code>文件中的内容.</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先,嗯~<br>你得有环境,得有电,有源码,编译过简单的ipk.如果没有,请<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\" target=\"_blank\" rel=\"external\">回炉</a>重造.</p>\n<p>其次,建立相应的文件夹及文件.至于linux操作神马的,我相信你一定没有问题.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$mkdir -p ~/temp/addtest</span><br><span class=\"line\">$cd ~/temp/addtest</span><br></pre></td></tr></table></figure>\n<p>最终文件树形图</p>\n<p><img src=\"http://i3.tietuku.com/e0e8a0b049ed0f45.jpg\" alt=\"树形图\"></p>\n<p>骨架已经有了,下面只需要往里面填肉了,是不是感觉很快~<br>不要管为什么要这样,我们后面慢慢解释.</p>\n<hr>\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><p>前面我们提到,controller主要用于控制页面按钮位置,以及调用的功能.首先来编辑这个文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/usr/lib/lua/luci/controller/addtest.lua</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module(&quot;luci.controller.addtest&quot;,package.seeall)</span><br><span class=\"line\"></span><br><span class=\"line\">function index()</span><br><span class=\"line\">    entry(&#123;&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;&#125;,alias(&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;),_(&quot;AddTest&quot;),99).index=true</span><br><span class=\"line\">    entry(&#123;&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;&#125;,cbi(&quot;addtest&quot;),_(&quot;Set&quot;),1)</span><br><span class=\"line\">    entry(&#123;&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;info&quot;&#125;,call(&quot;action_info&quot;),_(&quot;Info&quot;),2)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function action_info()</span><br><span class=\"line\">    if not nixio.fs.access(&quot;/tmp/addtest&quot;) then</span><br><span class=\"line\">        return</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local info = nixio.fs.readfile(&quot;/tmp/addtest&quot;)</span><br><span class=\"line\">    luci.template.render(&quot;addtest_info&quot;,&#123;info=info&#125;)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>格式模板:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module(&quot;luci.controller.控制器名&quot;, package.seeall)</span><br><span class=\"line\"></span><br><span class=\"line\">function index()</span><br><span class=\"line\">        entry(路径, 调用目标, _(&quot;显示名称&quot;), 显示顺序)</span><br><span class=\"line\">        end</span><br></pre></td></tr></table></figure>\n<p>这个脚本文件可以分为3块:第1行,3~7行,9~16行</p>\n<p>第1行</p>\n<blockquote>\n<p>说明了模块的名称,本文在controller目录下创建了<code>addtest.lua</code>文件,将模板中的控制器名替换为<code>addtest</code>即可.</p>\n</blockquote>\n<p>第3行</p>\n<blockquote>\n<p> 第3~7行定义按钮的位置,调用的功能,显示名称.其中第3行和第7行是固定的模板格式,不需要修改</p>\n</blockquote>\n<p>第4行</p>\n<blockquote>\n<p>  entry表示添加新的模块.<br>第一个参数<code>{&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;}</code>表示按钮的位置.<code>admin</code>表示我们这个功能只有以管理员身份登录页面才可以看到.<code>system</code>表示一级菜单名,<code>addtest</code>则是一级菜单下的子菜单.第二个参数<code>alias(&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;)</code>表示调用的功能.这个按钮没有独立的功能,而是将它关联到它的下一级子菜单<code>set</code>.<br>第三个参数<code>_(&quot;AddTest&quot;)</code>表示显示名称,可选.如果页面按钮想做成中文,可以在这里设置.<br>第四个参数<code>99</code>表示显示顺序的优先级,Luci根据这个值为同一父菜单的所有子菜单排序.</p>\n</blockquote>\n<p>第5行</p>\n<blockquote>\n<p>第一个参数<code>{&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;}</code>表示在<code>addtest</code>下再增加一个子选项<code>set</code>.<br>第二个参数<code>cbi(&quot;addtest&quot;)</code>表示调用cbi模块,这里将会调用到<code>/usr/lib/lua/luci/model/cbi/addtest.lua</code></p>\n</blockquote>\n<p>第6行</p>\n<blockquote>\n<p>第二个参数<code>call(&quot;action_info&quot;)</code>表示执行指定方法,这里将会调用我们下面写的<code>acttion_info</code>函数.</p>\n</blockquote>\n<p>备注<br>:   关于<code>entry</code>第二个参数调用目标.我们还有一个<code>template</code>没有涉及,它表示访问指定页面.比如<code>template(addtest_info)</code>将会直接访问<code>/usr/lib/lua/luci/view/addtest_info.htm</code>.</p>\n<p>9~16行</p>\n<blockquote>\n<p> 这里使用lua语言调用<code>nixio</code>接口写了一个简单的函数,首先判断文件是否存在,然后读取其中的内容赋值给变量<code>info</code>,最后访问指定页面<code>/usr/lib/lua/luci/view/addtest_info.htm</code>,同时将变量<code>info</code>传递过去.<br><a href=\"http://luci.subsignal.org/api/luci/\" target=\"_blank\" rel=\"external\">luci接口手册</a><br><a href=\"http://luci.subsignal.org/api/nixio/\" target=\"_blank\" rel=\"external\">nixio接口手册</a></p>\n</blockquote>\n<hr>\n<h3 id=\"UCI\"><a href=\"#UCI\" class=\"headerlink\" title=\"UCI\"></a>UCI</h3><p>UCI是openwrt的配置管理机制,它将配置统一放到<code>/etc/config</code>文件夹下.详细地介绍请参考<a href=\"http://www.leiphone.com/news/201406/diy-a-smart-router-topic-system-configuration.html\" target=\"_blank\" rel=\"external\">这里</a>.<br>下面来编辑这个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/etc/config/addtest</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config arguments</span><br><span class=\"line\">    option interval &apos;&apos;</span><br><span class=\"line\">    option content &apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>Section开始语法: <code>config &#39;类型&#39; &#39;名字&#39;</code><br>参数定义语法: <code>option &#39;键&#39; &#39;值&#39;</code><br>列表定义语法: <code>list &#39;集合名字&#39; &#39;值&#39;</code></p>\n<p>简单解释下,我们在<code>/etc/config</code>下新建一个名为<code>addtest</code>的配置文件,其中类型为<code>arguments</code>,名字省略.有两个键,一个名为<code>interval</code>用来存时间间隔.一个名为<code>content</code>用来存准备周期性输入的内容.</p>\n<hr>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>在<strong>controller</strong>章节中,我们提到<code>cbi</code>会调用到<code>model</code>文件夹中的<code>addtest.lua</code>文件.下面我们来编辑它.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/usr/lib/lua/luci/model/cbi/addtest.lua</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m=Map(&quot;addtest&quot;,translate(&quot;Luci practice&quot;),translate(&quot;fat cheng&apos;s test&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">s=m:section(TypedSection,&quot;arguments&quot;,&quot;&quot;)</span><br><span class=\"line\">s.addremove=true</span><br><span class=\"line\">s.anonymous=false</span><br><span class=\"line\"></span><br><span class=\"line\">s:option(Flag,&quot;enable&quot;,translate(&quot;Enable&quot;))</span><br><span class=\"line\">s:option(Value,&quot;interval&quot;,translate(&quot;Interval&quot;))</span><br><span class=\"line\">s:option(Value,&quot;content&quot;,translate(&quot;Content&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">local apply=luci.http.formvalue(&quot;cbi.apply&quot;)</span><br><span class=\"line\">if apply then</span><br><span class=\"line\">    io.popen(&quot;/etc/init.d/addtestd restart&quot;)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">return m</span><br></pre></td></tr></table></figure>\n<p>下面我们来解释下这个文件.</p>\n<p>第1行</p>\n<blockquote>\n<p>  模板<code>m = Map(&quot;配置文件文件名&quot;, &quot;配置页面标题&quot;, &quot;配置页面说明&quot;)</code><br>第一个参数:上一步我们新建配置文件<code>/etc/config/addtest</code>.这里就是建立与配置文件的联系.<br>第二,三两个参数,则是页面的主标题和副标题.还不清楚的话,翻上去看看最终效果图,看看它们在哪里.</p>\n</blockquote>\n<p>第3行</p>\n<blockquote>\n<p>  在一个配置文件中可能有很多Section,所以我们需要创建与配置文件中我们想要的Section的联系.<br>有两种方式可以选择:NamedSection(name,type,title,description)和TypedSection(type,title,description),前者根据配置文件中的Section名，而后者根据配置文件中的Section类型.我们选用了第二种.</p>\n</blockquote>\n<p>第4行</p>\n<blockquote>\n<p>  设定不允许增加或删除Section</p>\n</blockquote>\n<p>第5行</p>\n<blockquote>\n<p>  设定显示Section的名称,这里建议你可以试试设定为<code>true</code>,看看会发生什么.</p>\n</blockquote>\n<p>7~9行</p>\n<blockquote>\n<p>  接着则是建立与Section中的option之间的联系.模板<code>s:option(交互形式,option键值,显示名称)</code>.<br>第一个参数:常见的交互形式有Value(文本框),ListValue(下拉框),Flag(选择框).,不知道为啥我打不开<a href=\"http://luci.subsignal.org/trac/wiki/Documentation/CBI\" target=\"_blank\" rel=\"external\">官方文档</a>,这里也可以<a href=\"http://blog.csdn.net/qq_21949217/article/details/44151595\" target=\"_blank\" rel=\"external\">参考</a><br>第二个参数表示在配置文件中的option的键值<br>第三个参数表示,你希望在页面上呈现的名称.<br>创建后开发者无需考虑读取以及写入配置文件的问题，系统会自动处理.</p>\n</blockquote>\n<p>11~14行</p>\n<blockquote>\n<p>  系统会为我们在页面上自动创建一些按钮<code>Save&amp;Apply</code>,<code>Save</code>,<code>Reset</code>.我们仅仅将配置写入<code>/etc/config</code>下对应的文件是不够的,我们还希望可以根据这个配置进行一些操作.<br>这部分代码的作用是,当你按下页面的<code>apply</code>按钮后,相当于在串口shell下输入<code>/etc/init.d/addtestd restart</code></p>\n</blockquote>\n<hr>\n<h3 id=\"init-d\"><a href=\"#init-d\" class=\"headerlink\" title=\"init.d\"></a>init.d</h3><p>上一节我们已经可以读写配置了,怎么根据配置来进行操作呢?这是我们这一节要谈的.我们来编辑<code>~/temp/addtest/files/etc/init.d/addtestd</code>这个文件.<br>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh /etc/rc.common</span><br><span class=\"line\">START=50</span><br><span class=\"line\"></span><br><span class=\"line\">run_addtest()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    local enable</span><br><span class=\"line\">    config_get_bool enable $1 enable</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $enable ]; then</span><br><span class=\"line\">        local interval</span><br><span class=\"line\">        local content</span><br><span class=\"line\">        config_get interval $1 interval</span><br><span class=\"line\">        config_get content $1 content</span><br><span class=\"line\"></span><br><span class=\"line\">        addtest $interval $content           </span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    config_load addtest</span><br><span class=\"line\">    config_foreach run_addtest arguments</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    result=`pidof addtest`</span><br><span class=\"line\">    kill -9 $result</span><br><span class=\"line\">    echo &quot;addtest has stoped&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第1行</p>\n<blockquote>\n<p>  Linux 系统根据 “#!” 及该字串后面的信息确定该文件的类型,表示这个文件需要由/bin/sh和/etc/rc.common来解释执行.</p>\n</blockquote>\n<p>第2行</p>\n<blockquote>\n<p>  表示启动的优先级,这里暂时用不到</p>\n</blockquote>\n<p>4~17行</p>\n<blockquote>\n<p>  是一个函数,主要作用是读取<code>/etc/config/addtest</code>中的内容,然后根据是否打开开关在第15行将配置传递给可执行文件<code>addtest</code>,由它根据配置执行指定的操作.<br>读取配置的方法,我强烈推荐你阅读<a href=\"http://wiki.openwrt.org/doc/devel/config-scripting\" target=\"_blank\" rel=\"external\">官方文档</a>,精炼而简洁.<br>获取布尔值类型:<code>config_get_bool 变量名 Section名 Section参数名</code><br>获取变量值:<code>config_get 变量名 Section名 Section参数名</code></p>\n</blockquote>\n<p>19~23行</p>\n<blockquote>\n<p>  对应于<code>/etc/init.d/addtestd start</code>.首先使用<code>config_load 配置文件名</code>的方法载入配置文件,然后使用<code>config_foreach 遍历函数名 Section类型</code>的方法,遍历配置文件中的Section.</p>\n</blockquote>\n<p>25~30行</p>\n<blockquote>\n<p>  对应于<code>/etc/init.d/addtestd stop</code>.找到<code>addtest</code>这个进程的进程号,然后杀死它</p>\n</blockquote>\n<p>备注<br>:   前一节提到的<code>/etc/init.d/addtestd restart</code>中的<code>restart</code>命令,在<code>/etc/rc.common</code>进行了定义,简单来讲就是先执行了<code>stop</code>命令,再执行<code>start</code>命令.<br>最后务必执行<strong><code>$sudo chmod 755 ~/temp/addtest/files/etc/init.d/addtestd</code></strong>.</p>\n<hr>\n<h3 id=\"src\"><a href=\"#src\" class=\"headerlink\" title=\"src\"></a>src</h3><p>前一节,我们谈到<code>run_addtest</code>调用可执行文件<code>addtest</code>,现在我们编辑这部分内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/src/addtest.c</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int index;</span><br><span class=\"line\">    for(index=0; index&lt;10; index++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FILE *fp=fopen(&quot;/tmp/addtest&quot;,&quot;at&quot;);</span><br><span class=\"line\">        system(&quot;date &gt;&gt; /tmp/addtest&quot;);</span><br><span class=\"line\">        fprintf(fp, &quot;%s\\n&quot;, argv[2]);</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">        printf(&quot;interval=%d\\n&quot;,atoi(argv[1]));</span><br><span class=\"line\">        sleep(  atoi(argv[1]) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分代码比较简短,我们不再解释.需要掌握的点有:</p>\n<blockquote>\n<p>1.<code>argc</code>和<code>argv[]</code>的使用方法</p>\n<p>2.<code>fopen</code>函数,<code>fclose</code>函数以及<code>fprintf</code>函数的使用方法</p>\n<p>3.<code>system</code>函数的使用方法</p>\n<p>4.<code>sleep</code>函数和<code>atoi</code>函数的使用方法,<code>argv[1]</code>的类型为<code>char</code>需要转换为整型.</p>\n</blockquote>\n<p>通过这个可执行文件,我们周期性地将时间戳和内容写入了<code>/tmp/addtest</code>文件.<br>最后我们写一个简单的Makefile:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim $vim ~/temp/addtest/files/src/Makefile</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addtest : addtest.o</span><br><span class=\"line\">\t$(CC) addtest.o -o addtest</span><br><span class=\"line\"></span><br><span class=\"line\">addtest.o : addtest.c</span><br><span class=\"line\">\t$(CC) -c addtest.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm *.o addtest</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><p>上一节,我们已经根据配置将指定的内容周期性地写入了<code>/tmp/addtest</code>.在<strong>controller</strong>那一节,我们的函数<code>action_info</code>读取了<code>/tmp/addtest</code>中的内容并访问指定页面<code>/usr/lib/lua/luci/view/addtest_info.htm</code>,同时将读取的内容通过变量<code>info</code>传递过去.</p>\n<p>下面我们来编辑这个页面,<br><code>$vim ~/temp/addtest/files/usr/lib/lua/luci/view/addtest_info.htm</code><br>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%+header%&gt;</span><br><span class=\"line\">&lt;h2&gt;&lt;a id=&quot;content&quot; name=&quot;content&quot;&gt;&lt;%:Addtest Info%&gt;&lt;/a&gt;&lt;/h2&gt;</span><br><span class=\"line\">&lt;div id=&quot;content_addtest_info&quot;&gt;</span><br><span class=\"line\">&lt;textarea readonly=&quot;readonly&quot; wrap=&quot;off&quot; rows=&quot;&lt;%=info:cmatch(&quot;\\n&quot;)+2%&gt;&quot; id=&quot;info&quot;&gt;&lt;%=info:pcdata()%&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;%+footer%&gt;</span><br></pre></td></tr></table></figure>\n<p>这部分和传统的<code>html</code>很类似,我主要是根据其他页面照猫画虎,不是很美观.有机会还要加强这个方面的学习.</p>\n<hr>\n<h3 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a>Makefile</h3><p>不知不觉,我们居然已经将代码全部写完了,竟还有点恋恋不舍呢.下面我们用一个<code>Makefie</code>文件将它们打包生成一个ipk文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/Makefile</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include $(TOPDIR)/rules.mk</span><br><span class=\"line\"></span><br><span class=\"line\">PKG_NAME:=addtest</span><br><span class=\"line\">PKG_VERSION=1.0</span><br><span class=\"line\">PKG_RELEASE:=1</span><br><span class=\"line\"></span><br><span class=\"line\">PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">include $(INCLUDE_DIR)/package.mk</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/addtest</span><br><span class=\"line\">\tSECTION:=utils</span><br><span class=\"line\">\tCATEGORY:=Utilities</span><br><span class=\"line\">\tTITLE:=Addtest--print something to /var/addtest</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/addtest/description</span><br><span class=\"line\">\tIt&apos;s a test,print something to /var/addtest cyclicaliy</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Prepare</span><br><span class=\"line\">\tmkdir -p $(PKG_BUILD_DIR)</span><br><span class=\"line\">\t$(CP) ./src/* $(PKG_BUILD_DIR)/</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/addtest/postinst</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">rm -rf /tmp/luci*</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Configure</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Compile</span><br><span class=\"line\">\t$(call Build/Compile/Default)</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/$(PKG_NAME)/install</span><br><span class=\"line\">\t$(CP) ./files/* $(1)/</span><br><span class=\"line\">\t$(INSTALL_DIR) $(1)/bin</span><br><span class=\"line\">\t$(INSTALL_BIN)  $(PKG_BUILD_DIR)/addtest  $(1)/bin</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call BuildPackage,$(PKG_NAME)))</span><br></pre></td></tr></table></figure>\n<p>Makefile的解释,请参见<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\" target=\"_blank\" rel=\"external\">拙作</a>.我们这里稍作补充.</p>\n<p>26~29行</p>\n<blockquote>\n<p>  由于luci会将模块加载到<code>/tmp</code>目录下运行,每次新加载luci模块后,需要执行<code>$rm -rf /tmp/luci*</code>.这里表示安装了ipk之后,将会自动执行删除命令,重新载入.</p>\n</blockquote>\n<p>39行</p>\n<blockquote>\n<p>  $(1)是传入的参数,表示系统镜像目录,你可以将之视为路由器最后的文件系统.所以这句的意思就是将我们<code>files</code>下的内容拷贝到路由器的文件系统中.这也是我们为什么要建立一开始那么复杂的目录树的原因.</p>\n</blockquote>\n<hr>\n<h3 id=\"编译-amp-安装\"><a href=\"#编译-amp-安装\" class=\"headerlink\" title=\"编译&amp;安装\"></a>编译&amp;安装</h3><p>简直像裹脚布一样,又臭又长.不要说读了,我自己写的都快有点受不了了.读到这里的人真是辛苦了,下面到了我们收获果实的时候了.<br>将文件拷贝到源码目录的<code>package</code>目录下.其余部分,请参考<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\" target=\"_blank\" rel=\"external\">拙作</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cp ~/temp/addtest ~/openwrt/package</span><br></pre></td></tr></table></figure>\n<p>把它拷贝到你的开发板中,试试看.</p>\n<hr>\n<h3 id=\"调试方法\"><a href=\"#调试方法\" class=\"headerlink\" title=\"调试方法\"></a>调试方法</h3><p>我们当然希望可以一次成功,不过世间不如意之事十之八九.我来谈谈我自己的调试方法.</p>\n<p><code>src</code>部分</p>\n<blockquote>\n<p>  <code>src</code>文件下有<code>Makefile</code>文件,你可以直接在编译机上执行<code>$make</code>生成可执行文件<code>addtest</code>,然后在编译机上<code>src</code>目录下执行<code>$./addtest 参数1 参数2</code>.最后记得执行<code>$make clean</code>.</p>\n</blockquote>\n<p><code>luci</code>部分</p>\n<blockquote>\n<p>  将ipk安装到开发板后,可以通过串口或者ssh的方式登录开发板,然后直接在开发板中修改文件内容,再执行<code>$rm -rf /tmp/luci*</code>.最后重新载入设备页面.</p>\n</blockquote>\n<hr>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>不知不觉到了分手的时候,竟感觉有些忧桑呢.</p>\n<h3 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h3><ol>\n<li>我自己刚接触学习,难免很多不足</li>\n<li>页面输入没有防呆机制</li>\n</ol>\n<p>多多包含:)</p>\n<h3 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h3><p>除了官方文档之外,这两篇博客给我很多指导:<br><a href=\"http://www.tuicool.com/articles/zaUNfy\" target=\"_blank\" rel=\"external\">开发OpenWrt路由器上LuCI的模块</a>,<a href=\"http://blog.chinaunix.net/uid-23780428-id-4367351.html\" target=\"_blank\" rel=\"external\"> openwrt中luci学习笔记</a>.<br>我的同事宁财神给我们做了luci的框架介绍,同时在我的调试过程中,给予我很多帮助.<br>最后感谢管工给出这样一个练习题,虽然很小巧,居然可以贯通整个知识体系.我现在还是为他的高屋建瓴感到惊叹.</p>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h3><p>在整篇文章学习完成后,我们希望可以回答以下几个问题:</p>\n<blockquote>\n<p>1.MVC是什么?各部分有哪些功能?</p>\n<p>2.怎么在页面上指定位置做出一个子页面.</p>\n<p>3.怎么将配置写入到路由器中,又怎么读取?</p>\n<p>4.页面怎么和可执行文件关联起来?或者通俗地说,页面点了一下,开发板怎么就执行了命令.</p>\n<p>5.ipk怎么生成,安装过程中发生了什么?</p>\n</blockquote>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>又到了成胖子每周一博的时间了.最近在学习openwrt luci方面的知识,为了贯穿整个知识体系,练习题目为:</p>\n<blockquote>\n<p>通过页面配置周期性地往/tmp/addtest文件写入内容和时间戳</p>\n<p>1.在web主页面的下拉菜单做一个按钮,进入设置页面;</p>\n<p>2.两个设置项:输入的内容和周期;</p>\n<p>3.读取/tmp/addtest中的内容并显示在页面上;</p>\n</blockquote>\n<p>代码已经<a href=\"https://github.com/chengyi818/addtest\">开源</a>,欢迎交流~</p>","more":"<hr>\n<h2 id=\"知识准备\"><a href=\"#知识准备\" class=\"headerlink\" title=\"知识准备\"></a>知识准备</h2><h3 id=\"源码编译及ipk生成\"><a href=\"#源码编译及ipk生成\" class=\"headerlink\" title=\"源码编译及ipk生成\"></a>源码编译及ipk生成</h3><p>这部分网上相关文章很多,也可以参见<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\">拙作</a></p>\n<h3 id=\"LuCI\"><a href=\"#LuCI\" class=\"headerlink\" title=\"LuCI\"></a>LuCI</h3><p>首先回答一个问题:什么是Luci?</p>\n<p><del>&gt;LuCI是OpenWrt上的Web管理界面，LuCI采用了MVC三层架构，使用Lua脚本开发.</del></p>\n<blockquote>\n<p>简单地说,Luci就是用来做openwrt的页面的.不同于常见的html+css+javascript,Openwrt是用lua脚本语言开发的.</p>\n</blockquote>\n<p>怎么开发一个页面呢?</p>\n<blockquote>\n<p>要开发一个新的功能页面,开发者只要根据MVC框架写些简单的lua脚本,剩下的部分由openwrt为你自动完成.</p>\n</blockquote>\n<p>说到MVC框架了,什么是MVC框架呢?</p>\n<blockquote>\n<p>MVC是model+view+controller的简写.为了便于开发,openwrt将实现不同功能的lua脚本放在不同的文件夹中.请看下图:</p>\n</blockquote>\n<p><img src=\"http://i3.tietuku.com/11e2965d6e4c95e4.jpg\" alt=\"MVC架构\"></p>\n<p>什么是controller控制器?</p>\n<blockquote>\n<p>我们在这里设置功能在页面的位置,同时设置点击页面后,将要调用的功能.是要去Model模型读写配置数据呢?还是要呈现一个静态页面,或者是直接执行lua脚本函数.</p>\n</blockquote>\n<p>什么是model模型?</p>\n<blockquote>\n<p>这里我们常用的是,通过cbi模块和UCI(统一配置接口)进行交互.简单地说,就是我们在这里将页面和路由器里面的配置关联起来,从而将页面的设置写到路由器当中.</p>\n</blockquote>\n<p>什么是view视图?</p>\n<blockquote>\n<p>这个应该是最容易理解的,就是呈现的页面的样式,有点类似于传统的html页面.</p>\n</blockquote>\n<p>上面说到了UCI(Unified Configuartion Interface),这是什么龟?</p>\n<blockquote>\n<p>openwrt将配置用统一的格式书写,放在规定的地方(/etc/config/),同时提供接口函数进行读取和设置.</p>\n</blockquote>\n<p>如果还不太明白,接着向下看.如果有可能跟着我动动手,相信你很快就会掌握:)</p>\n<hr>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>我们先看下最终效果图:</p>\n<p><img src=\"http://i3.tietuku.com/cf83e41dbd8859bf.jpg\" alt=\"最终效果\"></p>\n<p>我们在页面上面的<code>System</code>下拉框的下面加了一个<code>AddTest</code>按钮,下面有两个子选项:<code>Set</code>和<code>Info</code>.其中<code>Set</code>用于选择是否开启功能,设置时间间隔和内容.<code>Info</code>用于显示<code>/tmp/addtest</code>文件中的内容.</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>首先,嗯~<br>你得有环境,得有电,有源码,编译过简单的ipk.如果没有,请<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\">回炉</a>重造.</p>\n<p>其次,建立相应的文件夹及文件.至于linux操作神马的,我相信你一定没有问题.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$mkdir -p ~/temp/addtest</span><br><span class=\"line\">$cd ~/temp/addtest</span><br></pre></td></tr></table></figure>\n<p>最终文件树形图</p>\n<p><img src=\"http://i3.tietuku.com/e0e8a0b049ed0f45.jpg\" alt=\"树形图\"></p>\n<p>骨架已经有了,下面只需要往里面填肉了,是不是感觉很快~<br>不要管为什么要这样,我们后面慢慢解释.</p>\n<hr>\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><p>前面我们提到,controller主要用于控制页面按钮位置,以及调用的功能.首先来编辑这个文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/usr/lib/lua/luci/controller/addtest.lua</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module(&quot;luci.controller.addtest&quot;,package.seeall)</span><br><span class=\"line\"></span><br><span class=\"line\">function index()</span><br><span class=\"line\">    entry(&#123;&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;&#125;,alias(&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;),_(&quot;AddTest&quot;),99).index=true</span><br><span class=\"line\">    entry(&#123;&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;&#125;,cbi(&quot;addtest&quot;),_(&quot;Set&quot;),1)</span><br><span class=\"line\">    entry(&#123;&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;info&quot;&#125;,call(&quot;action_info&quot;),_(&quot;Info&quot;),2)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">function action_info()</span><br><span class=\"line\">    if not nixio.fs.access(&quot;/tmp/addtest&quot;) then</span><br><span class=\"line\">        return</span><br><span class=\"line\">    end</span><br><span class=\"line\"></span><br><span class=\"line\">    local info = nixio.fs.readfile(&quot;/tmp/addtest&quot;)</span><br><span class=\"line\">    luci.template.render(&quot;addtest_info&quot;,&#123;info=info&#125;)</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>格式模板:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module(&quot;luci.controller.控制器名&quot;, package.seeall)</span><br><span class=\"line\"></span><br><span class=\"line\">function index()</span><br><span class=\"line\">        entry(路径, 调用目标, _(&quot;显示名称&quot;), 显示顺序)</span><br><span class=\"line\">        end</span><br></pre></td></tr></table></figure>\n<p>这个脚本文件可以分为3块:第1行,3~7行,9~16行</p>\n<p>第1行</p>\n<blockquote>\n<p>说明了模块的名称,本文在controller目录下创建了<code>addtest.lua</code>文件,将模板中的控制器名替换为<code>addtest</code>即可.</p>\n</blockquote>\n<p>第3行</p>\n<blockquote>\n<p> 第3~7行定义按钮的位置,调用的功能,显示名称.其中第3行和第7行是固定的模板格式,不需要修改</p>\n</blockquote>\n<p>第4行</p>\n<blockquote>\n<p>  entry表示添加新的模块.<br>第一个参数<code>{&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;}</code>表示按钮的位置.<code>admin</code>表示我们这个功能只有以管理员身份登录页面才可以看到.<code>system</code>表示一级菜单名,<code>addtest</code>则是一级菜单下的子菜单.第二个参数<code>alias(&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;)</code>表示调用的功能.这个按钮没有独立的功能,而是将它关联到它的下一级子菜单<code>set</code>.<br>第三个参数<code>_(&quot;AddTest&quot;)</code>表示显示名称,可选.如果页面按钮想做成中文,可以在这里设置.<br>第四个参数<code>99</code>表示显示顺序的优先级,Luci根据这个值为同一父菜单的所有子菜单排序.</p>\n</blockquote>\n<p>第5行</p>\n<blockquote>\n<p>第一个参数<code>{&quot;admin&quot;,&quot;system&quot;,&quot;addtest&quot;,&quot;set&quot;}</code>表示在<code>addtest</code>下再增加一个子选项<code>set</code>.<br>第二个参数<code>cbi(&quot;addtest&quot;)</code>表示调用cbi模块,这里将会调用到<code>/usr/lib/lua/luci/model/cbi/addtest.lua</code></p>\n</blockquote>\n<p>第6行</p>\n<blockquote>\n<p>第二个参数<code>call(&quot;action_info&quot;)</code>表示执行指定方法,这里将会调用我们下面写的<code>acttion_info</code>函数.</p>\n</blockquote>\n<p>备注<br>:   关于<code>entry</code>第二个参数调用目标.我们还有一个<code>template</code>没有涉及,它表示访问指定页面.比如<code>template(addtest_info)</code>将会直接访问<code>/usr/lib/lua/luci/view/addtest_info.htm</code>.</p>\n<p>9~16行</p>\n<blockquote>\n<p> 这里使用lua语言调用<code>nixio</code>接口写了一个简单的函数,首先判断文件是否存在,然后读取其中的内容赋值给变量<code>info</code>,最后访问指定页面<code>/usr/lib/lua/luci/view/addtest_info.htm</code>,同时将变量<code>info</code>传递过去.<br><a href=\"http://luci.subsignal.org/api/luci/\">luci接口手册</a><br><a href=\"http://luci.subsignal.org/api/nixio/\">nixio接口手册</a></p>\n</blockquote>\n<hr>\n<h3 id=\"UCI\"><a href=\"#UCI\" class=\"headerlink\" title=\"UCI\"></a>UCI</h3><p>UCI是openwrt的配置管理机制,它将配置统一放到<code>/etc/config</code>文件夹下.详细地介绍请参考<a href=\"http://www.leiphone.com/news/201406/diy-a-smart-router-topic-system-configuration.html\">这里</a>.<br>下面来编辑这个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/etc/config/addtest</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config arguments</span><br><span class=\"line\">    option interval &apos;&apos;</span><br><span class=\"line\">    option content &apos;&apos;</span><br></pre></td></tr></table></figure>\n<p>Section开始语法: <code>config &#39;类型&#39; &#39;名字&#39;</code><br>参数定义语法: <code>option &#39;键&#39; &#39;值&#39;</code><br>列表定义语法: <code>list &#39;集合名字&#39; &#39;值&#39;</code></p>\n<p>简单解释下,我们在<code>/etc/config</code>下新建一个名为<code>addtest</code>的配置文件,其中类型为<code>arguments</code>,名字省略.有两个键,一个名为<code>interval</code>用来存时间间隔.一个名为<code>content</code>用来存准备周期性输入的内容.</p>\n<hr>\n<h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>在<strong>controller</strong>章节中,我们提到<code>cbi</code>会调用到<code>model</code>文件夹中的<code>addtest.lua</code>文件.下面我们来编辑它.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/usr/lib/lua/luci/model/cbi/addtest.lua</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m=Map(&quot;addtest&quot;,translate(&quot;Luci practice&quot;),translate(&quot;fat cheng&apos;s test&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">s=m:section(TypedSection,&quot;arguments&quot;,&quot;&quot;)</span><br><span class=\"line\">s.addremove=true</span><br><span class=\"line\">s.anonymous=false</span><br><span class=\"line\"></span><br><span class=\"line\">s:option(Flag,&quot;enable&quot;,translate(&quot;Enable&quot;))</span><br><span class=\"line\">s:option(Value,&quot;interval&quot;,translate(&quot;Interval&quot;))</span><br><span class=\"line\">s:option(Value,&quot;content&quot;,translate(&quot;Content&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">local apply=luci.http.formvalue(&quot;cbi.apply&quot;)</span><br><span class=\"line\">if apply then</span><br><span class=\"line\">    io.popen(&quot;/etc/init.d/addtestd restart&quot;)</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">return m</span><br></pre></td></tr></table></figure>\n<p>下面我们来解释下这个文件.</p>\n<p>第1行</p>\n<blockquote>\n<p>  模板<code>m = Map(&quot;配置文件文件名&quot;, &quot;配置页面标题&quot;, &quot;配置页面说明&quot;)</code><br>第一个参数:上一步我们新建配置文件<code>/etc/config/addtest</code>.这里就是建立与配置文件的联系.<br>第二,三两个参数,则是页面的主标题和副标题.还不清楚的话,翻上去看看最终效果图,看看它们在哪里.</p>\n</blockquote>\n<p>第3行</p>\n<blockquote>\n<p>  在一个配置文件中可能有很多Section,所以我们需要创建与配置文件中我们想要的Section的联系.<br>有两种方式可以选择:NamedSection(name,type,title,description)和TypedSection(type,title,description),前者根据配置文件中的Section名，而后者根据配置文件中的Section类型.我们选用了第二种.</p>\n</blockquote>\n<p>第4行</p>\n<blockquote>\n<p>  设定不允许增加或删除Section</p>\n</blockquote>\n<p>第5行</p>\n<blockquote>\n<p>  设定显示Section的名称,这里建议你可以试试设定为<code>true</code>,看看会发生什么.</p>\n</blockquote>\n<p>7~9行</p>\n<blockquote>\n<p>  接着则是建立与Section中的option之间的联系.模板<code>s:option(交互形式,option键值,显示名称)</code>.<br>第一个参数:常见的交互形式有Value(文本框),ListValue(下拉框),Flag(选择框).,不知道为啥我打不开<a href=\"http://luci.subsignal.org/trac/wiki/Documentation/CBI\">官方文档</a>,这里也可以<a href=\"http://blog.csdn.net/qq_21949217/article/details/44151595\">参考</a><br>第二个参数表示在配置文件中的option的键值<br>第三个参数表示,你希望在页面上呈现的名称.<br>创建后开发者无需考虑读取以及写入配置文件的问题，系统会自动处理.</p>\n</blockquote>\n<p>11~14行</p>\n<blockquote>\n<p>  系统会为我们在页面上自动创建一些按钮<code>Save&amp;Apply</code>,<code>Save</code>,<code>Reset</code>.我们仅仅将配置写入<code>/etc/config</code>下对应的文件是不够的,我们还希望可以根据这个配置进行一些操作.<br>这部分代码的作用是,当你按下页面的<code>apply</code>按钮后,相当于在串口shell下输入<code>/etc/init.d/addtestd restart</code></p>\n</blockquote>\n<hr>\n<h3 id=\"init-d\"><a href=\"#init-d\" class=\"headerlink\" title=\"init.d\"></a>init.d</h3><p>上一节我们已经可以读写配置了,怎么根据配置来进行操作呢?这是我们这一节要谈的.我们来编辑<code>~/temp/addtest/files/etc/init.d/addtestd</code>这个文件.<br>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh /etc/rc.common</span><br><span class=\"line\">START=50</span><br><span class=\"line\"></span><br><span class=\"line\">run_addtest()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    local enable</span><br><span class=\"line\">    config_get_bool enable $1 enable</span><br><span class=\"line\"></span><br><span class=\"line\">    if [ $enable ]; then</span><br><span class=\"line\">        local interval</span><br><span class=\"line\">        local content</span><br><span class=\"line\">        config_get interval $1 interval</span><br><span class=\"line\">        config_get content $1 content</span><br><span class=\"line\"></span><br><span class=\"line\">        addtest $interval $content           </span><br><span class=\"line\">    fi</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">start()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    config_load addtest</span><br><span class=\"line\">    config_foreach run_addtest arguments</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stop()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    result=`pidof addtest`</span><br><span class=\"line\">    kill -9 $result</span><br><span class=\"line\">    echo &quot;addtest has stoped&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第1行</p>\n<blockquote>\n<p>  Linux 系统根据 “#!” 及该字串后面的信息确定该文件的类型,表示这个文件需要由/bin/sh和/etc/rc.common来解释执行.</p>\n</blockquote>\n<p>第2行</p>\n<blockquote>\n<p>  表示启动的优先级,这里暂时用不到</p>\n</blockquote>\n<p>4~17行</p>\n<blockquote>\n<p>  是一个函数,主要作用是读取<code>/etc/config/addtest</code>中的内容,然后根据是否打开开关在第15行将配置传递给可执行文件<code>addtest</code>,由它根据配置执行指定的操作.<br>读取配置的方法,我强烈推荐你阅读<a href=\"http://wiki.openwrt.org/doc/devel/config-scripting\">官方文档</a>,精炼而简洁.<br>获取布尔值类型:<code>config_get_bool 变量名 Section名 Section参数名</code><br>获取变量值:<code>config_get 变量名 Section名 Section参数名</code></p>\n</blockquote>\n<p>19~23行</p>\n<blockquote>\n<p>  对应于<code>/etc/init.d/addtestd start</code>.首先使用<code>config_load 配置文件名</code>的方法载入配置文件,然后使用<code>config_foreach 遍历函数名 Section类型</code>的方法,遍历配置文件中的Section.</p>\n</blockquote>\n<p>25~30行</p>\n<blockquote>\n<p>  对应于<code>/etc/init.d/addtestd stop</code>.找到<code>addtest</code>这个进程的进程号,然后杀死它</p>\n</blockquote>\n<p>备注<br>:   前一节提到的<code>/etc/init.d/addtestd restart</code>中的<code>restart</code>命令,在<code>/etc/rc.common</code>进行了定义,简单来讲就是先执行了<code>stop</code>命令,再执行<code>start</code>命令.<br>最后务必执行<strong><code>$sudo chmod 755 ~/temp/addtest/files/etc/init.d/addtestd</code></strong>.</p>\n<hr>\n<h3 id=\"src\"><a href=\"#src\" class=\"headerlink\" title=\"src\"></a>src</h3><p>前一节,我们谈到<code>run_addtest</code>调用可执行文件<code>addtest</code>,现在我们编辑这部分内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/files/src/addtest.c</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int index;</span><br><span class=\"line\">    for(index=0; index&lt;10; index++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        FILE *fp=fopen(&quot;/tmp/addtest&quot;,&quot;at&quot;);</span><br><span class=\"line\">        system(&quot;date &gt;&gt; /tmp/addtest&quot;);</span><br><span class=\"line\">        fprintf(fp, &quot;%s\\n&quot;, argv[2]);</span><br><span class=\"line\">        fclose(fp);</span><br><span class=\"line\">        printf(&quot;interval=%d\\n&quot;,atoi(argv[1]));</span><br><span class=\"line\">        sleep(  atoi(argv[1]) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分代码比较简短,我们不再解释.需要掌握的点有:</p>\n<blockquote>\n<p>1.<code>argc</code>和<code>argv[]</code>的使用方法</p>\n<p>2.<code>fopen</code>函数,<code>fclose</code>函数以及<code>fprintf</code>函数的使用方法</p>\n<p>3.<code>system</code>函数的使用方法</p>\n<p>4.<code>sleep</code>函数和<code>atoi</code>函数的使用方法,<code>argv[1]</code>的类型为<code>char</code>需要转换为整型.</p>\n</blockquote>\n<p>通过这个可执行文件,我们周期性地将时间戳和内容写入了<code>/tmp/addtest</code>文件.<br>最后我们写一个简单的Makefile:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim $vim ~/temp/addtest/files/src/Makefile</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addtest : addtest.o</span><br><span class=\"line\">\t$(CC) addtest.o -o addtest</span><br><span class=\"line\"></span><br><span class=\"line\">addtest.o : addtest.c</span><br><span class=\"line\">\t$(CC) -c addtest.c</span><br><span class=\"line\"></span><br><span class=\"line\">clean :</span><br><span class=\"line\">\trm *.o addtest</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"View\"><a href=\"#View\" class=\"headerlink\" title=\"View\"></a>View</h3><p>上一节,我们已经根据配置将指定的内容周期性地写入了<code>/tmp/addtest</code>.在<strong>controller</strong>那一节,我们的函数<code>action_info</code>读取了<code>/tmp/addtest</code>中的内容并访问指定页面<code>/usr/lib/lua/luci/view/addtest_info.htm</code>,同时将读取的内容通过变量<code>info</code>传递过去.</p>\n<p>下面我们来编辑这个页面,<br><code>$vim ~/temp/addtest/files/usr/lib/lua/luci/view/addtest_info.htm</code><br>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%+header%&gt;</span><br><span class=\"line\">&lt;h2&gt;&lt;a id=&quot;content&quot; name=&quot;content&quot;&gt;&lt;%:Addtest Info%&gt;&lt;/a&gt;&lt;/h2&gt;</span><br><span class=\"line\">&lt;div id=&quot;content_addtest_info&quot;&gt;</span><br><span class=\"line\">&lt;textarea readonly=&quot;readonly&quot; wrap=&quot;off&quot; rows=&quot;&lt;%=info:cmatch(&quot;\\n&quot;)+2%&gt;&quot; id=&quot;info&quot;&gt;&lt;%=info:pcdata()%&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;%+footer%&gt;</span><br></pre></td></tr></table></figure>\n<p>这部分和传统的<code>html</code>很类似,我主要是根据其他页面照猫画虎,不是很美观.有机会还要加强这个方面的学习.</p>\n<hr>\n<h3 id=\"Makefile\"><a href=\"#Makefile\" class=\"headerlink\" title=\"Makefile\"></a>Makefile</h3><p>不知不觉,我们居然已经将代码全部写完了,竟还有点恋恋不舍呢.下面我们用一个<code>Makefie</code>文件将它们打包生成一个ipk文件.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$vim ~/temp/addtest/Makefile</span><br></pre></td></tr></table></figure>\n<p>代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include $(TOPDIR)/rules.mk</span><br><span class=\"line\"></span><br><span class=\"line\">PKG_NAME:=addtest</span><br><span class=\"line\">PKG_VERSION=1.0</span><br><span class=\"line\">PKG_RELEASE:=1</span><br><span class=\"line\"></span><br><span class=\"line\">PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_NAME)</span><br><span class=\"line\"></span><br><span class=\"line\">include $(INCLUDE_DIR)/package.mk</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/addtest</span><br><span class=\"line\">\tSECTION:=utils</span><br><span class=\"line\">\tCATEGORY:=Utilities</span><br><span class=\"line\">\tTITLE:=Addtest--print something to /var/addtest</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/addtest/description</span><br><span class=\"line\">\tIt&apos;s a test,print something to /var/addtest cyclicaliy</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Prepare</span><br><span class=\"line\">\tmkdir -p $(PKG_BUILD_DIR)</span><br><span class=\"line\">\t$(CP) ./src/* $(PKG_BUILD_DIR)/</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/addtest/postinst</span><br><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">rm -rf /tmp/luci*</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Configure</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Build/Compile</span><br><span class=\"line\">\t$(call Build/Compile/Default)</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">define Package/$(PKG_NAME)/install</span><br><span class=\"line\">\t$(CP) ./files/* $(1)/</span><br><span class=\"line\">\t$(INSTALL_DIR) $(1)/bin</span><br><span class=\"line\">\t$(INSTALL_BIN)  $(PKG_BUILD_DIR)/addtest  $(1)/bin</span><br><span class=\"line\">endef</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call BuildPackage,$(PKG_NAME)))</span><br></pre></td></tr></table></figure>\n<p>Makefile的解释,请参见<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\">拙作</a>.我们这里稍作补充.</p>\n<p>26~29行</p>\n<blockquote>\n<p>  由于luci会将模块加载到<code>/tmp</code>目录下运行,每次新加载luci模块后,需要执行<code>$rm -rf /tmp/luci*</code>.这里表示安装了ipk之后,将会自动执行删除命令,重新载入.</p>\n</blockquote>\n<p>39行</p>\n<blockquote>\n<p>  $(1)是传入的参数,表示系统镜像目录,你可以将之视为路由器最后的文件系统.所以这句的意思就是将我们<code>files</code>下的内容拷贝到路由器的文件系统中.这也是我们为什么要建立一开始那么复杂的目录树的原因.</p>\n</blockquote>\n<hr>\n<h3 id=\"编译-amp-安装\"><a href=\"#编译-amp-安装\" class=\"headerlink\" title=\"编译&amp;安装\"></a>编译&amp;安装</h3><p>简直像裹脚布一样,又臭又长.不要说读了,我自己写的都快有点受不了了.读到这里的人真是辛苦了,下面到了我们收获果实的时候了.<br>将文件拷贝到源码目录的<code>package</code>目录下.其余部分,请参考<a href=\"http://www.cnblogs.com/chengyi818/p/4774043.html\">拙作</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$cp ~/temp/addtest ~/openwrt/package</span><br></pre></td></tr></table></figure>\n<p>把它拷贝到你的开发板中,试试看.</p>\n<hr>\n<h3 id=\"调试方法\"><a href=\"#调试方法\" class=\"headerlink\" title=\"调试方法\"></a>调试方法</h3><p>我们当然希望可以一次成功,不过世间不如意之事十之八九.我来谈谈我自己的调试方法.</p>\n<p><code>src</code>部分</p>\n<blockquote>\n<p>  <code>src</code>文件下有<code>Makefile</code>文件,你可以直接在编译机上执行<code>$make</code>生成可执行文件<code>addtest</code>,然后在编译机上<code>src</code>目录下执行<code>$./addtest 参数1 参数2</code>.最后记得执行<code>$make clean</code>.</p>\n</blockquote>\n<p><code>luci</code>部分</p>\n<blockquote>\n<p>  将ipk安装到开发板后,可以通过串口或者ssh的方式登录开发板,然后直接在开发板中修改文件内容,再执行<code>$rm -rf /tmp/luci*</code>.最后重新载入设备页面.</p>\n</blockquote>\n<hr>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>不知不觉到了分手的时候,竟感觉有些忧桑呢.</p>\n<h3 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h3><ol>\n<li>我自己刚接触学习,难免很多不足</li>\n<li>页面输入没有防呆机制</li>\n</ol>\n<p>多多包含:)</p>\n<h3 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h3><p>除了官方文档之外,这两篇博客给我很多指导:<br><a href=\"http://www.tuicool.com/articles/zaUNfy\">开发OpenWrt路由器上LuCI的模块</a>,<a href=\"http://blog.chinaunix.net/uid-23780428-id-4367351.html\"> openwrt中luci学习笔记</a>.<br>我的同事宁财神给我们做了luci的框架介绍,同时在我的调试过程中,给予我很多帮助.<br>最后感谢管工给出这样一个练习题,虽然很小巧,居然可以贯通整个知识体系.我现在还是为他的高屋建瓴感到惊叹.</p>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h3><p>在整篇文章学习完成后,我们希望可以回答以下几个问题:</p>\n<blockquote>\n<p>1.MVC是什么?各部分有哪些功能?</p>\n<p>2.怎么在页面上指定位置做出一个子页面.</p>\n<p>3.怎么将配置写入到路由器中,又怎么读取?</p>\n<p>4.页面怎么和可执行文件关联起来?或者通俗地说,页面点了一下,开发板怎么就执行了命令.</p>\n<p>5.ipk怎么生成,安装过程中发生了什么?</p>\n</blockquote>"},{"layout":"post","title":"openwrt目录概述","comments":1,"analytics":true,"_content":"\n\n## 前言\n\n&emsp;这段时间总是在和[openwrt](https://en.wikipedia.org/wiki/OpenWrt)打交道,之前也零零散散地写过一点，还是希望能有点体系。还记得我刚看到源代码的时候，觉得无从下手.我想从Makefile的整个执行过程入手,搞清楚编译源代码的几个小时中,到底发生了哪些故事.\n\n&emsp;本文是这个系列的第一篇.主要讲一下我对openwrt整个目录结构的理解.我们将源代码从[官方下载](https://dev.openwrt.org/wiki/GetSource)而来的目录称之为原始目录,将编译后生成的目录称之为生成目录,分两部分介绍各个目录.\n\n<!--more-->\n\n---\n\n## 原始目录\n\n下载源码后,源文件如下图所示,下面我们来一一解释;\n![原始目录](http://img.blog.csdn.net/20151213153906453)\n#### 1. scripts\n\n存放了一些脚本,使用了bash,python,perl等多种脚本语言.编译过程中,用于第三方软件包管理的feeds文件也是在这个目录当中.在编译过程中,使用到的脚本也统一放在这个目录中.\n\n#### 2. tools\n\n编译时,主机需要使用一些工具软件,`tools` 里包含了获取和编译这些工具的命令.软件包里面有Makefile文件,有的还包含了patch.每个Makefile当中都有一句`$(eval $(call HostBuild))`,这表明编译这个工具是为了在**主机**上使用的.\n\n#### 3. config\n\n存放着整个系统的配置文件\n\n#### 4. docs\n\n包含了整个宿主机的文件源码的介绍, 里面还有Makefile为目标系统生成docs.使用`make -C docs/`可以为目标系统生成文档.\n\n#### 5. toolchain\n\n嵌入式的童鞋应该都知道交叉编译链,这个文件中存放的就是编译交叉编译链的软件包.包括:`binutils,gcc,libc`等等.\n\n#### 6. target\n\nopenwrt的源码可以编译出各个平台适用的二进制文件,各平台在这个目录里定义了firmware和kernel的编译过程。\n\n#### 7. package\n\n存放了openwrt系统中适用的软件包,包含针对各个软件包的Makefile。openwrt定义了一套Makefile模板.各软件参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等。在二次开发过程中,这个文件夹我们会经常打交道.\n事实上,通过`./scripts/feed update -a和./scripts/feed install -a`的软件包也会存放在这个目录之中.\n\n#### 8. include\n\nopenwrt的Makefile都存放在这里。文件名为 *.mk 。这里的文件上是在Makefile里被include的,类似于库文件.这些文件定义了编译过程.\n\n#### 9. 其他\n\n主要目录就是前面提及的8个,剩下的是单个文件.\n\n##### 9.1 Makefile:\n\n> 在顶层目录执行`make`命令的入口文件.\n\n##### 9.2 rules.mk\n\n> 定义了Makefile中使用的一些通用变量和函数\n\n##### 9.3 Config.in\n\n> 在`include/toplevel.mk`中我们可以看到,这是和`make menuconfig`相关联的文件.\n\n##### 9.4 feeds.conf.default\n\n> 是下载第三方一些软件包时所使用的地址\n\n##### 9.5 LICENSE & README\n\n>即软件许可证和软件基本说明.其中README描述了编译软件的基本过程和依赖文件.\n\n至此我们把原始目录大致浏览了一遍,下面我们看看生成目录.\n\n## 生成目录\n\n在我们编译完成后除了下载的源码文件,多出来的部分很明显就是编译过程中新生成的.如下图:\n![生成目录](http://img.blog.csdn.net/20151213171412350)\n\n#### 1. feeds\n\nopenwrt的附加软件包管理器的扩展包索引目录.有点绕,简单来说就是下载管理软件包的.默认的`feeds`下载有`packages、management、luci、routing、telephony`。如要下载其他的软件包，需打开源码根目录下面的feeds.conf.default文件，去掉相应软件包前面的#号，然后更新源:\n`./scripts/feeds update -a`\n安装下载好的包:\n`./scripts/feeds install -a`\n\n#### 2. build_dir\n\n在前面的原始目录中,我们提到了host工具,toolchain工具还有目标文件.openwrt将在这个目录中展开各个软件包,进行编译.所以这个文件夹中包含3个子文件夹:\n\n##### 2.1 host\n\n>  在该文件夹中编译主机使用的工具软件\n\n##### 2.2 toolchain-XXX\n\n> 在该文件夹中编译交叉工具链\n\n##### 2.3 target-XXX\n\n> 在此编译目标平台的目标文件,包括各个软件包和内核文件.\n\n#### 3. bin\n\n保存编译完成后的二进制文件,包括:完整的bin文件,所有的ipk文件.\n\n#### 4. dl\n\n在编译过程中使用的很多软件,刚开始下载源码并没有包含,而是在编译过程中从其他服务器下载的,这里是统一的保存目录\n\n#### 5. staging_dir\n\n用于保存在`build_dir`目录中编译完成的软件.所以这里也和`build_dir`有同样的子目录结构.\n比如,在`target-XXX`文件夹中保存了目标平台编译好的头文件,库文件.在我们开发自己的ipk文件时,编译过程中,预处理头文件,链接动态库,静态库都是到这个子文件夹中.\n\n#### 6.tmp\n\n从名字来看,是临时文件夹.在编译过程中,有大量中间临时文件需要保存,都是在这里.\n\n#### 7.logs\n\n这个文件夹,有时可以看到,有时没有.这是因为这个文件夹保存的是,编译过程中出错的信息,只有当编译出错了才会出现.我们可以从这里获取信息,从而分析我们的软件编译为什么没有完成.\n\n至此我们把openwrt的目录结构大体浏览了一遍.\n\n## 尾记\n\n1. 本文中不少内容都是从网上看到的,时间长了,我已经找不到出处了.这也是我写博客的一个原因,我从互联网学到不少知识,现在再反馈给网络.感谢所有有自由共享精神的朋友.\n2. 知识学习是不断递进的过程.这部分知识是我目前知道的一个大概,还不够深刻.更深入的学习Makefile和openwrt之后,再来慢慢更新.\n","source":"_posts/2015-12-13-openwrt源码目录概述.md","raw":"---\nlayout: post\ntitle: openwrt目录概述\ncategory: openwrt\ntags:  [openwrt,makefile,深度]\ncomments: true\nanalytics: true\n---\n\n\n## 前言\n\n&emsp;这段时间总是在和[openwrt](https://en.wikipedia.org/wiki/OpenWrt)打交道,之前也零零散散地写过一点，还是希望能有点体系。还记得我刚看到源代码的时候，觉得无从下手.我想从Makefile的整个执行过程入手,搞清楚编译源代码的几个小时中,到底发生了哪些故事.\n\n&emsp;本文是这个系列的第一篇.主要讲一下我对openwrt整个目录结构的理解.我们将源代码从[官方下载](https://dev.openwrt.org/wiki/GetSource)而来的目录称之为原始目录,将编译后生成的目录称之为生成目录,分两部分介绍各个目录.\n\n<!--more-->\n\n---\n\n## 原始目录\n\n下载源码后,源文件如下图所示,下面我们来一一解释;\n![原始目录](http://img.blog.csdn.net/20151213153906453)\n#### 1. scripts\n\n存放了一些脚本,使用了bash,python,perl等多种脚本语言.编译过程中,用于第三方软件包管理的feeds文件也是在这个目录当中.在编译过程中,使用到的脚本也统一放在这个目录中.\n\n#### 2. tools\n\n编译时,主机需要使用一些工具软件,`tools` 里包含了获取和编译这些工具的命令.软件包里面有Makefile文件,有的还包含了patch.每个Makefile当中都有一句`$(eval $(call HostBuild))`,这表明编译这个工具是为了在**主机**上使用的.\n\n#### 3. config\n\n存放着整个系统的配置文件\n\n#### 4. docs\n\n包含了整个宿主机的文件源码的介绍, 里面还有Makefile为目标系统生成docs.使用`make -C docs/`可以为目标系统生成文档.\n\n#### 5. toolchain\n\n嵌入式的童鞋应该都知道交叉编译链,这个文件中存放的就是编译交叉编译链的软件包.包括:`binutils,gcc,libc`等等.\n\n#### 6. target\n\nopenwrt的源码可以编译出各个平台适用的二进制文件,各平台在这个目录里定义了firmware和kernel的编译过程。\n\n#### 7. package\n\n存放了openwrt系统中适用的软件包,包含针对各个软件包的Makefile。openwrt定义了一套Makefile模板.各软件参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等。在二次开发过程中,这个文件夹我们会经常打交道.\n事实上,通过`./scripts/feed update -a和./scripts/feed install -a`的软件包也会存放在这个目录之中.\n\n#### 8. include\n\nopenwrt的Makefile都存放在这里。文件名为 *.mk 。这里的文件上是在Makefile里被include的,类似于库文件.这些文件定义了编译过程.\n\n#### 9. 其他\n\n主要目录就是前面提及的8个,剩下的是单个文件.\n\n##### 9.1 Makefile:\n\n> 在顶层目录执行`make`命令的入口文件.\n\n##### 9.2 rules.mk\n\n> 定义了Makefile中使用的一些通用变量和函数\n\n##### 9.3 Config.in\n\n> 在`include/toplevel.mk`中我们可以看到,这是和`make menuconfig`相关联的文件.\n\n##### 9.4 feeds.conf.default\n\n> 是下载第三方一些软件包时所使用的地址\n\n##### 9.5 LICENSE & README\n\n>即软件许可证和软件基本说明.其中README描述了编译软件的基本过程和依赖文件.\n\n至此我们把原始目录大致浏览了一遍,下面我们看看生成目录.\n\n## 生成目录\n\n在我们编译完成后除了下载的源码文件,多出来的部分很明显就是编译过程中新生成的.如下图:\n![生成目录](http://img.blog.csdn.net/20151213171412350)\n\n#### 1. feeds\n\nopenwrt的附加软件包管理器的扩展包索引目录.有点绕,简单来说就是下载管理软件包的.默认的`feeds`下载有`packages、management、luci、routing、telephony`。如要下载其他的软件包，需打开源码根目录下面的feeds.conf.default文件，去掉相应软件包前面的#号，然后更新源:\n`./scripts/feeds update -a`\n安装下载好的包:\n`./scripts/feeds install -a`\n\n#### 2. build_dir\n\n在前面的原始目录中,我们提到了host工具,toolchain工具还有目标文件.openwrt将在这个目录中展开各个软件包,进行编译.所以这个文件夹中包含3个子文件夹:\n\n##### 2.1 host\n\n>  在该文件夹中编译主机使用的工具软件\n\n##### 2.2 toolchain-XXX\n\n> 在该文件夹中编译交叉工具链\n\n##### 2.3 target-XXX\n\n> 在此编译目标平台的目标文件,包括各个软件包和内核文件.\n\n#### 3. bin\n\n保存编译完成后的二进制文件,包括:完整的bin文件,所有的ipk文件.\n\n#### 4. dl\n\n在编译过程中使用的很多软件,刚开始下载源码并没有包含,而是在编译过程中从其他服务器下载的,这里是统一的保存目录\n\n#### 5. staging_dir\n\n用于保存在`build_dir`目录中编译完成的软件.所以这里也和`build_dir`有同样的子目录结构.\n比如,在`target-XXX`文件夹中保存了目标平台编译好的头文件,库文件.在我们开发自己的ipk文件时,编译过程中,预处理头文件,链接动态库,静态库都是到这个子文件夹中.\n\n#### 6.tmp\n\n从名字来看,是临时文件夹.在编译过程中,有大量中间临时文件需要保存,都是在这里.\n\n#### 7.logs\n\n这个文件夹,有时可以看到,有时没有.这是因为这个文件夹保存的是,编译过程中出错的信息,只有当编译出错了才会出现.我们可以从这里获取信息,从而分析我们的软件编译为什么没有完成.\n\n至此我们把openwrt的目录结构大体浏览了一遍.\n\n## 尾记\n\n1. 本文中不少内容都是从网上看到的,时间长了,我已经找不到出处了.这也是我写博客的一个原因,我从互联网学到不少知识,现在再反馈给网络.感谢所有有自由共享精神的朋友.\n2. 知识学习是不断递进的过程.这部分知识是我目前知道的一个大概,还不够深刻.更深入的学习Makefile和openwrt之后,再来慢慢更新.\n","slug":"openwrt源码目录概述","published":1,"date":"2015-12-12T16:00:00.000Z","updated":"2016-04-07T07:01:48.633Z","photos":[],"link":"","_id":"cimpzdpnp000hm1f1cw6zyxtk","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;这段时间总是在和<a href=\"https://en.wikipedia.org/wiki/OpenWrt\" target=\"_blank\" rel=\"external\">openwrt</a>打交道,之前也零零散散地写过一点，还是希望能有点体系。还记得我刚看到源代码的时候，觉得无从下手.我想从Makefile的整个执行过程入手,搞清楚编译源代码的几个小时中,到底发生了哪些故事.</p>\n<p>&emsp;本文是这个系列的第一篇.主要讲一下我对openwrt整个目录结构的理解.我们将源代码从<a href=\"https://dev.openwrt.org/wiki/GetSource\" target=\"_blank\" rel=\"external\">官方下载</a>而来的目录称之为原始目录,将编译后生成的目录称之为生成目录,分两部分介绍各个目录.</p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"原始目录\"><a href=\"#原始目录\" class=\"headerlink\" title=\"原始目录\"></a>原始目录</h2><p>下载源码后,源文件如下图所示,下面我们来一一解释;<br><img src=\"http://img.blog.csdn.net/20151213153906453\" alt=\"原始目录\"></p>\n<h4 id=\"1-scripts\"><a href=\"#1-scripts\" class=\"headerlink\" title=\"1. scripts\"></a>1. scripts</h4><p>存放了一些脚本,使用了bash,python,perl等多种脚本语言.编译过程中,用于第三方软件包管理的feeds文件也是在这个目录当中.在编译过程中,使用到的脚本也统一放在这个目录中.</p>\n<h4 id=\"2-tools\"><a href=\"#2-tools\" class=\"headerlink\" title=\"2. tools\"></a>2. tools</h4><p>编译时,主机需要使用一些工具软件,<code>tools</code> 里包含了获取和编译这些工具的命令.软件包里面有Makefile文件,有的还包含了patch.每个Makefile当中都有一句<code>$(eval $(call HostBuild))</code>,这表明编译这个工具是为了在<strong>主机</strong>上使用的.</p>\n<h4 id=\"3-config\"><a href=\"#3-config\" class=\"headerlink\" title=\"3. config\"></a>3. config</h4><p>存放着整个系统的配置文件</p>\n<h4 id=\"4-docs\"><a href=\"#4-docs\" class=\"headerlink\" title=\"4. docs\"></a>4. docs</h4><p>包含了整个宿主机的文件源码的介绍, 里面还有Makefile为目标系统生成docs.使用<code>make -C docs/</code>可以为目标系统生成文档.</p>\n<h4 id=\"5-toolchain\"><a href=\"#5-toolchain\" class=\"headerlink\" title=\"5. toolchain\"></a>5. toolchain</h4><p>嵌入式的童鞋应该都知道交叉编译链,这个文件中存放的就是编译交叉编译链的软件包.包括:<code>binutils,gcc,libc</code>等等.</p>\n<h4 id=\"6-target\"><a href=\"#6-target\" class=\"headerlink\" title=\"6. target\"></a>6. target</h4><p>openwrt的源码可以编译出各个平台适用的二进制文件,各平台在这个目录里定义了firmware和kernel的编译过程。</p>\n<h4 id=\"7-package\"><a href=\"#7-package\" class=\"headerlink\" title=\"7. package\"></a>7. package</h4><p>存放了openwrt系统中适用的软件包,包含针对各个软件包的Makefile。openwrt定义了一套Makefile模板.各软件参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等。在二次开发过程中,这个文件夹我们会经常打交道.<br>事实上,通过<code>./scripts/feed update -a和./scripts/feed install -a</code>的软件包也会存放在这个目录之中.</p>\n<h4 id=\"8-include\"><a href=\"#8-include\" class=\"headerlink\" title=\"8. include\"></a>8. include</h4><p>openwrt的Makefile都存放在这里。文件名为 *.mk 。这里的文件上是在Makefile里被include的,类似于库文件.这些文件定义了编译过程.</p>\n<h4 id=\"9-其他\"><a href=\"#9-其他\" class=\"headerlink\" title=\"9. 其他\"></a>9. 其他</h4><p>主要目录就是前面提及的8个,剩下的是单个文件.</p>\n<h5 id=\"9-1-Makefile\"><a href=\"#9-1-Makefile\" class=\"headerlink\" title=\"9.1 Makefile:\"></a>9.1 Makefile:</h5><blockquote>\n<p>在顶层目录执行<code>make</code>命令的入口文件.</p>\n</blockquote>\n<h5 id=\"9-2-rules-mk\"><a href=\"#9-2-rules-mk\" class=\"headerlink\" title=\"9.2 rules.mk\"></a>9.2 rules.mk</h5><blockquote>\n<p>定义了Makefile中使用的一些通用变量和函数</p>\n</blockquote>\n<h5 id=\"9-3-Config-in\"><a href=\"#9-3-Config-in\" class=\"headerlink\" title=\"9.3 Config.in\"></a>9.3 Config.in</h5><blockquote>\n<p>在<code>include/toplevel.mk</code>中我们可以看到,这是和<code>make menuconfig</code>相关联的文件.</p>\n</blockquote>\n<h5 id=\"9-4-feeds-conf-default\"><a href=\"#9-4-feeds-conf-default\" class=\"headerlink\" title=\"9.4 feeds.conf.default\"></a>9.4 feeds.conf.default</h5><blockquote>\n<p>是下载第三方一些软件包时所使用的地址</p>\n</blockquote>\n<h5 id=\"9-5-LICENSE-amp-README\"><a href=\"#9-5-LICENSE-amp-README\" class=\"headerlink\" title=\"9.5 LICENSE &amp; README\"></a>9.5 LICENSE &amp; README</h5><blockquote>\n<p>即软件许可证和软件基本说明.其中README描述了编译软件的基本过程和依赖文件.</p>\n</blockquote>\n<p>至此我们把原始目录大致浏览了一遍,下面我们看看生成目录.</p>\n<h2 id=\"生成目录\"><a href=\"#生成目录\" class=\"headerlink\" title=\"生成目录\"></a>生成目录</h2><p>在我们编译完成后除了下载的源码文件,多出来的部分很明显就是编译过程中新生成的.如下图:<br><img src=\"http://img.blog.csdn.net/20151213171412350\" alt=\"生成目录\"></p>\n<h4 id=\"1-feeds\"><a href=\"#1-feeds\" class=\"headerlink\" title=\"1. feeds\"></a>1. feeds</h4><p>openwrt的附加软件包管理器的扩展包索引目录.有点绕,简单来说就是下载管理软件包的.默认的<code>feeds</code>下载有<code>packages、management、luci、routing、telephony</code>。如要下载其他的软件包，需打开源码根目录下面的feeds.conf.default文件，去掉相应软件包前面的#号，然后更新源:<br><code>./scripts/feeds update -a</code><br>安装下载好的包:<br><code>./scripts/feeds install -a</code></p>\n<h4 id=\"2-build-dir\"><a href=\"#2-build-dir\" class=\"headerlink\" title=\"2. build_dir\"></a>2. build_dir</h4><p>在前面的原始目录中,我们提到了host工具,toolchain工具还有目标文件.openwrt将在这个目录中展开各个软件包,进行编译.所以这个文件夹中包含3个子文件夹:</p>\n<h5 id=\"2-1-host\"><a href=\"#2-1-host\" class=\"headerlink\" title=\"2.1 host\"></a>2.1 host</h5><blockquote>\n<p> 在该文件夹中编译主机使用的工具软件</p>\n</blockquote>\n<h5 id=\"2-2-toolchain-XXX\"><a href=\"#2-2-toolchain-XXX\" class=\"headerlink\" title=\"2.2 toolchain-XXX\"></a>2.2 toolchain-XXX</h5><blockquote>\n<p>在该文件夹中编译交叉工具链</p>\n</blockquote>\n<h5 id=\"2-3-target-XXX\"><a href=\"#2-3-target-XXX\" class=\"headerlink\" title=\"2.3 target-XXX\"></a>2.3 target-XXX</h5><blockquote>\n<p>在此编译目标平台的目标文件,包括各个软件包和内核文件.</p>\n</blockquote>\n<h4 id=\"3-bin\"><a href=\"#3-bin\" class=\"headerlink\" title=\"3. bin\"></a>3. bin</h4><p>保存编译完成后的二进制文件,包括:完整的bin文件,所有的ipk文件.</p>\n<h4 id=\"4-dl\"><a href=\"#4-dl\" class=\"headerlink\" title=\"4. dl\"></a>4. dl</h4><p>在编译过程中使用的很多软件,刚开始下载源码并没有包含,而是在编译过程中从其他服务器下载的,这里是统一的保存目录</p>\n<h4 id=\"5-staging-dir\"><a href=\"#5-staging-dir\" class=\"headerlink\" title=\"5. staging_dir\"></a>5. staging_dir</h4><p>用于保存在<code>build_dir</code>目录中编译完成的软件.所以这里也和<code>build_dir</code>有同样的子目录结构.<br>比如,在<code>target-XXX</code>文件夹中保存了目标平台编译好的头文件,库文件.在我们开发自己的ipk文件时,编译过程中,预处理头文件,链接动态库,静态库都是到这个子文件夹中.</p>\n<h4 id=\"6-tmp\"><a href=\"#6-tmp\" class=\"headerlink\" title=\"6.tmp\"></a>6.tmp</h4><p>从名字来看,是临时文件夹.在编译过程中,有大量中间临时文件需要保存,都是在这里.</p>\n<h4 id=\"7-logs\"><a href=\"#7-logs\" class=\"headerlink\" title=\"7.logs\"></a>7.logs</h4><p>这个文件夹,有时可以看到,有时没有.这是因为这个文件夹保存的是,编译过程中出错的信息,只有当编译出错了才会出现.我们可以从这里获取信息,从而分析我们的软件编译为什么没有完成.</p>\n<p>至此我们把openwrt的目录结构大体浏览了一遍.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><ol>\n<li>本文中不少内容都是从网上看到的,时间长了,我已经找不到出处了.这也是我写博客的一个原因,我从互联网学到不少知识,现在再反馈给网络.感谢所有有自由共享精神的朋友.</li>\n<li>知识学习是不断递进的过程.这部分知识是我目前知道的一个大概,还不够深刻.更深入的学习Makefile和openwrt之后,再来慢慢更新.</li>\n</ol>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;这段时间总是在和<a href=\"https://en.wikipedia.org/wiki/OpenWrt\">openwrt</a>打交道,之前也零零散散地写过一点，还是希望能有点体系。还记得我刚看到源代码的时候，觉得无从下手.我想从Makefile的整个执行过程入手,搞清楚编译源代码的几个小时中,到底发生了哪些故事.</p>\n<p>&emsp;本文是这个系列的第一篇.主要讲一下我对openwrt整个目录结构的理解.我们将源代码从<a href=\"https://dev.openwrt.org/wiki/GetSource\">官方下载</a>而来的目录称之为原始目录,将编译后生成的目录称之为生成目录,分两部分介绍各个目录.</p>","more":"<hr>\n<h2 id=\"原始目录\"><a href=\"#原始目录\" class=\"headerlink\" title=\"原始目录\"></a>原始目录</h2><p>下载源码后,源文件如下图所示,下面我们来一一解释;<br><img src=\"http://img.blog.csdn.net/20151213153906453\" alt=\"原始目录\"></p>\n<h4 id=\"1-scripts\"><a href=\"#1-scripts\" class=\"headerlink\" title=\"1. scripts\"></a>1. scripts</h4><p>存放了一些脚本,使用了bash,python,perl等多种脚本语言.编译过程中,用于第三方软件包管理的feeds文件也是在这个目录当中.在编译过程中,使用到的脚本也统一放在这个目录中.</p>\n<h4 id=\"2-tools\"><a href=\"#2-tools\" class=\"headerlink\" title=\"2. tools\"></a>2. tools</h4><p>编译时,主机需要使用一些工具软件,<code>tools</code> 里包含了获取和编译这些工具的命令.软件包里面有Makefile文件,有的还包含了patch.每个Makefile当中都有一句<code>$(eval $(call HostBuild))</code>,这表明编译这个工具是为了在<strong>主机</strong>上使用的.</p>\n<h4 id=\"3-config\"><a href=\"#3-config\" class=\"headerlink\" title=\"3. config\"></a>3. config</h4><p>存放着整个系统的配置文件</p>\n<h4 id=\"4-docs\"><a href=\"#4-docs\" class=\"headerlink\" title=\"4. docs\"></a>4. docs</h4><p>包含了整个宿主机的文件源码的介绍, 里面还有Makefile为目标系统生成docs.使用<code>make -C docs/</code>可以为目标系统生成文档.</p>\n<h4 id=\"5-toolchain\"><a href=\"#5-toolchain\" class=\"headerlink\" title=\"5. toolchain\"></a>5. toolchain</h4><p>嵌入式的童鞋应该都知道交叉编译链,这个文件中存放的就是编译交叉编译链的软件包.包括:<code>binutils,gcc,libc</code>等等.</p>\n<h4 id=\"6-target\"><a href=\"#6-target\" class=\"headerlink\" title=\"6. target\"></a>6. target</h4><p>openwrt的源码可以编译出各个平台适用的二进制文件,各平台在这个目录里定义了firmware和kernel的编译过程。</p>\n<h4 id=\"7-package\"><a href=\"#7-package\" class=\"headerlink\" title=\"7. package\"></a>7. package</h4><p>存放了openwrt系统中适用的软件包,包含针对各个软件包的Makefile。openwrt定义了一套Makefile模板.各软件参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等。在二次开发过程中,这个文件夹我们会经常打交道.<br>事实上,通过<code>./scripts/feed update -a和./scripts/feed install -a</code>的软件包也会存放在这个目录之中.</p>\n<h4 id=\"8-include\"><a href=\"#8-include\" class=\"headerlink\" title=\"8. include\"></a>8. include</h4><p>openwrt的Makefile都存放在这里。文件名为 *.mk 。这里的文件上是在Makefile里被include的,类似于库文件.这些文件定义了编译过程.</p>\n<h4 id=\"9-其他\"><a href=\"#9-其他\" class=\"headerlink\" title=\"9. 其他\"></a>9. 其他</h4><p>主要目录就是前面提及的8个,剩下的是单个文件.</p>\n<h5 id=\"9-1-Makefile\"><a href=\"#9-1-Makefile\" class=\"headerlink\" title=\"9.1 Makefile:\"></a>9.1 Makefile:</h5><blockquote>\n<p>在顶层目录执行<code>make</code>命令的入口文件.</p>\n</blockquote>\n<h5 id=\"9-2-rules-mk\"><a href=\"#9-2-rules-mk\" class=\"headerlink\" title=\"9.2 rules.mk\"></a>9.2 rules.mk</h5><blockquote>\n<p>定义了Makefile中使用的一些通用变量和函数</p>\n</blockquote>\n<h5 id=\"9-3-Config-in\"><a href=\"#9-3-Config-in\" class=\"headerlink\" title=\"9.3 Config.in\"></a>9.3 Config.in</h5><blockquote>\n<p>在<code>include/toplevel.mk</code>中我们可以看到,这是和<code>make menuconfig</code>相关联的文件.</p>\n</blockquote>\n<h5 id=\"9-4-feeds-conf-default\"><a href=\"#9-4-feeds-conf-default\" class=\"headerlink\" title=\"9.4 feeds.conf.default\"></a>9.4 feeds.conf.default</h5><blockquote>\n<p>是下载第三方一些软件包时所使用的地址</p>\n</blockquote>\n<h5 id=\"9-5-LICENSE-amp-README\"><a href=\"#9-5-LICENSE-amp-README\" class=\"headerlink\" title=\"9.5 LICENSE &amp; README\"></a>9.5 LICENSE &amp; README</h5><blockquote>\n<p>即软件许可证和软件基本说明.其中README描述了编译软件的基本过程和依赖文件.</p>\n</blockquote>\n<p>至此我们把原始目录大致浏览了一遍,下面我们看看生成目录.</p>\n<h2 id=\"生成目录\"><a href=\"#生成目录\" class=\"headerlink\" title=\"生成目录\"></a>生成目录</h2><p>在我们编译完成后除了下载的源码文件,多出来的部分很明显就是编译过程中新生成的.如下图:<br><img src=\"http://img.blog.csdn.net/20151213171412350\" alt=\"生成目录\"></p>\n<h4 id=\"1-feeds\"><a href=\"#1-feeds\" class=\"headerlink\" title=\"1. feeds\"></a>1. feeds</h4><p>openwrt的附加软件包管理器的扩展包索引目录.有点绕,简单来说就是下载管理软件包的.默认的<code>feeds</code>下载有<code>packages、management、luci、routing、telephony</code>。如要下载其他的软件包，需打开源码根目录下面的feeds.conf.default文件，去掉相应软件包前面的#号，然后更新源:<br><code>./scripts/feeds update -a</code><br>安装下载好的包:<br><code>./scripts/feeds install -a</code></p>\n<h4 id=\"2-build-dir\"><a href=\"#2-build-dir\" class=\"headerlink\" title=\"2. build_dir\"></a>2. build_dir</h4><p>在前面的原始目录中,我们提到了host工具,toolchain工具还有目标文件.openwrt将在这个目录中展开各个软件包,进行编译.所以这个文件夹中包含3个子文件夹:</p>\n<h5 id=\"2-1-host\"><a href=\"#2-1-host\" class=\"headerlink\" title=\"2.1 host\"></a>2.1 host</h5><blockquote>\n<p> 在该文件夹中编译主机使用的工具软件</p>\n</blockquote>\n<h5 id=\"2-2-toolchain-XXX\"><a href=\"#2-2-toolchain-XXX\" class=\"headerlink\" title=\"2.2 toolchain-XXX\"></a>2.2 toolchain-XXX</h5><blockquote>\n<p>在该文件夹中编译交叉工具链</p>\n</blockquote>\n<h5 id=\"2-3-target-XXX\"><a href=\"#2-3-target-XXX\" class=\"headerlink\" title=\"2.3 target-XXX\"></a>2.3 target-XXX</h5><blockquote>\n<p>在此编译目标平台的目标文件,包括各个软件包和内核文件.</p>\n</blockquote>\n<h4 id=\"3-bin\"><a href=\"#3-bin\" class=\"headerlink\" title=\"3. bin\"></a>3. bin</h4><p>保存编译完成后的二进制文件,包括:完整的bin文件,所有的ipk文件.</p>\n<h4 id=\"4-dl\"><a href=\"#4-dl\" class=\"headerlink\" title=\"4. dl\"></a>4. dl</h4><p>在编译过程中使用的很多软件,刚开始下载源码并没有包含,而是在编译过程中从其他服务器下载的,这里是统一的保存目录</p>\n<h4 id=\"5-staging-dir\"><a href=\"#5-staging-dir\" class=\"headerlink\" title=\"5. staging_dir\"></a>5. staging_dir</h4><p>用于保存在<code>build_dir</code>目录中编译完成的软件.所以这里也和<code>build_dir</code>有同样的子目录结构.<br>比如,在<code>target-XXX</code>文件夹中保存了目标平台编译好的头文件,库文件.在我们开发自己的ipk文件时,编译过程中,预处理头文件,链接动态库,静态库都是到这个子文件夹中.</p>\n<h4 id=\"6-tmp\"><a href=\"#6-tmp\" class=\"headerlink\" title=\"6.tmp\"></a>6.tmp</h4><p>从名字来看,是临时文件夹.在编译过程中,有大量中间临时文件需要保存,都是在这里.</p>\n<h4 id=\"7-logs\"><a href=\"#7-logs\" class=\"headerlink\" title=\"7.logs\"></a>7.logs</h4><p>这个文件夹,有时可以看到,有时没有.这是因为这个文件夹保存的是,编译过程中出错的信息,只有当编译出错了才会出现.我们可以从这里获取信息,从而分析我们的软件编译为什么没有完成.</p>\n<p>至此我们把openwrt的目录结构大体浏览了一遍.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><ol>\n<li>本文中不少内容都是从网上看到的,时间长了,我已经找不到出处了.这也是我写博客的一个原因,我从互联网学到不少知识,现在再反馈给网络.感谢所有有自由共享精神的朋友.</li>\n<li>知识学习是不断递进的过程.这部分知识是我目前知道的一个大概,还不够深刻.更深入的学习Makefile和openwrt之后,再来慢慢更新.</li>\n</ol>"},{"layout":"post","title":"openwrt编译过程概述","comments":1,"analytics":true,"_content":"\n## 前言\n又到了成胖子每周一博的时间了,本周是第三周.\n本周我们继续了解`openwrt`的编译过程,如果还有没写过简单ipk或者编译过openwrt的朋友,可以参见我之前的[博客](http://blog.csdn.net/icy_river/article/details/48260859)或者网上的其他[文章](https://www.baidu.com/s?wd=%E7%BC%96%E8%AF%91openwrt&rsv_spt=1&rsv_iqid=0x8f1fcaec0016b4fc&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_sug3=15&rsv_sug1=10)\n\n<!--more-->\n\n## 一 年轻的冲动\n为什么我在学习的过程中,有先学习整个编译过程和Makefile的冲动呢?\n> 1.我们知道电脑的运算速度是很快的.即使如此,一个完整的编译过程往往需要好几个小时.这中间到底发生了些什么?屏幕上一闪而过的像天书一样的东西,我怎么才能有所了解?\n>\n2.经历漫长的等待,我们得到了一个镜像bin文件.这里面到底包含了什么东西?我可以知道么?\n>\n3.编译单个ipk的时候,我按照模板写的Makefile怎么和我在书上见的长的不太一样呢?\n>\n4.在单个ipk中,怎么包含头文件,动态库,静态库?怎么解决依赖关系?\n>\n5.在输入`make menuconfig`之后,又发生了什么?弹出的图形界面中,怎么会有我放在`package`目录中的源码的信息?\n>\n6.有的时候,编译报错了.提示信息它认识我,我不认识它.我要怎么排查呢?\n>\n...\n\n零零散散的总是有很多疑问困扰着我.我相信有很多刚接触`openwrt`的朋友都和我有同感.而所有这些都是可以通过完整学习编译过程来解答的.这样想想是不是更有学习的动力了呢?\n\n## 二 学习曲线\n### 2.1 Makefile基本语法\n&emsp;我们知道编译过程是通过Makefile来控制的.这样而言,Makefile的基本语法就必须有所了解.网上有很多零散的资料往往不成体系.推荐阅读一个是陈皓自己写的和翻译的GNU Make的[手册](http://blog.csdn.net/haoel/article/details/2886).还是比较全的.英文还凑合的朋友,我推荐还是尽力读读官方的[手册](https://www.gnu.org/software/make/manual/),简介精炼,没事学点英文也是好的.后面的文章,假定读者对Makefile语法有所了解.\n\n### 2.2 bash基础\nMakefile中的执行部分(recipe)是有bash脚本组成的,所以我们同时应当对bash shell有所了解.\n\n### 2.3 world\n有了这两部分的预备知识,我们将开始我们的征途.我们的目标是**world**.\n\n## 三 编译过程概述\n\n###3.1 主机预装工具\n\n在编译源码之前,我们必须手动安装一部分工具 .\n\n```\nsudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils subversion libncurses5-dev ncurses-term zlib1g-dev\n```\n\n这部分是在执行编译工作之前的.\n\n### 3.2 编译host工具\n除了我们在第一步安装的工具,编译过程中还需要其他一些主机工具.这部分工具将首先编译.\n\n### 3.3 编译交叉工具链\n`openwrt`自带交叉编译链,当然在编译目标平台软件前,需要先编译.\n\n### 3.4 编译内核模块\n因为部分内核模块将会生成独立的ipk,所以内核模块需要首先编译.\n\n### 3.5 编译ipk\n这里将编译`package`目录下的各个软件包,这也是和我们最为息息相关的.之后的博客将会重点介绍这个部分.\n\n### 3.6 安装ipk\n将生成的ipk安装到文件系统之中(比如build_dir/target-XXX/root-ramips目录).\n\n### 3.7 编译内核\n在完成ipk编译之后,将会编译内核,压缩内核.同时使用mkimage工具,在内核前面生成一个用于uboot识别的头部.\n\n### 3.8 合成\n在最后一步,将squashfs格式的文件系统和内核连接在一起,即生成了目标镜像文件.\n\n## 尾声\n本周到此为止,下一篇我们将介绍根目录下的Makefile,从而知道为什么编译的大致过程是上面提及的八步.\n","source":"_posts/2015-12-20-我的Makefile学习冲动and编译过程概述.md","raw":"---\nlayout: post\ntitle: openwrt编译过程概述\ncategory: openwrt\ntags: [openwrt,makefile,深度]\ncomments: true\nanalytics: true\n---\n\n## 前言\n又到了成胖子每周一博的时间了,本周是第三周.\n本周我们继续了解`openwrt`的编译过程,如果还有没写过简单ipk或者编译过openwrt的朋友,可以参见我之前的[博客](http://blog.csdn.net/icy_river/article/details/48260859)或者网上的其他[文章](https://www.baidu.com/s?wd=%E7%BC%96%E8%AF%91openwrt&rsv_spt=1&rsv_iqid=0x8f1fcaec0016b4fc&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_sug3=15&rsv_sug1=10)\n\n<!--more-->\n\n## 一 年轻的冲动\n为什么我在学习的过程中,有先学习整个编译过程和Makefile的冲动呢?\n> 1.我们知道电脑的运算速度是很快的.即使如此,一个完整的编译过程往往需要好几个小时.这中间到底发生了些什么?屏幕上一闪而过的像天书一样的东西,我怎么才能有所了解?\n>\n2.经历漫长的等待,我们得到了一个镜像bin文件.这里面到底包含了什么东西?我可以知道么?\n>\n3.编译单个ipk的时候,我按照模板写的Makefile怎么和我在书上见的长的不太一样呢?\n>\n4.在单个ipk中,怎么包含头文件,动态库,静态库?怎么解决依赖关系?\n>\n5.在输入`make menuconfig`之后,又发生了什么?弹出的图形界面中,怎么会有我放在`package`目录中的源码的信息?\n>\n6.有的时候,编译报错了.提示信息它认识我,我不认识它.我要怎么排查呢?\n>\n...\n\n零零散散的总是有很多疑问困扰着我.我相信有很多刚接触`openwrt`的朋友都和我有同感.而所有这些都是可以通过完整学习编译过程来解答的.这样想想是不是更有学习的动力了呢?\n\n## 二 学习曲线\n### 2.1 Makefile基本语法\n&emsp;我们知道编译过程是通过Makefile来控制的.这样而言,Makefile的基本语法就必须有所了解.网上有很多零散的资料往往不成体系.推荐阅读一个是陈皓自己写的和翻译的GNU Make的[手册](http://blog.csdn.net/haoel/article/details/2886).还是比较全的.英文还凑合的朋友,我推荐还是尽力读读官方的[手册](https://www.gnu.org/software/make/manual/),简介精炼,没事学点英文也是好的.后面的文章,假定读者对Makefile语法有所了解.\n\n### 2.2 bash基础\nMakefile中的执行部分(recipe)是有bash脚本组成的,所以我们同时应当对bash shell有所了解.\n\n### 2.3 world\n有了这两部分的预备知识,我们将开始我们的征途.我们的目标是**world**.\n\n## 三 编译过程概述\n\n###3.1 主机预装工具\n\n在编译源码之前,我们必须手动安装一部分工具 .\n\n```\nsudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils subversion libncurses5-dev ncurses-term zlib1g-dev\n```\n\n这部分是在执行编译工作之前的.\n\n### 3.2 编译host工具\n除了我们在第一步安装的工具,编译过程中还需要其他一些主机工具.这部分工具将首先编译.\n\n### 3.3 编译交叉工具链\n`openwrt`自带交叉编译链,当然在编译目标平台软件前,需要先编译.\n\n### 3.4 编译内核模块\n因为部分内核模块将会生成独立的ipk,所以内核模块需要首先编译.\n\n### 3.5 编译ipk\n这里将编译`package`目录下的各个软件包,这也是和我们最为息息相关的.之后的博客将会重点介绍这个部分.\n\n### 3.6 安装ipk\n将生成的ipk安装到文件系统之中(比如build_dir/target-XXX/root-ramips目录).\n\n### 3.7 编译内核\n在完成ipk编译之后,将会编译内核,压缩内核.同时使用mkimage工具,在内核前面生成一个用于uboot识别的头部.\n\n### 3.8 合成\n在最后一步,将squashfs格式的文件系统和内核连接在一起,即生成了目标镜像文件.\n\n## 尾声\n本周到此为止,下一篇我们将介绍根目录下的Makefile,从而知道为什么编译的大致过程是上面提及的八步.\n","slug":"我的Makefile学习冲动and编译过程概述","published":1,"date":"2015-12-19T16:00:00.000Z","updated":"2016-04-07T07:01:48.637Z","photos":[],"link":"","_id":"cimpzdpnt000jm1f158jg2ukm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>又到了成胖子每周一博的时间了,本周是第三周.<br>本周我们继续了解<code>openwrt</code>的编译过程,如果还有没写过简单ipk或者编译过openwrt的朋友,可以参见我之前的<a href=\"http://blog.csdn.net/icy_river/article/details/48260859\" target=\"_blank\" rel=\"external\">博客</a>或者网上的其他<a href=\"https://www.baidu.com/s?wd=%E7%BC%96%E8%AF%91openwrt&amp;rsv_spt=1&amp;rsv_iqid=0x8f1fcaec0016b4fc&amp;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_sug3=15&amp;rsv_sug1=10\" target=\"_blank\" rel=\"external\">文章</a></p>\n<a id=\"more\"></a>\n<h2 id=\"一-年轻的冲动\"><a href=\"#一-年轻的冲动\" class=\"headerlink\" title=\"一 年轻的冲动\"></a>一 年轻的冲动</h2><p>为什么我在学习的过程中,有先学习整个编译过程和Makefile的冲动呢?</p>\n<blockquote>\n<p>1.我们知道电脑的运算速度是很快的.即使如此,一个完整的编译过程往往需要好几个小时.这中间到底发生了些什么?屏幕上一闪而过的像天书一样的东西,我怎么才能有所了解?</p>\n<p>2.经历漫长的等待,我们得到了一个镜像bin文件.这里面到底包含了什么东西?我可以知道么?</p>\n<p>3.编译单个ipk的时候,我按照模板写的Makefile怎么和我在书上见的长的不太一样呢?</p>\n<p>4.在单个ipk中,怎么包含头文件,动态库,静态库?怎么解决依赖关系?</p>\n<p>5.在输入<code>make menuconfig</code>之后,又发生了什么?弹出的图形界面中,怎么会有我放在<code>package</code>目录中的源码的信息?</p>\n<p>6.有的时候,编译报错了.提示信息它认识我,我不认识它.我要怎么排查呢?</p>\n<p>…</p>\n</blockquote>\n<p>零零散散的总是有很多疑问困扰着我.我相信有很多刚接触<code>openwrt</code>的朋友都和我有同感.而所有这些都是可以通过完整学习编译过程来解答的.这样想想是不是更有学习的动力了呢?</p>\n<h2 id=\"二-学习曲线\"><a href=\"#二-学习曲线\" class=\"headerlink\" title=\"二 学习曲线\"></a>二 学习曲线</h2><h3 id=\"2-1-Makefile基本语法\"><a href=\"#2-1-Makefile基本语法\" class=\"headerlink\" title=\"2.1 Makefile基本语法\"></a>2.1 Makefile基本语法</h3><p>&emsp;我们知道编译过程是通过Makefile来控制的.这样而言,Makefile的基本语法就必须有所了解.网上有很多零散的资料往往不成体系.推荐阅读一个是陈皓自己写的和翻译的GNU Make的<a href=\"http://blog.csdn.net/haoel/article/details/2886\" target=\"_blank\" rel=\"external\">手册</a>.还是比较全的.英文还凑合的朋友,我推荐还是尽力读读官方的<a href=\"https://www.gnu.org/software/make/manual/\" target=\"_blank\" rel=\"external\">手册</a>,简介精炼,没事学点英文也是好的.后面的文章,假定读者对Makefile语法有所了解.</p>\n<h3 id=\"2-2-bash基础\"><a href=\"#2-2-bash基础\" class=\"headerlink\" title=\"2.2 bash基础\"></a>2.2 bash基础</h3><p>Makefile中的执行部分(recipe)是有bash脚本组成的,所以我们同时应当对bash shell有所了解.</p>\n<h3 id=\"2-3-world\"><a href=\"#2-3-world\" class=\"headerlink\" title=\"2.3 world\"></a>2.3 world</h3><p>有了这两部分的预备知识,我们将开始我们的征途.我们的目标是<strong>world</strong>.</p>\n<h2 id=\"三-编译过程概述\"><a href=\"#三-编译过程概述\" class=\"headerlink\" title=\"三 编译过程概述\"></a>三 编译过程概述</h2><p>###3.1 主机预装工具</p>\n<p>在编译源码之前,我们必须手动安装一部分工具 .</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils subversion libncurses5-dev ncurses-term zlib1g-dev</span><br></pre></td></tr></table></figure>\n<p>这部分是在执行编译工作之前的.</p>\n<h3 id=\"3-2-编译host工具\"><a href=\"#3-2-编译host工具\" class=\"headerlink\" title=\"3.2 编译host工具\"></a>3.2 编译host工具</h3><p>除了我们在第一步安装的工具,编译过程中还需要其他一些主机工具.这部分工具将首先编译.</p>\n<h3 id=\"3-3-编译交叉工具链\"><a href=\"#3-3-编译交叉工具链\" class=\"headerlink\" title=\"3.3 编译交叉工具链\"></a>3.3 编译交叉工具链</h3><p><code>openwrt</code>自带交叉编译链,当然在编译目标平台软件前,需要先编译.</p>\n<h3 id=\"3-4-编译内核模块\"><a href=\"#3-4-编译内核模块\" class=\"headerlink\" title=\"3.4 编译内核模块\"></a>3.4 编译内核模块</h3><p>因为部分内核模块将会生成独立的ipk,所以内核模块需要首先编译.</p>\n<h3 id=\"3-5-编译ipk\"><a href=\"#3-5-编译ipk\" class=\"headerlink\" title=\"3.5 编译ipk\"></a>3.5 编译ipk</h3><p>这里将编译<code>package</code>目录下的各个软件包,这也是和我们最为息息相关的.之后的博客将会重点介绍这个部分.</p>\n<h3 id=\"3-6-安装ipk\"><a href=\"#3-6-安装ipk\" class=\"headerlink\" title=\"3.6 安装ipk\"></a>3.6 安装ipk</h3><p>将生成的ipk安装到文件系统之中(比如build_dir/target-XXX/root-ramips目录).</p>\n<h3 id=\"3-7-编译内核\"><a href=\"#3-7-编译内核\" class=\"headerlink\" title=\"3.7 编译内核\"></a>3.7 编译内核</h3><p>在完成ipk编译之后,将会编译内核,压缩内核.同时使用mkimage工具,在内核前面生成一个用于uboot识别的头部.</p>\n<h3 id=\"3-8-合成\"><a href=\"#3-8-合成\" class=\"headerlink\" title=\"3.8 合成\"></a>3.8 合成</h3><p>在最后一步,将squashfs格式的文件系统和内核连接在一起,即生成了目标镜像文件.</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>本周到此为止,下一篇我们将介绍根目录下的Makefile,从而知道为什么编译的大致过程是上面提及的八步.</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>又到了成胖子每周一博的时间了,本周是第三周.<br>本周我们继续了解<code>openwrt</code>的编译过程,如果还有没写过简单ipk或者编译过openwrt的朋友,可以参见我之前的<a href=\"http://blog.csdn.net/icy_river/article/details/48260859\">博客</a>或者网上的其他<a href=\"https://www.baidu.com/s?wd=%E7%BC%96%E8%AF%91openwrt&amp;rsv_spt=1&amp;rsv_iqid=0x8f1fcaec0016b4fc&amp;issp=1&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=2&amp;ie=utf-8&amp;tn=baiduhome_pg&amp;rsv_enter=1&amp;rsv_sug3=15&amp;rsv_sug1=10\">文章</a></p>","more":"<h2 id=\"一-年轻的冲动\"><a href=\"#一-年轻的冲动\" class=\"headerlink\" title=\"一 年轻的冲动\"></a>一 年轻的冲动</h2><p>为什么我在学习的过程中,有先学习整个编译过程和Makefile的冲动呢?</p>\n<blockquote>\n<p>1.我们知道电脑的运算速度是很快的.即使如此,一个完整的编译过程往往需要好几个小时.这中间到底发生了些什么?屏幕上一闪而过的像天书一样的东西,我怎么才能有所了解?</p>\n<p>2.经历漫长的等待,我们得到了一个镜像bin文件.这里面到底包含了什么东西?我可以知道么?</p>\n<p>3.编译单个ipk的时候,我按照模板写的Makefile怎么和我在书上见的长的不太一样呢?</p>\n<p>4.在单个ipk中,怎么包含头文件,动态库,静态库?怎么解决依赖关系?</p>\n<p>5.在输入<code>make menuconfig</code>之后,又发生了什么?弹出的图形界面中,怎么会有我放在<code>package</code>目录中的源码的信息?</p>\n<p>6.有的时候,编译报错了.提示信息它认识我,我不认识它.我要怎么排查呢?</p>\n<p>…</p>\n</blockquote>\n<p>零零散散的总是有很多疑问困扰着我.我相信有很多刚接触<code>openwrt</code>的朋友都和我有同感.而所有这些都是可以通过完整学习编译过程来解答的.这样想想是不是更有学习的动力了呢?</p>\n<h2 id=\"二-学习曲线\"><a href=\"#二-学习曲线\" class=\"headerlink\" title=\"二 学习曲线\"></a>二 学习曲线</h2><h3 id=\"2-1-Makefile基本语法\"><a href=\"#2-1-Makefile基本语法\" class=\"headerlink\" title=\"2.1 Makefile基本语法\"></a>2.1 Makefile基本语法</h3><p>&emsp;我们知道编译过程是通过Makefile来控制的.这样而言,Makefile的基本语法就必须有所了解.网上有很多零散的资料往往不成体系.推荐阅读一个是陈皓自己写的和翻译的GNU Make的<a href=\"http://blog.csdn.net/haoel/article/details/2886\">手册</a>.还是比较全的.英文还凑合的朋友,我推荐还是尽力读读官方的<a href=\"https://www.gnu.org/software/make/manual/\">手册</a>,简介精炼,没事学点英文也是好的.后面的文章,假定读者对Makefile语法有所了解.</p>\n<h3 id=\"2-2-bash基础\"><a href=\"#2-2-bash基础\" class=\"headerlink\" title=\"2.2 bash基础\"></a>2.2 bash基础</h3><p>Makefile中的执行部分(recipe)是有bash脚本组成的,所以我们同时应当对bash shell有所了解.</p>\n<h3 id=\"2-3-world\"><a href=\"#2-3-world\" class=\"headerlink\" title=\"2.3 world\"></a>2.3 world</h3><p>有了这两部分的预备知识,我们将开始我们的征途.我们的目标是<strong>world</strong>.</p>\n<h2 id=\"三-编译过程概述\"><a href=\"#三-编译过程概述\" class=\"headerlink\" title=\"三 编译过程概述\"></a>三 编译过程概述</h2><p>###3.1 主机预装工具</p>\n<p>在编译源码之前,我们必须手动安装一部分工具 .</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils subversion libncurses5-dev ncurses-term zlib1g-dev</span><br></pre></td></tr></table></figure>\n<p>这部分是在执行编译工作之前的.</p>\n<h3 id=\"3-2-编译host工具\"><a href=\"#3-2-编译host工具\" class=\"headerlink\" title=\"3.2 编译host工具\"></a>3.2 编译host工具</h3><p>除了我们在第一步安装的工具,编译过程中还需要其他一些主机工具.这部分工具将首先编译.</p>\n<h3 id=\"3-3-编译交叉工具链\"><a href=\"#3-3-编译交叉工具链\" class=\"headerlink\" title=\"3.3 编译交叉工具链\"></a>3.3 编译交叉工具链</h3><p><code>openwrt</code>自带交叉编译链,当然在编译目标平台软件前,需要先编译.</p>\n<h3 id=\"3-4-编译内核模块\"><a href=\"#3-4-编译内核模块\" class=\"headerlink\" title=\"3.4 编译内核模块\"></a>3.4 编译内核模块</h3><p>因为部分内核模块将会生成独立的ipk,所以内核模块需要首先编译.</p>\n<h3 id=\"3-5-编译ipk\"><a href=\"#3-5-编译ipk\" class=\"headerlink\" title=\"3.5 编译ipk\"></a>3.5 编译ipk</h3><p>这里将编译<code>package</code>目录下的各个软件包,这也是和我们最为息息相关的.之后的博客将会重点介绍这个部分.</p>\n<h3 id=\"3-6-安装ipk\"><a href=\"#3-6-安装ipk\" class=\"headerlink\" title=\"3.6 安装ipk\"></a>3.6 安装ipk</h3><p>将生成的ipk安装到文件系统之中(比如build_dir/target-XXX/root-ramips目录).</p>\n<h3 id=\"3-7-编译内核\"><a href=\"#3-7-编译内核\" class=\"headerlink\" title=\"3.7 编译内核\"></a>3.7 编译内核</h3><p>在完成ipk编译之后,将会编译内核,压缩内核.同时使用mkimage工具,在内核前面生成一个用于uboot识别的头部.</p>\n<h3 id=\"3-8-合成\"><a href=\"#3-8-合成\" class=\"headerlink\" title=\"3.8 合成\"></a>3.8 合成</h3><p>在最后一步,将squashfs格式的文件系统和内核连接在一起,即生成了目标镜像文件.</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>本周到此为止,下一篇我们将介绍根目录下的Makefile,从而知道为什么编译的大致过程是上面提及的八步.</p>"},{"layout":"post","title":"openwrt单个ipk编译过程","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第五周.\n更好的阅读体验,请点击[这里](https://www.zybuluo.com/icyriver/note/257687)\n\n<!--more-->\n\n---\n\n## 前言\n&emsp;前一篇博客中,我们已经知道整个openwrt的编译顺序,本文我们来探讨与开发者息息相关的单个ipk的编译过程.在开发者进行二次开发的时候,我们既可以单个编译ipk也可以完整编译整个镜像文件.在完整编译的时候,我们选中的单个ipk同样会被编入镜像文件中,所以完整编译同样会进行单个ipk包的编译.\n\n我们前面在*stampfile*函数部分提高过,当编译目标为**package/stamp-compile**的时候,实际执行的目标为**package/compile**;同时根据*subdir*函数的定义,**package/compile**将会依赖于package文件夹下被`make menuconfig`选中的子文件夹的**compile**.简而言之,当我们执行`make package/compile`相当于对所有选中的文件夹执行`make package/XXX/compile`.\n\n---\n## ipk Makefile分析\n我们以一个具体的包的编译过程来看看,本文我们以package/network/services/dropbear这个包为例.当我们在命令行中输入`make package/network/services/dropbear/compile`的时候,**make**将会读入dropbear下的Makefile文件,同时目标指定为**compile**.\n\n因为空间问题,我在这里不展开具体的Makefile文件.相信能看这篇博客的同学应该都有源码,自己打开便是.\n下面我们根据**GNU make**语法来分析这个Makefile文件.它包含了两个.mk文件:一个是rules.mk,另一个是package.mk.\n\nrules.mk:\n>这个文件我们前文已经提到过了,主要是大量变量的定义.包括各种路径的定义,编译器的定义等等.其中要说明的是**.config**文件也是这里被包含进来的.\n\npackage.mk\n>这个文件首先定义和补充了一些变量.其次是**openwrt**为我们封装了**BuildPackage**函数,对于普通开发者而言,只需要参照模板定义相应的变量,最后调用这个函数即可.\n\n其余的我们可以认为是变量的赋值语句,很明显使用它们的地方并不在这里.关于模板和变量值的说明及作用.,你可以参照[官方说明](https://wiki.openwrt.org/doc/devel/packages),也可以在网上找到一大堆资料.\n\n最后,最重要的语句是这一句:\n\n```\n$(eval $(call BuildPackage,dropbear))\n```\n\n这里将会把**dropbear**作为参数值传给函数**BuildPackage**\n\nTips\n:   不知道大家还记得我们Makefile的执行顺序么?Makefile是先读入所有信息,展开,然后生成依赖关系.最后再按依赖关系先后来执行.\n\n---\n## 依赖关系\n\n### BuildPackage分析\n**BuildPackage**的定义在**package.mk**中,定义如下:\n\n```\ndefine BuildPackage\n  $(Build/IncludeOverlay)\n  $(eval $(Package/Default))\n  $(eval $(Package/$(1)))\n\nifdef DESCRIPTION\n$$(error DESCRIPTION:= is obsolete, use Package/PKG_NAME/description)\nendif\n\nifndef Package/$(1)/description\ndefine Package/$(1)/description\n\t$(TITLE)\nendef\nendif\n\n  BUILD_PACKAGES += $(1)\n  $(STAMP_PREPARED): $$(if $(QUILT)$(DUMP),,$(call find_library_dependencies,$(DEPENDS)))\n\n  $(foreach FIELD, TITLE CATEGORY SECTION VERSION,\n    ifeq ($($(FIELD)),)\n      $$(error Package/$(1) is missing the $(FIELD) field)\n    endif\n  )\n\n  $(if $(DUMP), \\\n    $(Dumpinfo/Package), \\\n    $(foreach target, \\\n      $(if $(Package/$(1)/targets),$(Package/$(1)/targets), \\\n        $(if $(PKG_TARGETS),$(PKG_TARGETS), ipkg) \\\n      ), $(BuildTarget/$(target)) \\\n    ) \\\n  )\n  $(if $(PKG_HOST_ONLY)$(DUMP),,$(call Build/DefaultTargets,$(1)))\nendef\n```\n\n那么这里的$(1)就是指的传入的参数**dropbear**.这里包含了一些检查和补充变量定义.继续深究下去的线索是第25~32行之间.这里我将它简化后就是展开**BuildTarget/ipkg**;同时第33行,将dropbear当作参数传给函数**Build/DefaultTargets**.\n\n**BuildTarget/ipkg**定义在**package-ipkg.mk**中,我们需要重点关注其中的冒号,这个形成我们的依赖关系.\n**Build/DefaultTargets**定义在**package.mk**中,其中形成了我们stamp-*的依赖关系.根据这些依赖关系,我将关系图绘制如下:\n![package/compile](http://ww4.sinaimg.cn/large/006kvZhRjw1ezmd5eo1iej31bb0fcwh0.jpg)\n\n## 执行\n当我们得出依赖关系后,执行过程就是倒序进行而已,即从上图的右边向左执行.这也可以和我们预料的执行过程相印证.\n\n$(stamp-prepared)\n:   主要完成代码包的准备工作,如果开发者定义了**build/prepare**,则执行**build/prepare**.如果开发者未定义,则执行**build/prepare/default**这其中包含了多个情形,最为常见的是将**dl**下的压缩包解压并打上patch.\n\n$(stamp-built)\n>这个将会进入到**build_dir/target-XXX/**下对应的文件夹进行编译.同时将会带入一些定义好的变量.比如CFLAGS,LDFLAGS.\n\nIPKG_(1)\n>这个目标将会将编译好的文件安装到对应的**ipkg-arch**目录下,同时将这个目录打包为ipk文件.\n\n---\n## 尾记\n\n本周博客基本就到这里,本来私心想着元旦没啥大事,可以写两篇的.结果混着混着就到第三天晚上了.剩下的最后一篇我们看看单个的ipk编译好了,内核的编译过程,最后的打包过程.整个镜像文件由哪些部分组成.下周再见.\n","source":"_posts/2016-01-03-openwrt单个ipk编译过程.md","raw":"---\nlayout: post\ntitle: openwrt单个ipk编译过程\ncategory: openwrt\ntags: [openwrt,makefile,深度]\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第五周.\n更好的阅读体验,请点击[这里](https://www.zybuluo.com/icyriver/note/257687)\n\n<!--more-->\n\n---\n\n## 前言\n&emsp;前一篇博客中,我们已经知道整个openwrt的编译顺序,本文我们来探讨与开发者息息相关的单个ipk的编译过程.在开发者进行二次开发的时候,我们既可以单个编译ipk也可以完整编译整个镜像文件.在完整编译的时候,我们选中的单个ipk同样会被编入镜像文件中,所以完整编译同样会进行单个ipk包的编译.\n\n我们前面在*stampfile*函数部分提高过,当编译目标为**package/stamp-compile**的时候,实际执行的目标为**package/compile**;同时根据*subdir*函数的定义,**package/compile**将会依赖于package文件夹下被`make menuconfig`选中的子文件夹的**compile**.简而言之,当我们执行`make package/compile`相当于对所有选中的文件夹执行`make package/XXX/compile`.\n\n---\n## ipk Makefile分析\n我们以一个具体的包的编译过程来看看,本文我们以package/network/services/dropbear这个包为例.当我们在命令行中输入`make package/network/services/dropbear/compile`的时候,**make**将会读入dropbear下的Makefile文件,同时目标指定为**compile**.\n\n因为空间问题,我在这里不展开具体的Makefile文件.相信能看这篇博客的同学应该都有源码,自己打开便是.\n下面我们根据**GNU make**语法来分析这个Makefile文件.它包含了两个.mk文件:一个是rules.mk,另一个是package.mk.\n\nrules.mk:\n>这个文件我们前文已经提到过了,主要是大量变量的定义.包括各种路径的定义,编译器的定义等等.其中要说明的是**.config**文件也是这里被包含进来的.\n\npackage.mk\n>这个文件首先定义和补充了一些变量.其次是**openwrt**为我们封装了**BuildPackage**函数,对于普通开发者而言,只需要参照模板定义相应的变量,最后调用这个函数即可.\n\n其余的我们可以认为是变量的赋值语句,很明显使用它们的地方并不在这里.关于模板和变量值的说明及作用.,你可以参照[官方说明](https://wiki.openwrt.org/doc/devel/packages),也可以在网上找到一大堆资料.\n\n最后,最重要的语句是这一句:\n\n```\n$(eval $(call BuildPackage,dropbear))\n```\n\n这里将会把**dropbear**作为参数值传给函数**BuildPackage**\n\nTips\n:   不知道大家还记得我们Makefile的执行顺序么?Makefile是先读入所有信息,展开,然后生成依赖关系.最后再按依赖关系先后来执行.\n\n---\n## 依赖关系\n\n### BuildPackage分析\n**BuildPackage**的定义在**package.mk**中,定义如下:\n\n```\ndefine BuildPackage\n  $(Build/IncludeOverlay)\n  $(eval $(Package/Default))\n  $(eval $(Package/$(1)))\n\nifdef DESCRIPTION\n$$(error DESCRIPTION:= is obsolete, use Package/PKG_NAME/description)\nendif\n\nifndef Package/$(1)/description\ndefine Package/$(1)/description\n\t$(TITLE)\nendef\nendif\n\n  BUILD_PACKAGES += $(1)\n  $(STAMP_PREPARED): $$(if $(QUILT)$(DUMP),,$(call find_library_dependencies,$(DEPENDS)))\n\n  $(foreach FIELD, TITLE CATEGORY SECTION VERSION,\n    ifeq ($($(FIELD)),)\n      $$(error Package/$(1) is missing the $(FIELD) field)\n    endif\n  )\n\n  $(if $(DUMP), \\\n    $(Dumpinfo/Package), \\\n    $(foreach target, \\\n      $(if $(Package/$(1)/targets),$(Package/$(1)/targets), \\\n        $(if $(PKG_TARGETS),$(PKG_TARGETS), ipkg) \\\n      ), $(BuildTarget/$(target)) \\\n    ) \\\n  )\n  $(if $(PKG_HOST_ONLY)$(DUMP),,$(call Build/DefaultTargets,$(1)))\nendef\n```\n\n那么这里的$(1)就是指的传入的参数**dropbear**.这里包含了一些检查和补充变量定义.继续深究下去的线索是第25~32行之间.这里我将它简化后就是展开**BuildTarget/ipkg**;同时第33行,将dropbear当作参数传给函数**Build/DefaultTargets**.\n\n**BuildTarget/ipkg**定义在**package-ipkg.mk**中,我们需要重点关注其中的冒号,这个形成我们的依赖关系.\n**Build/DefaultTargets**定义在**package.mk**中,其中形成了我们stamp-*的依赖关系.根据这些依赖关系,我将关系图绘制如下:\n![package/compile](http://ww4.sinaimg.cn/large/006kvZhRjw1ezmd5eo1iej31bb0fcwh0.jpg)\n\n## 执行\n当我们得出依赖关系后,执行过程就是倒序进行而已,即从上图的右边向左执行.这也可以和我们预料的执行过程相印证.\n\n$(stamp-prepared)\n:   主要完成代码包的准备工作,如果开发者定义了**build/prepare**,则执行**build/prepare**.如果开发者未定义,则执行**build/prepare/default**这其中包含了多个情形,最为常见的是将**dl**下的压缩包解压并打上patch.\n\n$(stamp-built)\n>这个将会进入到**build_dir/target-XXX/**下对应的文件夹进行编译.同时将会带入一些定义好的变量.比如CFLAGS,LDFLAGS.\n\nIPKG_(1)\n>这个目标将会将编译好的文件安装到对应的**ipkg-arch**目录下,同时将这个目录打包为ipk文件.\n\n---\n## 尾记\n\n本周博客基本就到这里,本来私心想着元旦没啥大事,可以写两篇的.结果混着混着就到第三天晚上了.剩下的最后一篇我们看看单个的ipk编译好了,内核的编译过程,最后的打包过程.整个镜像文件由哪些部分组成.下周再见.\n","slug":"openwrt单个ipk编译过程","published":1,"date":"2016-01-02T16:00:00.000Z","updated":"2016-04-07T07:00:51.557Z","photos":[],"link":"","_id":"cimpzdpnw000om1f1kf7nehr1","content":"<p>本周是成胖子每周一博的第五周.<br>更好的阅读体验,请点击<a href=\"https://www.zybuluo.com/icyriver/note/257687\" target=\"_blank\" rel=\"external\">这里</a></p>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;前一篇博客中,我们已经知道整个openwrt的编译顺序,本文我们来探讨与开发者息息相关的单个ipk的编译过程.在开发者进行二次开发的时候,我们既可以单个编译ipk也可以完整编译整个镜像文件.在完整编译的时候,我们选中的单个ipk同样会被编入镜像文件中,所以完整编译同样会进行单个ipk包的编译.</p>\n<p>我们前面在<em>stampfile</em>函数部分提高过,当编译目标为<strong>package/stamp-compile</strong>的时候,实际执行的目标为<strong>package/compile</strong>;同时根据<em>subdir</em>函数的定义,<strong>package/compile</strong>将会依赖于package文件夹下被<code>make menuconfig</code>选中的子文件夹的<strong>compile</strong>.简而言之,当我们执行<code>make package/compile</code>相当于对所有选中的文件夹执行<code>make package/XXX/compile</code>.</p>\n<hr>\n<h2 id=\"ipk-Makefile分析\"><a href=\"#ipk-Makefile分析\" class=\"headerlink\" title=\"ipk Makefile分析\"></a>ipk Makefile分析</h2><p>我们以一个具体的包的编译过程来看看,本文我们以package/network/services/dropbear这个包为例.当我们在命令行中输入<code>make package/network/services/dropbear/compile</code>的时候,<strong>make</strong>将会读入dropbear下的Makefile文件,同时目标指定为<strong>compile</strong>.</p>\n<p>因为空间问题,我在这里不展开具体的Makefile文件.相信能看这篇博客的同学应该都有源码,自己打开便是.<br>下面我们根据<strong>GNU make</strong>语法来分析这个Makefile文件.它包含了两个.mk文件:一个是rules.mk,另一个是package.mk.</p>\n<p>rules.mk:</p>\n<blockquote>\n<p>这个文件我们前文已经提到过了,主要是大量变量的定义.包括各种路径的定义,编译器的定义等等.其中要说明的是<strong>.config</strong>文件也是这里被包含进来的.</p>\n</blockquote>\n<p>package.mk</p>\n<blockquote>\n<p>这个文件首先定义和补充了一些变量.其次是<strong>openwrt</strong>为我们封装了<strong>BuildPackage</strong>函数,对于普通开发者而言,只需要参照模板定义相应的变量,最后调用这个函数即可.</p>\n</blockquote>\n<p>其余的我们可以认为是变量的赋值语句,很明显使用它们的地方并不在这里.关于模板和变量值的说明及作用.,你可以参照<a href=\"https://wiki.openwrt.org/doc/devel/packages\" target=\"_blank\" rel=\"external\">官方说明</a>,也可以在网上找到一大堆资料.</p>\n<p>最后,最重要的语句是这一句:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(eval $(call BuildPackage,dropbear))</span><br></pre></td></tr></table></figure>\n<p>这里将会把<strong>dropbear</strong>作为参数值传给函数<strong>BuildPackage</strong></p>\n<p>Tips<br>:   不知道大家还记得我们Makefile的执行顺序么?Makefile是先读入所有信息,展开,然后生成依赖关系.最后再按依赖关系先后来执行.</p>\n<hr>\n<h2 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h2><h3 id=\"BuildPackage分析\"><a href=\"#BuildPackage分析\" class=\"headerlink\" title=\"BuildPackage分析\"></a>BuildPackage分析</h3><p><strong>BuildPackage</strong>的定义在<strong>package.mk</strong>中,定义如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildPackage</span><br><span class=\"line\">  $(Build/IncludeOverlay)</span><br><span class=\"line\">  $(eval $(Package/Default))</span><br><span class=\"line\">  $(eval $(Package/$(1)))</span><br><span class=\"line\"></span><br><span class=\"line\">ifdef DESCRIPTION</span><br><span class=\"line\">$$(error DESCRIPTION:= is obsolete, use Package/PKG_NAME/description)</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifndef Package/$(1)/description</span><br><span class=\"line\">define Package/$(1)/description</span><br><span class=\"line\">\t$(TITLE)</span><br><span class=\"line\">endef</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">  BUILD_PACKAGES += $(1)</span><br><span class=\"line\">  $(STAMP_PREPARED): $$(if $(QUILT)$(DUMP),,$(call find_library_dependencies,$(DEPENDS)))</span><br><span class=\"line\"></span><br><span class=\"line\">  $(foreach FIELD, TITLE CATEGORY SECTION VERSION,</span><br><span class=\"line\">    ifeq ($($(FIELD)),)</span><br><span class=\"line\">      $$(error Package/$(1) is missing the $(FIELD) field)</span><br><span class=\"line\">    endif</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  $(if $(DUMP), \\</span><br><span class=\"line\">    $(Dumpinfo/Package), \\</span><br><span class=\"line\">    $(foreach target, \\</span><br><span class=\"line\">      $(if $(Package/$(1)/targets),$(Package/$(1)/targets), \\</span><br><span class=\"line\">        $(if $(PKG_TARGETS),$(PKG_TARGETS), ipkg) \\</span><br><span class=\"line\">      ), $(BuildTarget/$(target)) \\</span><br><span class=\"line\">    ) \\</span><br><span class=\"line\">  )</span><br><span class=\"line\">  $(if $(PKG_HOST_ONLY)$(DUMP),,$(call Build/DefaultTargets,$(1)))</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>那么这里的$(1)就是指的传入的参数<strong>dropbear</strong>.这里包含了一些检查和补充变量定义.继续深究下去的线索是第25~32行之间.这里我将它简化后就是展开<strong>BuildTarget/ipkg</strong>;同时第33行,将dropbear当作参数传给函数<strong>Build/DefaultTargets</strong>.</p>\n<p><strong>BuildTarget/ipkg</strong>定义在<strong>package-ipkg.mk</strong>中,我们需要重点关注其中的冒号,这个形成我们的依赖关系.<br><strong>Build/DefaultTargets</strong>定义在<strong>package.mk</strong>中,其中形成了我们stamp-*的依赖关系.根据这些依赖关系,我将关系图绘制如下:<br><img src=\"http://ww4.sinaimg.cn/large/006kvZhRjw1ezmd5eo1iej31bb0fcwh0.jpg\" alt=\"package/compile\"></p>\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>当我们得出依赖关系后,执行过程就是倒序进行而已,即从上图的右边向左执行.这也可以和我们预料的执行过程相印证.</p>\n<p>$(stamp-prepared)<br>:   主要完成代码包的准备工作,如果开发者定义了<strong>build/prepare</strong>,则执行<strong>build/prepare</strong>.如果开发者未定义,则执行<strong>build/prepare/default</strong>这其中包含了多个情形,最为常见的是将<strong>dl</strong>下的压缩包解压并打上patch.</p>\n<p>$(stamp-built)</p>\n<blockquote>\n<p>这个将会进入到<strong>build_dir/target-XXX/</strong>下对应的文件夹进行编译.同时将会带入一些定义好的变量.比如CFLAGS,LDFLAGS.</p>\n</blockquote>\n<p>IPKG_(1)</p>\n<blockquote>\n<p>这个目标将会将编译好的文件安装到对应的<strong>ipkg-arch</strong>目录下,同时将这个目录打包为ipk文件.</p>\n</blockquote>\n<hr>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>本周博客基本就到这里,本来私心想着元旦没啥大事,可以写两篇的.结果混着混着就到第三天晚上了.剩下的最后一篇我们看看单个的ipk编译好了,内核的编译过程,最后的打包过程.整个镜像文件由哪些部分组成.下周再见.</p>\n","excerpt":"<p>本周是成胖子每周一博的第五周.<br>更好的阅读体验,请点击<a href=\"https://www.zybuluo.com/icyriver/note/257687\">这里</a></p>","more":"<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;前一篇博客中,我们已经知道整个openwrt的编译顺序,本文我们来探讨与开发者息息相关的单个ipk的编译过程.在开发者进行二次开发的时候,我们既可以单个编译ipk也可以完整编译整个镜像文件.在完整编译的时候,我们选中的单个ipk同样会被编入镜像文件中,所以完整编译同样会进行单个ipk包的编译.</p>\n<p>我们前面在<em>stampfile</em>函数部分提高过,当编译目标为<strong>package/stamp-compile</strong>的时候,实际执行的目标为<strong>package/compile</strong>;同时根据<em>subdir</em>函数的定义,<strong>package/compile</strong>将会依赖于package文件夹下被<code>make menuconfig</code>选中的子文件夹的<strong>compile</strong>.简而言之,当我们执行<code>make package/compile</code>相当于对所有选中的文件夹执行<code>make package/XXX/compile</code>.</p>\n<hr>\n<h2 id=\"ipk-Makefile分析\"><a href=\"#ipk-Makefile分析\" class=\"headerlink\" title=\"ipk Makefile分析\"></a>ipk Makefile分析</h2><p>我们以一个具体的包的编译过程来看看,本文我们以package/network/services/dropbear这个包为例.当我们在命令行中输入<code>make package/network/services/dropbear/compile</code>的时候,<strong>make</strong>将会读入dropbear下的Makefile文件,同时目标指定为<strong>compile</strong>.</p>\n<p>因为空间问题,我在这里不展开具体的Makefile文件.相信能看这篇博客的同学应该都有源码,自己打开便是.<br>下面我们根据<strong>GNU make</strong>语法来分析这个Makefile文件.它包含了两个.mk文件:一个是rules.mk,另一个是package.mk.</p>\n<p>rules.mk:</p>\n<blockquote>\n<p>这个文件我们前文已经提到过了,主要是大量变量的定义.包括各种路径的定义,编译器的定义等等.其中要说明的是<strong>.config</strong>文件也是这里被包含进来的.</p>\n</blockquote>\n<p>package.mk</p>\n<blockquote>\n<p>这个文件首先定义和补充了一些变量.其次是<strong>openwrt</strong>为我们封装了<strong>BuildPackage</strong>函数,对于普通开发者而言,只需要参照模板定义相应的变量,最后调用这个函数即可.</p>\n</blockquote>\n<p>其余的我们可以认为是变量的赋值语句,很明显使用它们的地方并不在这里.关于模板和变量值的说明及作用.,你可以参照<a href=\"https://wiki.openwrt.org/doc/devel/packages\">官方说明</a>,也可以在网上找到一大堆资料.</p>\n<p>最后,最重要的语句是这一句:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(eval $(call BuildPackage,dropbear))</span><br></pre></td></tr></table></figure>\n<p>这里将会把<strong>dropbear</strong>作为参数值传给函数<strong>BuildPackage</strong></p>\n<p>Tips<br>:   不知道大家还记得我们Makefile的执行顺序么?Makefile是先读入所有信息,展开,然后生成依赖关系.最后再按依赖关系先后来执行.</p>\n<hr>\n<h2 id=\"依赖关系\"><a href=\"#依赖关系\" class=\"headerlink\" title=\"依赖关系\"></a>依赖关系</h2><h3 id=\"BuildPackage分析\"><a href=\"#BuildPackage分析\" class=\"headerlink\" title=\"BuildPackage分析\"></a>BuildPackage分析</h3><p><strong>BuildPackage</strong>的定义在<strong>package.mk</strong>中,定义如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildPackage</span><br><span class=\"line\">  $(Build/IncludeOverlay)</span><br><span class=\"line\">  $(eval $(Package/Default))</span><br><span class=\"line\">  $(eval $(Package/$(1)))</span><br><span class=\"line\"></span><br><span class=\"line\">ifdef DESCRIPTION</span><br><span class=\"line\">$$(error DESCRIPTION:= is obsolete, use Package/PKG_NAME/description)</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">ifndef Package/$(1)/description</span><br><span class=\"line\">define Package/$(1)/description</span><br><span class=\"line\">\t$(TITLE)</span><br><span class=\"line\">endef</span><br><span class=\"line\">endif</span><br><span class=\"line\"></span><br><span class=\"line\">  BUILD_PACKAGES += $(1)</span><br><span class=\"line\">  $(STAMP_PREPARED): $$(if $(QUILT)$(DUMP),,$(call find_library_dependencies,$(DEPENDS)))</span><br><span class=\"line\"></span><br><span class=\"line\">  $(foreach FIELD, TITLE CATEGORY SECTION VERSION,</span><br><span class=\"line\">    ifeq ($($(FIELD)),)</span><br><span class=\"line\">      $$(error Package/$(1) is missing the $(FIELD) field)</span><br><span class=\"line\">    endif</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  $(if $(DUMP), \\</span><br><span class=\"line\">    $(Dumpinfo/Package), \\</span><br><span class=\"line\">    $(foreach target, \\</span><br><span class=\"line\">      $(if $(Package/$(1)/targets),$(Package/$(1)/targets), \\</span><br><span class=\"line\">        $(if $(PKG_TARGETS),$(PKG_TARGETS), ipkg) \\</span><br><span class=\"line\">      ), $(BuildTarget/$(target)) \\</span><br><span class=\"line\">    ) \\</span><br><span class=\"line\">  )</span><br><span class=\"line\">  $(if $(PKG_HOST_ONLY)$(DUMP),,$(call Build/DefaultTargets,$(1)))</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>那么这里的$(1)就是指的传入的参数<strong>dropbear</strong>.这里包含了一些检查和补充变量定义.继续深究下去的线索是第25~32行之间.这里我将它简化后就是展开<strong>BuildTarget/ipkg</strong>;同时第33行,将dropbear当作参数传给函数<strong>Build/DefaultTargets</strong>.</p>\n<p><strong>BuildTarget/ipkg</strong>定义在<strong>package-ipkg.mk</strong>中,我们需要重点关注其中的冒号,这个形成我们的依赖关系.<br><strong>Build/DefaultTargets</strong>定义在<strong>package.mk</strong>中,其中形成了我们stamp-*的依赖关系.根据这些依赖关系,我将关系图绘制如下:<br><img src=\"http://ww4.sinaimg.cn/large/006kvZhRjw1ezmd5eo1iej31bb0fcwh0.jpg\" alt=\"package/compile\"></p>\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>当我们得出依赖关系后,执行过程就是倒序进行而已,即从上图的右边向左执行.这也可以和我们预料的执行过程相印证.</p>\n<p>$(stamp-prepared)<br>:   主要完成代码包的准备工作,如果开发者定义了<strong>build/prepare</strong>,则执行<strong>build/prepare</strong>.如果开发者未定义,则执行<strong>build/prepare/default</strong>这其中包含了多个情形,最为常见的是将<strong>dl</strong>下的压缩包解压并打上patch.</p>\n<p>$(stamp-built)</p>\n<blockquote>\n<p>这个将会进入到<strong>build_dir/target-XXX/</strong>下对应的文件夹进行编译.同时将会带入一些定义好的变量.比如CFLAGS,LDFLAGS.</p>\n</blockquote>\n<p>IPKG_(1)</p>\n<blockquote>\n<p>这个目标将会将编译好的文件安装到对应的<strong>ipkg-arch</strong>目录下,同时将这个目录打包为ipk文件.</p>\n</blockquote>\n<hr>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>本周博客基本就到这里,本来私心想着元旦没啥大事,可以写两篇的.结果混着混着就到第三天晚上了.剩下的最后一篇我们看看单个的ipk编译好了,内核的编译过程,最后的打包过程.整个镜像文件由哪些部分组成.下周再见.</p>"},{"layout":"post","title":"openwrt主Makefile解析","comments":1,"analytics":true,"_content":"\n本周成胖子每周一博到了第四周\n\n## 前言\n前一篇,我们大概描述了整个镜像文件的生成过程.本周我们来解析主Makefile,看看主要编译过程是怎么产生的.\n\n<!--more-->\n\n## 主Makefile结构\n我们以`chaos calmer`的代码为例,整个编译的入口是在源码根目录下的Makefile.编译的各种命令都应该在源码根目录下键入.\n整个主Makefile的结构如下:\n\n```\nworld:\nifneq ($(OPENWRT_BUILD),1)\n\t顶层\nelse\n\t第二层\nendif\n```\n\n开始部分是一些注释和变量定义及路径检查.\n根据**Makefile的规则**,在没有指定编译目标的时候,Makefile中的第一个目标将作为默认目标.\n换句话说,当我们执行`make V=s`时,这个时候编译的目标就是`world`.和我们执行`make world V=s`效果是一样的.\n\n## 顶层\n通常在编译时,我们不会定义变量`OPENWRT_BUILD`的值,所以通常我们是会走到顶层的.\n顶层代码如下:\n\n```bash\n  _SINGLE=export MAKEFLAGS=$(space);\n\n  override OPENWRT_BUILD=1\n  export OPENWRT_BUILD\n  GREP_OPTIONS=\n  export GREP_OPTIONS\n  include $(TOPDIR)/include/debug.mk\n  include $(TOPDIR)/include/depends.mk\n  include $(TOPDIR)/include/toplevel.mk\n```\n\n这里我们看到变量`OPENWRT_BUILD`被置为1.然后包含了3个`.mk`文件.\n这里稍微解释下`.mk`文件.它们一般没有什么执行动作,都是一些变量的定义还有依赖关系的说明.可以类比于C语言的头文件来理解.\n\ndebug.mk:\n> 可以通过定义DEBUG的值来控制编译过程\n\ndepends.mk\n> 主要定义了rdep这个变量\n\ntoplevel.mk\n>这个是我们跟踪编译过程的重要的文件.这个文件在源码根目录下的`include`文件夹下.\n\n核心代码如下:\n\n```\n%::\n\t@+$(PREP_MK) $(NO_TRACE_MAKE) -r -s prereq\n\t@( \\\n\t\tcp .config tmp/.config; \\\n\t\t./scripts/config/conf --defconfig=tmp/.config -w tmp/.config Config.in > /dev/null 2>&1; \\\n\t\tif ./scripts/kconfig.pl '>' .config tmp/.config | grep -q CONFIG; then \\\n\t\t\tprintf \"$(_R)WARNING: your configuration is out of sync. Please run make menuconfig, oldconfig or defconfig!$(_N)\\n\" >&2; \\\n\t\tfi \\\n\t)\n\t@+$(ULIMIT_FIX) $(SUBMAKE) -r $@ $(if $(WARN_PARALLEL_ERROR), || { \\\n\t\tprintf \"$(_R)Build failed - please re-run with -j1 to see the real error message$(_N)\\n\" >&2; \\\n\t\tfalse; \\\n\t} )\n```\n\n除了少数在toplevel中被定义的目标外,其他编译目标都会走到这里.将之简化后:\n\n```\n%::\n\tmake prereq\n\tmake $@\n```\n\n首先执行`prereq`,然后再执行我们指定的目标或者默认目标`world`.\nprereq整理后的依赖关系如下:\n![prereq](http://img.blog.csdn.net/20151226142730074)\n其中\nstaging_dir/host/.prereq-build:\n> 将会执行一系列主机检查,是否安装了必要的软件.\n\nprepare-tmpinfo:\n> 根据scan.mk,扫描`target/linux`和`package`目录,生成packageinfo和targetinfo.\n\n总之,顶层完成一系列必要的准备工作.对于绝大多数的目标而言,顶层是必经之路.当然,在`toplevel.mk`中,我们也可以看到目标`menuconfig`.也就是说对于目标`menuconfig`而言,将不会执行到第二层的逻辑.\n\n\n## 第二层\n在上面执行完`make prereq`之后,将执行`make world`.\n还记得我们进入顶层后修改了变量`OPENWRT_BUILD`么?当再次执行`make world`的时候,由于条件不满足,我们将直接进入第二层来执行.\n\n```\n  include rules.mk\n  include $(INCLUDE_DIR)/depends.mk\n  include $(INCLUDE_DIR)/subdir.mk\n  include target/Makefile\n  include package/Makefile\n  include tools/Makefile\n  include toolchain/Makefile\n```\n\nrules.mk:\n> 很重要的一个mk文件,其中规定了很多有用的变量,包括各种目录路径的定义,交叉编译器等等.其中\n> ```\n> ifeq ($(DUMP),)\n  -include $(TOPDIR)/.config\nendif\n> ```\n> 就是包含了我们的配置文件.对于`Makefile`而言,`.config`文件就是一大串变量的定义.Makefile可以直接读取这些定义,从而控制编译过程.\n\nsubdir.mk:\n> 这个是读懂我们整个编译过程的**关键**所在,其中主要定义了两个函数:*subdir*和*stampfile*,我们稍后加以解释.\n\n接下来,包含了4个Makefile文件.我们以`target/Makefile`为例.该文件位于`target`目录下.\n核心部分为:\n\n```\n$(eval $(call stampfile,$(curdir),target,prereq,.config))\n$(eval $(call stampfile,$(curdir),target,compile,$(TMP_DIR)/.build))\n$(eval $(call stampfile,$(curdir),target,install,$(TMP_DIR)/.build))\n\n$(eval $(call subdir,$(curdir)))\n```\n\n这里调用了`subdir.mk`中定义的`stampfile`函数.将会生成`target/stamp-prereq`,`target/stamp-compile`,`target/stamp-install`三个变量.\n以`target/stamp-prereq`为例,执行部分为`make target/prereq`.同理`target/stamp-compile`,执行部分为`make target/compile`.\n\n最后又调用了`sbudir`函数,这个函数规定了目标和各子文件夹之间的依赖关系.如果有一定的Makefile基础可以去读读`subdir.mk`文件.\n举例而言就是:\n> 当执行目标为`target/compile`,这个目标将依赖于`target/linux/compile`.\n> 当执行目标为`package/compile`,这个目标将依赖于`package`目录下,各子文件夹的`compile`.\n\n下面就是规定了一系列的依赖关系,我已经将他们梳理了出来,如下图:\n![world](http://img.blog.csdn.net/20151226151210514)\n\n这里就是第二层解析后的依赖关系.当依赖关系生成后,将会从最先被依赖的目标开始执行.\n比如我们可以看到进入第二层后,`tools/stamp-install`将会最先被执行,也就是主机工具将会最先被编译,安装.我们上一篇提高的整个编译过程能从上图中得出.\n\n\n## 尾记\n1. 想要读懂Makefile,首先要梳理各个依赖关系.而要梳理各个依赖关系,关键要关注冒号和`make -C`\n2. 本周我们解析了主Makefile,在Makefile的执行过程中要理解make的执行过程.先读入Makefile,然后构建依赖关系,最后最先被依赖的目标将会先执行.\n3. 我主要描绘了主要枝干,如果希望了解更多细节,还是要自己去阅读Makefile.\n3. 接下来两篇,我们将主要分析下,和我们开发者比较相关的两个目标的执行过程:`package/stamp-compile`和`target/stamp-install`.下周再会^_^\n","source":"_posts/2015-12-26-openwrt主Makefile解析.md","raw":"---\nlayout: post\ntitle: openwrt主Makefile解析\ncategory: openwrt\ntags: [makefile,openwrt,深度]\ncomments: true\nanalytics: true\n---\n\n本周成胖子每周一博到了第四周\n\n## 前言\n前一篇,我们大概描述了整个镜像文件的生成过程.本周我们来解析主Makefile,看看主要编译过程是怎么产生的.\n\n<!--more-->\n\n## 主Makefile结构\n我们以`chaos calmer`的代码为例,整个编译的入口是在源码根目录下的Makefile.编译的各种命令都应该在源码根目录下键入.\n整个主Makefile的结构如下:\n\n```\nworld:\nifneq ($(OPENWRT_BUILD),1)\n\t顶层\nelse\n\t第二层\nendif\n```\n\n开始部分是一些注释和变量定义及路径检查.\n根据**Makefile的规则**,在没有指定编译目标的时候,Makefile中的第一个目标将作为默认目标.\n换句话说,当我们执行`make V=s`时,这个时候编译的目标就是`world`.和我们执行`make world V=s`效果是一样的.\n\n## 顶层\n通常在编译时,我们不会定义变量`OPENWRT_BUILD`的值,所以通常我们是会走到顶层的.\n顶层代码如下:\n\n```bash\n  _SINGLE=export MAKEFLAGS=$(space);\n\n  override OPENWRT_BUILD=1\n  export OPENWRT_BUILD\n  GREP_OPTIONS=\n  export GREP_OPTIONS\n  include $(TOPDIR)/include/debug.mk\n  include $(TOPDIR)/include/depends.mk\n  include $(TOPDIR)/include/toplevel.mk\n```\n\n这里我们看到变量`OPENWRT_BUILD`被置为1.然后包含了3个`.mk`文件.\n这里稍微解释下`.mk`文件.它们一般没有什么执行动作,都是一些变量的定义还有依赖关系的说明.可以类比于C语言的头文件来理解.\n\ndebug.mk:\n> 可以通过定义DEBUG的值来控制编译过程\n\ndepends.mk\n> 主要定义了rdep这个变量\n\ntoplevel.mk\n>这个是我们跟踪编译过程的重要的文件.这个文件在源码根目录下的`include`文件夹下.\n\n核心代码如下:\n\n```\n%::\n\t@+$(PREP_MK) $(NO_TRACE_MAKE) -r -s prereq\n\t@( \\\n\t\tcp .config tmp/.config; \\\n\t\t./scripts/config/conf --defconfig=tmp/.config -w tmp/.config Config.in > /dev/null 2>&1; \\\n\t\tif ./scripts/kconfig.pl '>' .config tmp/.config | grep -q CONFIG; then \\\n\t\t\tprintf \"$(_R)WARNING: your configuration is out of sync. Please run make menuconfig, oldconfig or defconfig!$(_N)\\n\" >&2; \\\n\t\tfi \\\n\t)\n\t@+$(ULIMIT_FIX) $(SUBMAKE) -r $@ $(if $(WARN_PARALLEL_ERROR), || { \\\n\t\tprintf \"$(_R)Build failed - please re-run with -j1 to see the real error message$(_N)\\n\" >&2; \\\n\t\tfalse; \\\n\t} )\n```\n\n除了少数在toplevel中被定义的目标外,其他编译目标都会走到这里.将之简化后:\n\n```\n%::\n\tmake prereq\n\tmake $@\n```\n\n首先执行`prereq`,然后再执行我们指定的目标或者默认目标`world`.\nprereq整理后的依赖关系如下:\n![prereq](http://img.blog.csdn.net/20151226142730074)\n其中\nstaging_dir/host/.prereq-build:\n> 将会执行一系列主机检查,是否安装了必要的软件.\n\nprepare-tmpinfo:\n> 根据scan.mk,扫描`target/linux`和`package`目录,生成packageinfo和targetinfo.\n\n总之,顶层完成一系列必要的准备工作.对于绝大多数的目标而言,顶层是必经之路.当然,在`toplevel.mk`中,我们也可以看到目标`menuconfig`.也就是说对于目标`menuconfig`而言,将不会执行到第二层的逻辑.\n\n\n## 第二层\n在上面执行完`make prereq`之后,将执行`make world`.\n还记得我们进入顶层后修改了变量`OPENWRT_BUILD`么?当再次执行`make world`的时候,由于条件不满足,我们将直接进入第二层来执行.\n\n```\n  include rules.mk\n  include $(INCLUDE_DIR)/depends.mk\n  include $(INCLUDE_DIR)/subdir.mk\n  include target/Makefile\n  include package/Makefile\n  include tools/Makefile\n  include toolchain/Makefile\n```\n\nrules.mk:\n> 很重要的一个mk文件,其中规定了很多有用的变量,包括各种目录路径的定义,交叉编译器等等.其中\n> ```\n> ifeq ($(DUMP),)\n  -include $(TOPDIR)/.config\nendif\n> ```\n> 就是包含了我们的配置文件.对于`Makefile`而言,`.config`文件就是一大串变量的定义.Makefile可以直接读取这些定义,从而控制编译过程.\n\nsubdir.mk:\n> 这个是读懂我们整个编译过程的**关键**所在,其中主要定义了两个函数:*subdir*和*stampfile*,我们稍后加以解释.\n\n接下来,包含了4个Makefile文件.我们以`target/Makefile`为例.该文件位于`target`目录下.\n核心部分为:\n\n```\n$(eval $(call stampfile,$(curdir),target,prereq,.config))\n$(eval $(call stampfile,$(curdir),target,compile,$(TMP_DIR)/.build))\n$(eval $(call stampfile,$(curdir),target,install,$(TMP_DIR)/.build))\n\n$(eval $(call subdir,$(curdir)))\n```\n\n这里调用了`subdir.mk`中定义的`stampfile`函数.将会生成`target/stamp-prereq`,`target/stamp-compile`,`target/stamp-install`三个变量.\n以`target/stamp-prereq`为例,执行部分为`make target/prereq`.同理`target/stamp-compile`,执行部分为`make target/compile`.\n\n最后又调用了`sbudir`函数,这个函数规定了目标和各子文件夹之间的依赖关系.如果有一定的Makefile基础可以去读读`subdir.mk`文件.\n举例而言就是:\n> 当执行目标为`target/compile`,这个目标将依赖于`target/linux/compile`.\n> 当执行目标为`package/compile`,这个目标将依赖于`package`目录下,各子文件夹的`compile`.\n\n下面就是规定了一系列的依赖关系,我已经将他们梳理了出来,如下图:\n![world](http://img.blog.csdn.net/20151226151210514)\n\n这里就是第二层解析后的依赖关系.当依赖关系生成后,将会从最先被依赖的目标开始执行.\n比如我们可以看到进入第二层后,`tools/stamp-install`将会最先被执行,也就是主机工具将会最先被编译,安装.我们上一篇提高的整个编译过程能从上图中得出.\n\n\n## 尾记\n1. 想要读懂Makefile,首先要梳理各个依赖关系.而要梳理各个依赖关系,关键要关注冒号和`make -C`\n2. 本周我们解析了主Makefile,在Makefile的执行过程中要理解make的执行过程.先读入Makefile,然后构建依赖关系,最后最先被依赖的目标将会先执行.\n3. 我主要描绘了主要枝干,如果希望了解更多细节,还是要自己去阅读Makefile.\n3. 接下来两篇,我们将主要分析下,和我们开发者比较相关的两个目标的执行过程:`package/stamp-compile`和`target/stamp-install`.下周再会^_^\n","slug":"openwrt主Makefile解析","published":1,"date":"2015-12-25T16:00:00.000Z","updated":"2016-04-07T07:00:47.297Z","photos":[],"link":"","_id":"cimpzdpnx000rm1f1oatedcw5","content":"<p>本周成胖子每周一博到了第四周</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前一篇,我们大概描述了整个镜像文件的生成过程.本周我们来解析主Makefile,看看主要编译过程是怎么产生的.</p>\n<a id=\"more\"></a>\n<h2 id=\"主Makefile结构\"><a href=\"#主Makefile结构\" class=\"headerlink\" title=\"主Makefile结构\"></a>主Makefile结构</h2><p>我们以<code>chaos calmer</code>的代码为例,整个编译的入口是在源码根目录下的Makefile.编译的各种命令都应该在源码根目录下键入.<br>整个主Makefile的结构如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">world:</span><br><span class=\"line\">ifneq ($(OPENWRT_BUILD),1)</span><br><span class=\"line\">\t顶层</span><br><span class=\"line\">else</span><br><span class=\"line\">\t第二层</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n<p>开始部分是一些注释和变量定义及路径检查.<br>根据<strong>Makefile的规则</strong>,在没有指定编译目标的时候,Makefile中的第一个目标将作为默认目标.<br>换句话说,当我们执行<code>make V=s</code>时,这个时候编译的目标就是<code>world</code>.和我们执行<code>make world V=s</code>效果是一样的.</p>\n<h2 id=\"顶层\"><a href=\"#顶层\" class=\"headerlink\" title=\"顶层\"></a>顶层</h2><p>通常在编译时,我们不会定义变量<code>OPENWRT_BUILD</code>的值,所以通常我们是会走到顶层的.<br>顶层代码如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_SINGLE=<span class=\"built_in\">export</span> MAKEFLAGS=$(space);</span><br><span class=\"line\"></span><br><span class=\"line\">override OPENWRT_BUILD=1</span><br><span class=\"line\"><span class=\"built_in\">export</span> OPENWRT_BUILD</span><br><span class=\"line\">GREP_OPTIONS=</span><br><span class=\"line\"><span class=\"built_in\">export</span> GREP_OPTIONS</span><br><span class=\"line\">include $(TOPDIR)/include/debug.mk</span><br><span class=\"line\">include $(TOPDIR)/include/depends.mk</span><br><span class=\"line\">include $(TOPDIR)/include/toplevel.mk</span><br></pre></td></tr></table></figure>\n<p>这里我们看到变量<code>OPENWRT_BUILD</code>被置为1.然后包含了3个<code>.mk</code>文件.<br>这里稍微解释下<code>.mk</code>文件.它们一般没有什么执行动作,都是一些变量的定义还有依赖关系的说明.可以类比于C语言的头文件来理解.</p>\n<p>debug.mk:</p>\n<blockquote>\n<p>可以通过定义DEBUG的值来控制编译过程</p>\n</blockquote>\n<p>depends.mk</p>\n<blockquote>\n<p>主要定义了rdep这个变量</p>\n</blockquote>\n<p>toplevel.mk</p>\n<blockquote>\n<p>这个是我们跟踪编译过程的重要的文件.这个文件在源码根目录下的<code>include</code>文件夹下.</p>\n</blockquote>\n<p>核心代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%::</span><br><span class=\"line\">\t@+$(PREP_MK) $(NO_TRACE_MAKE) -r -s prereq</span><br><span class=\"line\">\t@( \\</span><br><span class=\"line\">\t\tcp .config tmp/.config; \\</span><br><span class=\"line\">\t\t./scripts/config/conf --defconfig=tmp/.config -w tmp/.config Config.in &gt; /dev/null 2&gt;&amp;1; \\</span><br><span class=\"line\">\t\tif ./scripts/kconfig.pl &apos;&gt;&apos; .config tmp/.config | grep -q CONFIG; then \\</span><br><span class=\"line\">\t\t\tprintf &quot;$(_R)WARNING: your configuration is out of sync. Please run make menuconfig, oldconfig or defconfig!$(_N)\\n&quot; &gt;&amp;2; \\</span><br><span class=\"line\">\t\tfi \\</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t@+$(ULIMIT_FIX) $(SUBMAKE) -r $@ $(if $(WARN_PARALLEL_ERROR), || &#123; \\</span><br><span class=\"line\">\t\tprintf &quot;$(_R)Build failed - please re-run with -j1 to see the real error message$(_N)\\n&quot; &gt;&amp;2; \\</span><br><span class=\"line\">\t\tfalse; \\</span><br><span class=\"line\">\t&#125; )</span><br></pre></td></tr></table></figure>\n<p>除了少数在toplevel中被定义的目标外,其他编译目标都会走到这里.将之简化后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%::</span><br><span class=\"line\">\tmake prereq</span><br><span class=\"line\">\tmake $@</span><br></pre></td></tr></table></figure>\n<p>首先执行<code>prereq</code>,然后再执行我们指定的目标或者默认目标<code>world</code>.<br>prereq整理后的依赖关系如下:<br><img src=\"http://img.blog.csdn.net/20151226142730074\" alt=\"prereq\"><br>其中<br>staging_dir/host/.prereq-build:</p>\n<blockquote>\n<p>将会执行一系列主机检查,是否安装了必要的软件.</p>\n</blockquote>\n<p>prepare-tmpinfo:</p>\n<blockquote>\n<p>根据scan.mk,扫描<code>target/linux</code>和<code>package</code>目录,生成packageinfo和targetinfo.</p>\n</blockquote>\n<p>总之,顶层完成一系列必要的准备工作.对于绝大多数的目标而言,顶层是必经之路.当然,在<code>toplevel.mk</code>中,我们也可以看到目标<code>menuconfig</code>.也就是说对于目标<code>menuconfig</code>而言,将不会执行到第二层的逻辑.</p>\n<h2 id=\"第二层\"><a href=\"#第二层\" class=\"headerlink\" title=\"第二层\"></a>第二层</h2><p>在上面执行完<code>make prereq</code>之后,将执行<code>make world</code>.<br>还记得我们进入顶层后修改了变量<code>OPENWRT_BUILD</code>么?当再次执行<code>make world</code>的时候,由于条件不满足,我们将直接进入第二层来执行.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include rules.mk</span><br><span class=\"line\">include $(INCLUDE_DIR)/depends.mk</span><br><span class=\"line\">include $(INCLUDE_DIR)/subdir.mk</span><br><span class=\"line\">include target/Makefile</span><br><span class=\"line\">include package/Makefile</span><br><span class=\"line\">include tools/Makefile</span><br><span class=\"line\">include toolchain/Makefile</span><br></pre></td></tr></table></figure>\n<p>rules.mk:</p>\n<blockquote>\n<p>很重要的一个mk文件,其中规定了很多有用的变量,包括各种目录路径的定义,交叉编译器等等.其中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ifeq ($(DUMP),)</span><br><span class=\"line\">  -include $(TOPDIR)/.config</span><br><span class=\"line\">endif</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<p>就是包含了我们的配置文件.对于<code>Makefile</code>而言,<code>.config</code>文件就是一大串变量的定义.Makefile可以直接读取这些定义,从而控制编译过程.</p>\n</blockquote>\n<p>subdir.mk:</p>\n<blockquote>\n<p>这个是读懂我们整个编译过程的<strong>关键</strong>所在,其中主要定义了两个函数:<em>subdir</em>和<em>stampfile</em>,我们稍后加以解释.</p>\n</blockquote>\n<p>接下来,包含了4个Makefile文件.我们以<code>target/Makefile</code>为例.该文件位于<code>target</code>目录下.<br>核心部分为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(eval $(call stampfile,$(curdir),target,prereq,.config))</span><br><span class=\"line\">$(eval $(call stampfile,$(curdir),target,compile,$(TMP_DIR)/.build))</span><br><span class=\"line\">$(eval $(call stampfile,$(curdir),target,install,$(TMP_DIR)/.build))</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call subdir,$(curdir)))</span><br></pre></td></tr></table></figure>\n<p>这里调用了<code>subdir.mk</code>中定义的<code>stampfile</code>函数.将会生成<code>target/stamp-prereq</code>,<code>target/stamp-compile</code>,<code>target/stamp-install</code>三个变量.<br>以<code>target/stamp-prereq</code>为例,执行部分为<code>make target/prereq</code>.同理<code>target/stamp-compile</code>,执行部分为<code>make target/compile</code>.</p>\n<p>最后又调用了<code>sbudir</code>函数,这个函数规定了目标和各子文件夹之间的依赖关系.如果有一定的Makefile基础可以去读读<code>subdir.mk</code>文件.<br>举例而言就是:</p>\n<blockquote>\n<p>当执行目标为<code>target/compile</code>,这个目标将依赖于<code>target/linux/compile</code>.<br>当执行目标为<code>package/compile</code>,这个目标将依赖于<code>package</code>目录下,各子文件夹的<code>compile</code>.</p>\n</blockquote>\n<p>下面就是规定了一系列的依赖关系,我已经将他们梳理了出来,如下图:<br><img src=\"http://img.blog.csdn.net/20151226151210514\" alt=\"world\"></p>\n<p>这里就是第二层解析后的依赖关系.当依赖关系生成后,将会从最先被依赖的目标开始执行.<br>比如我们可以看到进入第二层后,<code>tools/stamp-install</code>将会最先被执行,也就是主机工具将会最先被编译,安装.我们上一篇提高的整个编译过程能从上图中得出.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><ol>\n<li>想要读懂Makefile,首先要梳理各个依赖关系.而要梳理各个依赖关系,关键要关注冒号和<code>make -C</code></li>\n<li>本周我们解析了主Makefile,在Makefile的执行过程中要理解make的执行过程.先读入Makefile,然后构建依赖关系,最后最先被依赖的目标将会先执行.</li>\n<li>我主要描绘了主要枝干,如果希望了解更多细节,还是要自己去阅读Makefile.</li>\n<li>接下来两篇,我们将主要分析下,和我们开发者比较相关的两个目标的执行过程:<code>package/stamp-compile</code>和<code>target/stamp-install</code>.下周再会^_^</li>\n</ol>\n","excerpt":"<p>本周成胖子每周一博到了第四周</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前一篇,我们大概描述了整个镜像文件的生成过程.本周我们来解析主Makefile,看看主要编译过程是怎么产生的.</p>","more":"<h2 id=\"主Makefile结构\"><a href=\"#主Makefile结构\" class=\"headerlink\" title=\"主Makefile结构\"></a>主Makefile结构</h2><p>我们以<code>chaos calmer</code>的代码为例,整个编译的入口是在源码根目录下的Makefile.编译的各种命令都应该在源码根目录下键入.<br>整个主Makefile的结构如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">world:</span><br><span class=\"line\">ifneq ($(OPENWRT_BUILD),1)</span><br><span class=\"line\">\t顶层</span><br><span class=\"line\">else</span><br><span class=\"line\">\t第二层</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n<p>开始部分是一些注释和变量定义及路径检查.<br>根据<strong>Makefile的规则</strong>,在没有指定编译目标的时候,Makefile中的第一个目标将作为默认目标.<br>换句话说,当我们执行<code>make V=s</code>时,这个时候编译的目标就是<code>world</code>.和我们执行<code>make world V=s</code>效果是一样的.</p>\n<h2 id=\"顶层\"><a href=\"#顶层\" class=\"headerlink\" title=\"顶层\"></a>顶层</h2><p>通常在编译时,我们不会定义变量<code>OPENWRT_BUILD</code>的值,所以通常我们是会走到顶层的.<br>顶层代码如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_SINGLE=<span class=\"built_in\">export</span> MAKEFLAGS=$(space);</span><br><span class=\"line\"></span><br><span class=\"line\">override OPENWRT_BUILD=1</span><br><span class=\"line\"><span class=\"built_in\">export</span> OPENWRT_BUILD</span><br><span class=\"line\">GREP_OPTIONS=</span><br><span class=\"line\"><span class=\"built_in\">export</span> GREP_OPTIONS</span><br><span class=\"line\">include $(TOPDIR)/include/debug.mk</span><br><span class=\"line\">include $(TOPDIR)/include/depends.mk</span><br><span class=\"line\">include $(TOPDIR)/include/toplevel.mk</span><br></pre></td></tr></table></figure>\n<p>这里我们看到变量<code>OPENWRT_BUILD</code>被置为1.然后包含了3个<code>.mk</code>文件.<br>这里稍微解释下<code>.mk</code>文件.它们一般没有什么执行动作,都是一些变量的定义还有依赖关系的说明.可以类比于C语言的头文件来理解.</p>\n<p>debug.mk:</p>\n<blockquote>\n<p>可以通过定义DEBUG的值来控制编译过程</p>\n</blockquote>\n<p>depends.mk</p>\n<blockquote>\n<p>主要定义了rdep这个变量</p>\n</blockquote>\n<p>toplevel.mk</p>\n<blockquote>\n<p>这个是我们跟踪编译过程的重要的文件.这个文件在源码根目录下的<code>include</code>文件夹下.</p>\n</blockquote>\n<p>核心代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%::</span><br><span class=\"line\">\t@+$(PREP_MK) $(NO_TRACE_MAKE) -r -s prereq</span><br><span class=\"line\">\t@( \\</span><br><span class=\"line\">\t\tcp .config tmp/.config; \\</span><br><span class=\"line\">\t\t./scripts/config/conf --defconfig=tmp/.config -w tmp/.config Config.in &gt; /dev/null 2&gt;&amp;1; \\</span><br><span class=\"line\">\t\tif ./scripts/kconfig.pl &apos;&gt;&apos; .config tmp/.config | grep -q CONFIG; then \\</span><br><span class=\"line\">\t\t\tprintf &quot;$(_R)WARNING: your configuration is out of sync. Please run make menuconfig, oldconfig or defconfig!$(_N)\\n&quot; &gt;&amp;2; \\</span><br><span class=\"line\">\t\tfi \\</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t@+$(ULIMIT_FIX) $(SUBMAKE) -r $@ $(if $(WARN_PARALLEL_ERROR), || &#123; \\</span><br><span class=\"line\">\t\tprintf &quot;$(_R)Build failed - please re-run with -j1 to see the real error message$(_N)\\n&quot; &gt;&amp;2; \\</span><br><span class=\"line\">\t\tfalse; \\</span><br><span class=\"line\">\t&#125; )</span><br></pre></td></tr></table></figure>\n<p>除了少数在toplevel中被定义的目标外,其他编译目标都会走到这里.将之简化后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%::</span><br><span class=\"line\">\tmake prereq</span><br><span class=\"line\">\tmake $@</span><br></pre></td></tr></table></figure>\n<p>首先执行<code>prereq</code>,然后再执行我们指定的目标或者默认目标<code>world</code>.<br>prereq整理后的依赖关系如下:<br><img src=\"http://img.blog.csdn.net/20151226142730074\" alt=\"prereq\"><br>其中<br>staging_dir/host/.prereq-build:</p>\n<blockquote>\n<p>将会执行一系列主机检查,是否安装了必要的软件.</p>\n</blockquote>\n<p>prepare-tmpinfo:</p>\n<blockquote>\n<p>根据scan.mk,扫描<code>target/linux</code>和<code>package</code>目录,生成packageinfo和targetinfo.</p>\n</blockquote>\n<p>总之,顶层完成一系列必要的准备工作.对于绝大多数的目标而言,顶层是必经之路.当然,在<code>toplevel.mk</code>中,我们也可以看到目标<code>menuconfig</code>.也就是说对于目标<code>menuconfig</code>而言,将不会执行到第二层的逻辑.</p>\n<h2 id=\"第二层\"><a href=\"#第二层\" class=\"headerlink\" title=\"第二层\"></a>第二层</h2><p>在上面执行完<code>make prereq</code>之后,将执行<code>make world</code>.<br>还记得我们进入顶层后修改了变量<code>OPENWRT_BUILD</code>么?当再次执行<code>make world</code>的时候,由于条件不满足,我们将直接进入第二层来执行.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include rules.mk</span><br><span class=\"line\">include $(INCLUDE_DIR)/depends.mk</span><br><span class=\"line\">include $(INCLUDE_DIR)/subdir.mk</span><br><span class=\"line\">include target/Makefile</span><br><span class=\"line\">include package/Makefile</span><br><span class=\"line\">include tools/Makefile</span><br><span class=\"line\">include toolchain/Makefile</span><br></pre></td></tr></table></figure>\n<p>rules.mk:</p>\n<blockquote>\n<p>很重要的一个mk文件,其中规定了很多有用的变量,包括各种目录路径的定义,交叉编译器等等.其中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; ifeq ($(DUMP),)</span><br><span class=\"line\">  -include $(TOPDIR)/.config</span><br><span class=\"line\">endif</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<p>就是包含了我们的配置文件.对于<code>Makefile</code>而言,<code>.config</code>文件就是一大串变量的定义.Makefile可以直接读取这些定义,从而控制编译过程.</p>\n</blockquote>\n<p>subdir.mk:</p>\n<blockquote>\n<p>这个是读懂我们整个编译过程的<strong>关键</strong>所在,其中主要定义了两个函数:<em>subdir</em>和<em>stampfile</em>,我们稍后加以解释.</p>\n</blockquote>\n<p>接下来,包含了4个Makefile文件.我们以<code>target/Makefile</code>为例.该文件位于<code>target</code>目录下.<br>核心部分为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(eval $(call stampfile,$(curdir),target,prereq,.config))</span><br><span class=\"line\">$(eval $(call stampfile,$(curdir),target,compile,$(TMP_DIR)/.build))</span><br><span class=\"line\">$(eval $(call stampfile,$(curdir),target,install,$(TMP_DIR)/.build))</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call subdir,$(curdir)))</span><br></pre></td></tr></table></figure>\n<p>这里调用了<code>subdir.mk</code>中定义的<code>stampfile</code>函数.将会生成<code>target/stamp-prereq</code>,<code>target/stamp-compile</code>,<code>target/stamp-install</code>三个变量.<br>以<code>target/stamp-prereq</code>为例,执行部分为<code>make target/prereq</code>.同理<code>target/stamp-compile</code>,执行部分为<code>make target/compile</code>.</p>\n<p>最后又调用了<code>sbudir</code>函数,这个函数规定了目标和各子文件夹之间的依赖关系.如果有一定的Makefile基础可以去读读<code>subdir.mk</code>文件.<br>举例而言就是:</p>\n<blockquote>\n<p>当执行目标为<code>target/compile</code>,这个目标将依赖于<code>target/linux/compile</code>.<br>当执行目标为<code>package/compile</code>,这个目标将依赖于<code>package</code>目录下,各子文件夹的<code>compile</code>.</p>\n</blockquote>\n<p>下面就是规定了一系列的依赖关系,我已经将他们梳理了出来,如下图:<br><img src=\"http://img.blog.csdn.net/20151226151210514\" alt=\"world\"></p>\n<p>这里就是第二层解析后的依赖关系.当依赖关系生成后,将会从最先被依赖的目标开始执行.<br>比如我们可以看到进入第二层后,<code>tools/stamp-install</code>将会最先被执行,也就是主机工具将会最先被编译,安装.我们上一篇提高的整个编译过程能从上图中得出.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><ol>\n<li>想要读懂Makefile,首先要梳理各个依赖关系.而要梳理各个依赖关系,关键要关注冒号和<code>make -C</code></li>\n<li>本周我们解析了主Makefile,在Makefile的执行过程中要理解make的执行过程.先读入Makefile,然后构建依赖关系,最后最先被依赖的目标将会先执行.</li>\n<li>我主要描绘了主要枝干,如果希望了解更多细节,还是要自己去阅读Makefile.</li>\n<li>接下来两篇,我们将主要分析下,和我们开发者比较相关的两个目标的执行过程:<code>package/stamp-compile</code>和<code>target/stamp-install</code>.下周再会^_^</li>\n</ol>"},{"layout":"post","title":"第一个lxc容器","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第七周:)\n\n---\n\n##前言\n\n&emsp;&emsp;我的工作是做路由器开发的.为了实现一次开发在不同平台的快速部署,我们尝试在路由器运行LXC容器.通过它来实现我们的虚拟化目标,我们通过打开内核开关,交叉编译lxc工具以及制作基于busybox的简单文件系统,已经达到了基本目标.同时我们在容器内移植了openwrt的opkg功能,使得容器内部可以通过opkg的方式快速安装ipk,从而在传统路由器上快速实现了openwrt的特色功能.\n\n<!--more-->\n\n&emsp;&emsp;虽然基本功能可以使用了,但是我的LXC基础还是很薄弱.周末花点时间看看.本文主要基于LXC的核心开发者之一stephan Graber的[博客](https://www.stgraber.org/2013/12/20/lxc-1-0-blog-post-series/).\n\n---\n\n##第一个Ubuntu容器\n\n###什么是LXC?\nLXC是linux内核提供给用户空间的接口.通过强大的API和简单的工具,用户可以轻松创建和管理容器.博客的作者stephan Graber是LXC的主要维护者之一.\n\n* LXC的源码托管在github上.[地址](http://github.com/lxc)\n* LXC的项目主页.[地址](http://linuxcontainers.org)\n\n###安装LXC\n\nLXC 1.0是LXC的第一个长期稳定版本.Ubuntu的用户可以直接通过命令行安装LXC,其他用户可以下载LXC源码然后手动编译.\n命令行安装如下:\n\n```\nsudo apt-get install lxc lxctl lxc-templates\n```\n\n手动安装如下\n\n```\ngit clone git://github.com/lxc/lxc\ncd lxc\nsh autogen.sh\n# You will probably want to run the configure script with --help and then set the paths\n./configure\nmake\nsudo make install\n```\n\n###运行LXC\n\n运行LXC的过程很简单,只需要简单几个命令,如下:\n\n```\n# 建立使用\"ubuntu\"模板建立一个名为\"p1\"的容器.Ubuntu版本和体系结构与主机相同.\n# 可以使用\"--help\"查询所有选项\nsudo lxc-create -t ubuntu -n p1\n\n# 在后台启动一个已经创建的容器\nsudo lxc-start -n p1 -d\n\n# 使用以下方式进入容器\n## 进入一个容器的控制台(使用ctrl-a + q 来脱离容器的控制台)\nsudo lxc-console -n p1\n\n## Spawn bash directly in the container (bypassing the console login), requires a >= 3.8 kernel\n## 直接进入容器中的bash\nsudo lxc-attach -n p1\n\n## SSH 登陆容器\nsudo lxc-info -n p1\nssh ubuntu@<ip from lxc-info>\n\n# 使用以下方式关闭容器\n## 在容器内部关闭容器\nsudo poweroff\n\n## 在容器外部彻底关闭容器\nsudo lxc-stop -n p1\n\n## 在容器外部杀死容器进程\nsudo lxc-stop -n p1 -k\n```\n\n&emsp;相信以上的命令,大家基本都能直接看懂.试两把也就熟悉了.Ubuntu12.04之后的版本是直接支持所有LXC的所有特性的.\n\n&emsp;当容器建立之后,容器内的网络就已经配置完成了.这个时候HostOs将会建立一个二层桥设备`lxcbr0`,同时建立一个DHCP服务器为容器内的系统提供服务.\n\n---\n\n##尾记\n&emsp;本周时间比较匆忙,我和我媳妇搭建了我们自己的博客小站,欢迎大家访问.[传送门](http://chengyi818.github.io/)\n","source":"_posts/2016-01-17-第一个lxc容器.md","raw":"---\nlayout: post\ntitle: 第一个lxc容器\ncategory: docker\ntags: lxc\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第七周:)\n\n---\n\n##前言\n\n&emsp;&emsp;我的工作是做路由器开发的.为了实现一次开发在不同平台的快速部署,我们尝试在路由器运行LXC容器.通过它来实现我们的虚拟化目标,我们通过打开内核开关,交叉编译lxc工具以及制作基于busybox的简单文件系统,已经达到了基本目标.同时我们在容器内移植了openwrt的opkg功能,使得容器内部可以通过opkg的方式快速安装ipk,从而在传统路由器上快速实现了openwrt的特色功能.\n\n<!--more-->\n\n&emsp;&emsp;虽然基本功能可以使用了,但是我的LXC基础还是很薄弱.周末花点时间看看.本文主要基于LXC的核心开发者之一stephan Graber的[博客](https://www.stgraber.org/2013/12/20/lxc-1-0-blog-post-series/).\n\n---\n\n##第一个Ubuntu容器\n\n###什么是LXC?\nLXC是linux内核提供给用户空间的接口.通过强大的API和简单的工具,用户可以轻松创建和管理容器.博客的作者stephan Graber是LXC的主要维护者之一.\n\n* LXC的源码托管在github上.[地址](http://github.com/lxc)\n* LXC的项目主页.[地址](http://linuxcontainers.org)\n\n###安装LXC\n\nLXC 1.0是LXC的第一个长期稳定版本.Ubuntu的用户可以直接通过命令行安装LXC,其他用户可以下载LXC源码然后手动编译.\n命令行安装如下:\n\n```\nsudo apt-get install lxc lxctl lxc-templates\n```\n\n手动安装如下\n\n```\ngit clone git://github.com/lxc/lxc\ncd lxc\nsh autogen.sh\n# You will probably want to run the configure script with --help and then set the paths\n./configure\nmake\nsudo make install\n```\n\n###运行LXC\n\n运行LXC的过程很简单,只需要简单几个命令,如下:\n\n```\n# 建立使用\"ubuntu\"模板建立一个名为\"p1\"的容器.Ubuntu版本和体系结构与主机相同.\n# 可以使用\"--help\"查询所有选项\nsudo lxc-create -t ubuntu -n p1\n\n# 在后台启动一个已经创建的容器\nsudo lxc-start -n p1 -d\n\n# 使用以下方式进入容器\n## 进入一个容器的控制台(使用ctrl-a + q 来脱离容器的控制台)\nsudo lxc-console -n p1\n\n## Spawn bash directly in the container (bypassing the console login), requires a >= 3.8 kernel\n## 直接进入容器中的bash\nsudo lxc-attach -n p1\n\n## SSH 登陆容器\nsudo lxc-info -n p1\nssh ubuntu@<ip from lxc-info>\n\n# 使用以下方式关闭容器\n## 在容器内部关闭容器\nsudo poweroff\n\n## 在容器外部彻底关闭容器\nsudo lxc-stop -n p1\n\n## 在容器外部杀死容器进程\nsudo lxc-stop -n p1 -k\n```\n\n&emsp;相信以上的命令,大家基本都能直接看懂.试两把也就熟悉了.Ubuntu12.04之后的版本是直接支持所有LXC的所有特性的.\n\n&emsp;当容器建立之后,容器内的网络就已经配置完成了.这个时候HostOs将会建立一个二层桥设备`lxcbr0`,同时建立一个DHCP服务器为容器内的系统提供服务.\n\n---\n\n##尾记\n&emsp;本周时间比较匆忙,我和我媳妇搭建了我们自己的博客小站,欢迎大家访问.[传送门](http://chengyi818.github.io/)\n","slug":"第一个lxc容器","published":1,"date":"2016-01-16T16:00:00.000Z","updated":"2016-04-07T07:01:07.597Z","photos":[],"link":"","_id":"cimpzdpnz000vm1f1sn9u0tnt","content":"<p>本周是成胖子每周一博的第七周:)</p>\n<hr>\n<p>##前言</p>\n<p>&emsp;&emsp;我的工作是做路由器开发的.为了实现一次开发在不同平台的快速部署,我们尝试在路由器运行LXC容器.通过它来实现我们的虚拟化目标,我们通过打开内核开关,交叉编译lxc工具以及制作基于busybox的简单文件系统,已经达到了基本目标.同时我们在容器内移植了openwrt的opkg功能,使得容器内部可以通过opkg的方式快速安装ipk,从而在传统路由器上快速实现了openwrt的特色功能.</p>\n<a id=\"more\"></a>\n<p>&emsp;&emsp;虽然基本功能可以使用了,但是我的LXC基础还是很薄弱.周末花点时间看看.本文主要基于LXC的核心开发者之一stephan Graber的<a href=\"https://www.stgraber.org/2013/12/20/lxc-1-0-blog-post-series/\" target=\"_blank\" rel=\"external\">博客</a>.</p>\n<hr>\n<p>##第一个Ubuntu容器</p>\n<p>###什么是LXC?<br>LXC是linux内核提供给用户空间的接口.通过强大的API和简单的工具,用户可以轻松创建和管理容器.博客的作者stephan Graber是LXC的主要维护者之一.</p>\n<ul>\n<li>LXC的源码托管在github上.<a href=\"http://github.com/lxc\" target=\"_blank\" rel=\"external\">地址</a></li>\n<li>LXC的项目主页.<a href=\"http://linuxcontainers.org\" target=\"_blank\" rel=\"external\">地址</a></li>\n</ul>\n<p>###安装LXC</p>\n<p>LXC 1.0是LXC的第一个长期稳定版本.Ubuntu的用户可以直接通过命令行安装LXC,其他用户可以下载LXC源码然后手动编译.<br>命令行安装如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lxc lxctl lxc-templates</span><br></pre></td></tr></table></figure>\n<p>手动安装如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/lxc/lxc</span><br><span class=\"line\">cd lxc</span><br><span class=\"line\">sh autogen.sh</span><br><span class=\"line\"># You will probably want to run the configure script with --help and then set the paths</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>###运行LXC</p>\n<p>运行LXC的过程很简单,只需要简单几个命令,如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 建立使用&quot;ubuntu&quot;模板建立一个名为&quot;p1&quot;的容器.Ubuntu版本和体系结构与主机相同.</span><br><span class=\"line\"># 可以使用&quot;--help&quot;查询所有选项</span><br><span class=\"line\">sudo lxc-create -t ubuntu -n p1</span><br><span class=\"line\"></span><br><span class=\"line\"># 在后台启动一个已经创建的容器</span><br><span class=\"line\">sudo lxc-start -n p1 -d</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用以下方式进入容器</span><br><span class=\"line\">## 进入一个容器的控制台(使用ctrl-a + q 来脱离容器的控制台)</span><br><span class=\"line\">sudo lxc-console -n p1</span><br><span class=\"line\"></span><br><span class=\"line\">## Spawn bash directly in the container (bypassing the console login), requires a &gt;= 3.8 kernel</span><br><span class=\"line\">## 直接进入容器中的bash</span><br><span class=\"line\">sudo lxc-attach -n p1</span><br><span class=\"line\"></span><br><span class=\"line\">## SSH 登陆容器</span><br><span class=\"line\">sudo lxc-info -n p1</span><br><span class=\"line\">ssh ubuntu@&lt;ip from lxc-info&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用以下方式关闭容器</span><br><span class=\"line\">## 在容器内部关闭容器</span><br><span class=\"line\">sudo poweroff</span><br><span class=\"line\"></span><br><span class=\"line\">## 在容器外部彻底关闭容器</span><br><span class=\"line\">sudo lxc-stop -n p1</span><br><span class=\"line\"></span><br><span class=\"line\">## 在容器外部杀死容器进程</span><br><span class=\"line\">sudo lxc-stop -n p1 -k</span><br></pre></td></tr></table></figure>\n<p>&emsp;相信以上的命令,大家基本都能直接看懂.试两把也就熟悉了.Ubuntu12.04之后的版本是直接支持所有LXC的所有特性的.</p>\n<p>&emsp;当容器建立之后,容器内的网络就已经配置完成了.这个时候HostOs将会建立一个二层桥设备<code>lxcbr0</code>,同时建立一个DHCP服务器为容器内的系统提供服务.</p>\n<hr>\n<p>##尾记<br>&emsp;本周时间比较匆忙,我和我媳妇搭建了我们自己的博客小站,欢迎大家访问.<a href=\"http://chengyi818.github.io/\" target=\"_blank\" rel=\"external\">传送门</a></p>\n","excerpt":"<p>本周是成胖子每周一博的第七周:)</p>\n<hr>\n<p>##前言</p>\n<p>&emsp;&emsp;我的工作是做路由器开发的.为了实现一次开发在不同平台的快速部署,我们尝试在路由器运行LXC容器.通过它来实现我们的虚拟化目标,我们通过打开内核开关,交叉编译lxc工具以及制作基于busybox的简单文件系统,已经达到了基本目标.同时我们在容器内移植了openwrt的opkg功能,使得容器内部可以通过opkg的方式快速安装ipk,从而在传统路由器上快速实现了openwrt的特色功能.</p>","more":"<p>&emsp;&emsp;虽然基本功能可以使用了,但是我的LXC基础还是很薄弱.周末花点时间看看.本文主要基于LXC的核心开发者之一stephan Graber的<a href=\"https://www.stgraber.org/2013/12/20/lxc-1-0-blog-post-series/\">博客</a>.</p>\n<hr>\n<p>##第一个Ubuntu容器</p>\n<p>###什么是LXC?<br>LXC是linux内核提供给用户空间的接口.通过强大的API和简单的工具,用户可以轻松创建和管理容器.博客的作者stephan Graber是LXC的主要维护者之一.</p>\n<ul>\n<li>LXC的源码托管在github上.<a href=\"http://github.com/lxc\">地址</a></li>\n<li>LXC的项目主页.<a href=\"http://linuxcontainers.org\">地址</a></li>\n</ul>\n<p>###安装LXC</p>\n<p>LXC 1.0是LXC的第一个长期稳定版本.Ubuntu的用户可以直接通过命令行安装LXC,其他用户可以下载LXC源码然后手动编译.<br>命令行安装如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lxc lxctl lxc-templates</span><br></pre></td></tr></table></figure>\n<p>手动安装如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git://github.com/lxc/lxc</span><br><span class=\"line\">cd lxc</span><br><span class=\"line\">sh autogen.sh</span><br><span class=\"line\"># You will probably want to run the configure script with --help and then set the paths</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>###运行LXC</p>\n<p>运行LXC的过程很简单,只需要简单几个命令,如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 建立使用&quot;ubuntu&quot;模板建立一个名为&quot;p1&quot;的容器.Ubuntu版本和体系结构与主机相同.</span><br><span class=\"line\"># 可以使用&quot;--help&quot;查询所有选项</span><br><span class=\"line\">sudo lxc-create -t ubuntu -n p1</span><br><span class=\"line\"></span><br><span class=\"line\"># 在后台启动一个已经创建的容器</span><br><span class=\"line\">sudo lxc-start -n p1 -d</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用以下方式进入容器</span><br><span class=\"line\">## 进入一个容器的控制台(使用ctrl-a + q 来脱离容器的控制台)</span><br><span class=\"line\">sudo lxc-console -n p1</span><br><span class=\"line\"></span><br><span class=\"line\">## Spawn bash directly in the container (bypassing the console login), requires a &gt;= 3.8 kernel</span><br><span class=\"line\">## 直接进入容器中的bash</span><br><span class=\"line\">sudo lxc-attach -n p1</span><br><span class=\"line\"></span><br><span class=\"line\">## SSH 登陆容器</span><br><span class=\"line\">sudo lxc-info -n p1</span><br><span class=\"line\">ssh ubuntu@&lt;ip from lxc-info&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用以下方式关闭容器</span><br><span class=\"line\">## 在容器内部关闭容器</span><br><span class=\"line\">sudo poweroff</span><br><span class=\"line\"></span><br><span class=\"line\">## 在容器外部彻底关闭容器</span><br><span class=\"line\">sudo lxc-stop -n p1</span><br><span class=\"line\"></span><br><span class=\"line\">## 在容器外部杀死容器进程</span><br><span class=\"line\">sudo lxc-stop -n p1 -k</span><br></pre></td></tr></table></figure>\n<p>&emsp;相信以上的命令,大家基本都能直接看懂.试两把也就熟悉了.Ubuntu12.04之后的版本是直接支持所有LXC的所有特性的.</p>\n<p>&emsp;当容器建立之后,容器内的网络就已经配置完成了.这个时候HostOs将会建立一个二层桥设备<code>lxcbr0</code>,同时建立一个DHCP服务器为容器内的系统提供服务.</p>\n<hr>\n<p>##尾记<br>&emsp;本周时间比较匆忙,我和我媳妇搭建了我们自己的博客小站,欢迎大家访问.<a href=\"http://chengyi818.github.io/\">传送门</a></p>"},{"layout":"post","title":"openwrt编译打包过程","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博第六周,更好地阅读体验,请点击[这里](https://www.zybuluo.com/icyriver/note/258252)\n\n---\n\n## 前言\n&emsp;前面我们已经讲了openwrt编译的大部分过程,包括大致的编译步骤,ipk的编译等.今天是我这个系列的最后一篇,我们来看看openwrt的各个部分是如何组织成为最后的bin文件的.\n\n<!--more-->\n\n&emsp;最后一个步骤当中,我们的执行的目标是**target/install**.\n\n## 执行过程推导\n我们首先通过Makefile来分析下我们的依赖关系.\n\n通过前几篇的分析,我们应当知道此时**target/install**将依赖于**target/linux/install**.\n如下是`target/linux/Makefile`的节选:\n\n```\nexport TARGET_BUILD=1\n\nprereq clean download prepare compile install menuconfig nconfig oldconfig update refresh: FORCE\n\t@+$(NO_TRACE_MAKE) -C $(BOARD) $@\n```\n\n我们可以看出,此时执行**compile**将会进入对应的目标平台执行目标**compile**,我们以mt7620a为例.它属于ramips平台.\n\n如下是`target/linux/ramips/Makefile`的节选:\n\n```\ninclude $(INCLUDE_DIR)/target.mk\n\n$(eval $(call BuildTarget))\n```\n\n在这个Makefile文件中,我们找不到目标**compile**,它被文件*target.mk*封装.我们在ipk的编译中,已经见过类似的用法.\n\n如下是`include/target.mk`的节选:\n\n```\nifeq ($(TARGET_BUILD),1)\n  include $(INCLUDE_DIR)/kernel-build.mk\n  BuildTarget?=$(BuildKernel)\nendif\n```\n\n从上面的节选我们看到变量**TARGET_BUILD**为1,所以这里函数*BuildTarget*其实等于在`kernel-build.mk`中定义的变量**BuildKernel**.\n\n如下是`include/kernel-build.mk`的节选:\n\n```\ndefine BuildKernel\n  $(if $(QUILT),$(Build/Quilt))\n  $(if $(LINUX_SITE),$(call Download,kernel))\n\n  $(STAMP_CONFIGURED): $(STAMP_PREPARED) $(LINUX_KCONFIG_LIST) $(TOPDIR)/.config\n\t$(Kernel/Configure)\n\ttouch $$@\n\n  $(LINUX_DIR)/.image: $(STAMP_CONFIGURED) $(if $(CONFIG_STRIP_KERNEL_EXPORTS),$(KERNEL_BUILD_DIR)/symtab.h) FORCE\n\t$(Kernel/CompileImage)\n\t$(Kernel/CollectDebug)\n\ttouch $$@\n\n  install: $(LINUX_DIR)/.image\n\t+$(MAKE) -C image compile install TARGET_BUILD=\n\nendef\n```\n\n&emsp;我们绕来绕去,终于找到了我们要的目标,**install**依赖于**$(LINUX_DIR)/.image**.其中**$(LINUX_DIR)/.image**的依赖和执行就在节选中,我们略过,\n\n&emsp;同时将进入image文件夹下,执行目标**compile**和**install**.下面我来看看进入image文件夹下,发生的故事.\n\n&emsp;打开`tareget/linux/ramips/image/Makefile`,我们找了一圈,也没找到我们要的目标**compile**和**install**;如果我们是完整编译,其实目标**compile**已经被执行过了.此时我们以**install**为目标.\n\n&emsp;玄机就在最后一句`$(eval $(call BuildImage))`中,函数*BuildImage*被定义在`include/image.mk`中,以下为节选:\n\n```\ndefine BuildImage\n\n  ifeq ($(IB),)\n    .PHONY: download prepare compile clean image_prepare mkfs_prepare kernel_prepare install\n    compile:\n\t\t$(call Build/Compile)\n\n    clean:\n\t\t$(call Build/Clean)\n\n    image_prepare: compile\n\t\tmkdir -p $(KDIR)/tmp\n\t\t$(call Image/Prepare)\n  else\n    image_prepare:\n\t\tmkdir -p $(KDIR)/tmp\n  endif\n\n  mkfs_prepare: image_prepare\n\t$(call Image/mkfs/prepare)\n\n  kernel_prepare: mkfs_prepare\n\t$(call Image/BuildKernel)\n\t$(if $(CONFIG_TARGET_ROOTFS_INITRAMFS),$(if $(IB),,$(call Image/BuildKernel/Initramfs)))\n\t$(call Image/InstallKernel)\n\n  $(foreach device,$(TARGET_DEVICES),$(call Device,$(device)))\n  $(foreach fs,$(TARGET_FILESYSTEMS) $(fs-subtypes-y),$(call BuildImage/mkfs,$(fs)))\n\n  install: kernel_prepare\n\t$(foreach fs,$(TARGET_FILESYSTEMS),\n\t\t$(call Image/Build,$(fs))\n\t)\n\t$(call Image/mkfs/ubifs)\n\t$(call Image/Checksum,md5sum --binary,md5sums)\n\t$(call Image/Checksum,openssl dgst -sha256,sha256sums)\n\nendef\n```\n\n这里我们看到了我们的目标**install**和它的依赖关系及执行语句,这里$(TARGET_FILESYSTEMS)通常为squashfs.其中大部分函数定义在我们对应平台的image文件夹下的Makefile中.\n\n上文中第28行需稍加注意,这里调用函数*BuildImage/mkfs*,定义如下:\n\n```\ndefine BuildImage/mkfs\n  install: mkfs-$(1)\n  .PHONY: mkfs-$(1)\n  mkfs-$(1): mkfs_prepare\n\t$(Image/mkfs/$(1))\n\t$(call Build/mkfs/default,$(1))\n\t$(call Build/mkfs/$(1),$(1))\n  $(KDIR)/root.$(1): mkfs-$(1)\nendef\n```\n\n这里可以看到目标**install**依赖于**mkfs-(1)**.如此我们可以得到整个依赖关系图如下:\n\n![依赖关系图](http://ww1.sinaimg.cn/large/006kvZhRjw1ezuly482n9j31kw0zrn3t.jpg)\n\n图片不清晰可以下载下来查看.\n\n## 稍加解释\n&emsp;上一节我们分析了依赖关系,执行过程其实就是倒叙执行的过程.\n主要编辑过程就是先将内核编译完成,然后将安装ipk的root-ramips文件夹制作为squash格式的二进制文件,然后包括压缩内核,为内核制作头部,最后将加工过的内核部分和文件系统部分组合起来.\n\n## 尾记\n1. 在网上查找资料的时候,发现大部分资料要么雷同,要么浅尝辄止.\n2. 下面这篇文章在我深入学习的过程中,起了不小的作用.[链接](http://blog.chinaunix.net/uid-26675482-id-4704952.html);就是排版太差了,我才有了自己写写的冲动.\n3. `openwrt`的整个编译过程是很复杂的,想想电脑一秒可以做多少次计算,而一次完整编译轻轻松松就要两三个小时.可想而知编译过程之复杂.但是我觉得我把大体的编译过程是弄明白了,也欢迎大家交流.一共用了5篇的篇幅,大体的编译过程也算是交代完了.\n4. 纸上得来终觉浅,下面我觉得我还需要更多的改改写写来加深了解.最近在瞎看看linux内核相关的东西,那本书上也说了要加深学习了解,需要更多的修修补补.与大家共勉.\n","source":"_posts/2016-01-10-openwrt打包过程.md","raw":"---\nlayout: post\ntitle: openwrt编译打包过程\ncategory: openwrt\ntags: [openwrt,makefile,深度]\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博第六周,更好地阅读体验,请点击[这里](https://www.zybuluo.com/icyriver/note/258252)\n\n---\n\n## 前言\n&emsp;前面我们已经讲了openwrt编译的大部分过程,包括大致的编译步骤,ipk的编译等.今天是我这个系列的最后一篇,我们来看看openwrt的各个部分是如何组织成为最后的bin文件的.\n\n<!--more-->\n\n&emsp;最后一个步骤当中,我们的执行的目标是**target/install**.\n\n## 执行过程推导\n我们首先通过Makefile来分析下我们的依赖关系.\n\n通过前几篇的分析,我们应当知道此时**target/install**将依赖于**target/linux/install**.\n如下是`target/linux/Makefile`的节选:\n\n```\nexport TARGET_BUILD=1\n\nprereq clean download prepare compile install menuconfig nconfig oldconfig update refresh: FORCE\n\t@+$(NO_TRACE_MAKE) -C $(BOARD) $@\n```\n\n我们可以看出,此时执行**compile**将会进入对应的目标平台执行目标**compile**,我们以mt7620a为例.它属于ramips平台.\n\n如下是`target/linux/ramips/Makefile`的节选:\n\n```\ninclude $(INCLUDE_DIR)/target.mk\n\n$(eval $(call BuildTarget))\n```\n\n在这个Makefile文件中,我们找不到目标**compile**,它被文件*target.mk*封装.我们在ipk的编译中,已经见过类似的用法.\n\n如下是`include/target.mk`的节选:\n\n```\nifeq ($(TARGET_BUILD),1)\n  include $(INCLUDE_DIR)/kernel-build.mk\n  BuildTarget?=$(BuildKernel)\nendif\n```\n\n从上面的节选我们看到变量**TARGET_BUILD**为1,所以这里函数*BuildTarget*其实等于在`kernel-build.mk`中定义的变量**BuildKernel**.\n\n如下是`include/kernel-build.mk`的节选:\n\n```\ndefine BuildKernel\n  $(if $(QUILT),$(Build/Quilt))\n  $(if $(LINUX_SITE),$(call Download,kernel))\n\n  $(STAMP_CONFIGURED): $(STAMP_PREPARED) $(LINUX_KCONFIG_LIST) $(TOPDIR)/.config\n\t$(Kernel/Configure)\n\ttouch $$@\n\n  $(LINUX_DIR)/.image: $(STAMP_CONFIGURED) $(if $(CONFIG_STRIP_KERNEL_EXPORTS),$(KERNEL_BUILD_DIR)/symtab.h) FORCE\n\t$(Kernel/CompileImage)\n\t$(Kernel/CollectDebug)\n\ttouch $$@\n\n  install: $(LINUX_DIR)/.image\n\t+$(MAKE) -C image compile install TARGET_BUILD=\n\nendef\n```\n\n&emsp;我们绕来绕去,终于找到了我们要的目标,**install**依赖于**$(LINUX_DIR)/.image**.其中**$(LINUX_DIR)/.image**的依赖和执行就在节选中,我们略过,\n\n&emsp;同时将进入image文件夹下,执行目标**compile**和**install**.下面我来看看进入image文件夹下,发生的故事.\n\n&emsp;打开`tareget/linux/ramips/image/Makefile`,我们找了一圈,也没找到我们要的目标**compile**和**install**;如果我们是完整编译,其实目标**compile**已经被执行过了.此时我们以**install**为目标.\n\n&emsp;玄机就在最后一句`$(eval $(call BuildImage))`中,函数*BuildImage*被定义在`include/image.mk`中,以下为节选:\n\n```\ndefine BuildImage\n\n  ifeq ($(IB),)\n    .PHONY: download prepare compile clean image_prepare mkfs_prepare kernel_prepare install\n    compile:\n\t\t$(call Build/Compile)\n\n    clean:\n\t\t$(call Build/Clean)\n\n    image_prepare: compile\n\t\tmkdir -p $(KDIR)/tmp\n\t\t$(call Image/Prepare)\n  else\n    image_prepare:\n\t\tmkdir -p $(KDIR)/tmp\n  endif\n\n  mkfs_prepare: image_prepare\n\t$(call Image/mkfs/prepare)\n\n  kernel_prepare: mkfs_prepare\n\t$(call Image/BuildKernel)\n\t$(if $(CONFIG_TARGET_ROOTFS_INITRAMFS),$(if $(IB),,$(call Image/BuildKernel/Initramfs)))\n\t$(call Image/InstallKernel)\n\n  $(foreach device,$(TARGET_DEVICES),$(call Device,$(device)))\n  $(foreach fs,$(TARGET_FILESYSTEMS) $(fs-subtypes-y),$(call BuildImage/mkfs,$(fs)))\n\n  install: kernel_prepare\n\t$(foreach fs,$(TARGET_FILESYSTEMS),\n\t\t$(call Image/Build,$(fs))\n\t)\n\t$(call Image/mkfs/ubifs)\n\t$(call Image/Checksum,md5sum --binary,md5sums)\n\t$(call Image/Checksum,openssl dgst -sha256,sha256sums)\n\nendef\n```\n\n这里我们看到了我们的目标**install**和它的依赖关系及执行语句,这里$(TARGET_FILESYSTEMS)通常为squashfs.其中大部分函数定义在我们对应平台的image文件夹下的Makefile中.\n\n上文中第28行需稍加注意,这里调用函数*BuildImage/mkfs*,定义如下:\n\n```\ndefine BuildImage/mkfs\n  install: mkfs-$(1)\n  .PHONY: mkfs-$(1)\n  mkfs-$(1): mkfs_prepare\n\t$(Image/mkfs/$(1))\n\t$(call Build/mkfs/default,$(1))\n\t$(call Build/mkfs/$(1),$(1))\n  $(KDIR)/root.$(1): mkfs-$(1)\nendef\n```\n\n这里可以看到目标**install**依赖于**mkfs-(1)**.如此我们可以得到整个依赖关系图如下:\n\n![依赖关系图](http://ww1.sinaimg.cn/large/006kvZhRjw1ezuly482n9j31kw0zrn3t.jpg)\n\n图片不清晰可以下载下来查看.\n\n## 稍加解释\n&emsp;上一节我们分析了依赖关系,执行过程其实就是倒叙执行的过程.\n主要编辑过程就是先将内核编译完成,然后将安装ipk的root-ramips文件夹制作为squash格式的二进制文件,然后包括压缩内核,为内核制作头部,最后将加工过的内核部分和文件系统部分组合起来.\n\n## 尾记\n1. 在网上查找资料的时候,发现大部分资料要么雷同,要么浅尝辄止.\n2. 下面这篇文章在我深入学习的过程中,起了不小的作用.[链接](http://blog.chinaunix.net/uid-26675482-id-4704952.html);就是排版太差了,我才有了自己写写的冲动.\n3. `openwrt`的整个编译过程是很复杂的,想想电脑一秒可以做多少次计算,而一次完整编译轻轻松松就要两三个小时.可想而知编译过程之复杂.但是我觉得我把大体的编译过程是弄明白了,也欢迎大家交流.一共用了5篇的篇幅,大体的编译过程也算是交代完了.\n4. 纸上得来终觉浅,下面我觉得我还需要更多的改改写写来加深了解.最近在瞎看看linux内核相关的东西,那本书上也说了要加深学习了解,需要更多的修修补补.与大家共勉.\n","slug":"openwrt打包过程","published":1,"date":"2016-01-09T16:00:00.000Z","updated":"2016-04-07T07:00:59.693Z","photos":[],"link":"","_id":"cimpzdpo0000xm1f13kfamgrz","content":"<p>本周是成胖子每周一博第六周,更好地阅读体验,请点击<a href=\"https://www.zybuluo.com/icyriver/note/258252\" target=\"_blank\" rel=\"external\">这里</a></p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;前面我们已经讲了openwrt编译的大部分过程,包括大致的编译步骤,ipk的编译等.今天是我这个系列的最后一篇,我们来看看openwrt的各个部分是如何组织成为最后的bin文件的.</p>\n<a id=\"more\"></a>\n<p>&emsp;最后一个步骤当中,我们的执行的目标是<strong>target/install</strong>.</p>\n<h2 id=\"执行过程推导\"><a href=\"#执行过程推导\" class=\"headerlink\" title=\"执行过程推导\"></a>执行过程推导</h2><p>我们首先通过Makefile来分析下我们的依赖关系.</p>\n<p>通过前几篇的分析,我们应当知道此时<strong>target/install</strong>将依赖于<strong>target/linux/install</strong>.<br>如下是<code>target/linux/Makefile</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export TARGET_BUILD=1</span><br><span class=\"line\"></span><br><span class=\"line\">prereq clean download prepare compile install menuconfig nconfig oldconfig update refresh: FORCE</span><br><span class=\"line\">\t@+$(NO_TRACE_MAKE) -C $(BOARD) $@</span><br></pre></td></tr></table></figure>\n<p>我们可以看出,此时执行<strong>compile</strong>将会进入对应的目标平台执行目标<strong>compile</strong>,我们以mt7620a为例.它属于ramips平台.</p>\n<p>如下是<code>target/linux/ramips/Makefile</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include $(INCLUDE_DIR)/target.mk</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call BuildTarget))</span><br></pre></td></tr></table></figure>\n<p>在这个Makefile文件中,我们找不到目标<strong>compile</strong>,它被文件<em>target.mk</em>封装.我们在ipk的编译中,已经见过类似的用法.</p>\n<p>如下是<code>include/target.mk</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifeq ($(TARGET_BUILD),1)</span><br><span class=\"line\">  include $(INCLUDE_DIR)/kernel-build.mk</span><br><span class=\"line\">  BuildTarget?=$(BuildKernel)</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n<p>从上面的节选我们看到变量<strong>TARGET_BUILD</strong>为1,所以这里函数<em>BuildTarget</em>其实等于在<code>kernel-build.mk</code>中定义的变量<strong>BuildKernel</strong>.</p>\n<p>如下是<code>include/kernel-build.mk</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildKernel</span><br><span class=\"line\">  $(if $(QUILT),$(Build/Quilt))</span><br><span class=\"line\">  $(if $(LINUX_SITE),$(call Download,kernel))</span><br><span class=\"line\"></span><br><span class=\"line\">  $(STAMP_CONFIGURED): $(STAMP_PREPARED) $(LINUX_KCONFIG_LIST) $(TOPDIR)/.config</span><br><span class=\"line\">\t$(Kernel/Configure)</span><br><span class=\"line\">\ttouch $$@</span><br><span class=\"line\"></span><br><span class=\"line\">  $(LINUX_DIR)/.image: $(STAMP_CONFIGURED) $(if $(CONFIG_STRIP_KERNEL_EXPORTS),$(KERNEL_BUILD_DIR)/symtab.h) FORCE</span><br><span class=\"line\">\t$(Kernel/CompileImage)</span><br><span class=\"line\">\t$(Kernel/CollectDebug)</span><br><span class=\"line\">\ttouch $$@</span><br><span class=\"line\"></span><br><span class=\"line\">  install: $(LINUX_DIR)/.image</span><br><span class=\"line\">\t+$(MAKE) -C image compile install TARGET_BUILD=</span><br><span class=\"line\"></span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>&emsp;我们绕来绕去,终于找到了我们要的目标,<strong>install</strong>依赖于<strong>$(LINUX_DIR)/.image</strong>.其中<strong>$(LINUX_DIR)/.image</strong>的依赖和执行就在节选中,我们略过,</p>\n<p>&emsp;同时将进入image文件夹下,执行目标<strong>compile</strong>和<strong>install</strong>.下面我来看看进入image文件夹下,发生的故事.</p>\n<p>&emsp;打开<code>tareget/linux/ramips/image/Makefile</code>,我们找了一圈,也没找到我们要的目标<strong>compile</strong>和<strong>install</strong>;如果我们是完整编译,其实目标<strong>compile</strong>已经被执行过了.此时我们以<strong>install</strong>为目标.</p>\n<p>&emsp;玄机就在最后一句<code>$(eval $(call BuildImage))</code>中,函数<em>BuildImage</em>被定义在<code>include/image.mk</code>中,以下为节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildImage</span><br><span class=\"line\"></span><br><span class=\"line\">  ifeq ($(IB),)</span><br><span class=\"line\">    .PHONY: download prepare compile clean image_prepare mkfs_prepare kernel_prepare install</span><br><span class=\"line\">    compile:</span><br><span class=\"line\">\t\t$(call Build/Compile)</span><br><span class=\"line\"></span><br><span class=\"line\">    clean:</span><br><span class=\"line\">\t\t$(call Build/Clean)</span><br><span class=\"line\"></span><br><span class=\"line\">    image_prepare: compile</span><br><span class=\"line\">\t\tmkdir -p $(KDIR)/tmp</span><br><span class=\"line\">\t\t$(call Image/Prepare)</span><br><span class=\"line\">  else</span><br><span class=\"line\">    image_prepare:</span><br><span class=\"line\">\t\tmkdir -p $(KDIR)/tmp</span><br><span class=\"line\">  endif</span><br><span class=\"line\"></span><br><span class=\"line\">  mkfs_prepare: image_prepare</span><br><span class=\"line\">\t$(call Image/mkfs/prepare)</span><br><span class=\"line\"></span><br><span class=\"line\">  kernel_prepare: mkfs_prepare</span><br><span class=\"line\">\t$(call Image/BuildKernel)</span><br><span class=\"line\">\t$(if $(CONFIG_TARGET_ROOTFS_INITRAMFS),$(if $(IB),,$(call Image/BuildKernel/Initramfs)))</span><br><span class=\"line\">\t$(call Image/InstallKernel)</span><br><span class=\"line\"></span><br><span class=\"line\">  $(foreach device,$(TARGET_DEVICES),$(call Device,$(device)))</span><br><span class=\"line\">  $(foreach fs,$(TARGET_FILESYSTEMS) $(fs-subtypes-y),$(call BuildImage/mkfs,$(fs)))</span><br><span class=\"line\"></span><br><span class=\"line\">  install: kernel_prepare</span><br><span class=\"line\">\t$(foreach fs,$(TARGET_FILESYSTEMS),</span><br><span class=\"line\">\t\t$(call Image/Build,$(fs))</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t$(call Image/mkfs/ubifs)</span><br><span class=\"line\">\t$(call Image/Checksum,md5sum --binary,md5sums)</span><br><span class=\"line\">\t$(call Image/Checksum,openssl dgst -sha256,sha256sums)</span><br><span class=\"line\"></span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>这里我们看到了我们的目标<strong>install</strong>和它的依赖关系及执行语句,这里$(TARGET_FILESYSTEMS)通常为squashfs.其中大部分函数定义在我们对应平台的image文件夹下的Makefile中.</p>\n<p>上文中第28行需稍加注意,这里调用函数<em>BuildImage/mkfs</em>,定义如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildImage/mkfs</span><br><span class=\"line\">  install: mkfs-$(1)</span><br><span class=\"line\">  .PHONY: mkfs-$(1)</span><br><span class=\"line\">  mkfs-$(1): mkfs_prepare</span><br><span class=\"line\">\t$(Image/mkfs/$(1))</span><br><span class=\"line\">\t$(call Build/mkfs/default,$(1))</span><br><span class=\"line\">\t$(call Build/mkfs/$(1),$(1))</span><br><span class=\"line\">  $(KDIR)/root.$(1): mkfs-$(1)</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>这里可以看到目标<strong>install</strong>依赖于<strong>mkfs-(1)</strong>.如此我们可以得到整个依赖关系图如下:</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006kvZhRjw1ezuly482n9j31kw0zrn3t.jpg\" alt=\"依赖关系图\"></p>\n<p>图片不清晰可以下载下来查看.</p>\n<h2 id=\"稍加解释\"><a href=\"#稍加解释\" class=\"headerlink\" title=\"稍加解释\"></a>稍加解释</h2><p>&emsp;上一节我们分析了依赖关系,执行过程其实就是倒叙执行的过程.<br>主要编辑过程就是先将内核编译完成,然后将安装ipk的root-ramips文件夹制作为squash格式的二进制文件,然后包括压缩内核,为内核制作头部,最后将加工过的内核部分和文件系统部分组合起来.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><ol>\n<li>在网上查找资料的时候,发现大部分资料要么雷同,要么浅尝辄止.</li>\n<li>下面这篇文章在我深入学习的过程中,起了不小的作用.<a href=\"http://blog.chinaunix.net/uid-26675482-id-4704952.html\" target=\"_blank\" rel=\"external\">链接</a>;就是排版太差了,我才有了自己写写的冲动.</li>\n<li><code>openwrt</code>的整个编译过程是很复杂的,想想电脑一秒可以做多少次计算,而一次完整编译轻轻松松就要两三个小时.可想而知编译过程之复杂.但是我觉得我把大体的编译过程是弄明白了,也欢迎大家交流.一共用了5篇的篇幅,大体的编译过程也算是交代完了.</li>\n<li>纸上得来终觉浅,下面我觉得我还需要更多的改改写写来加深了解.最近在瞎看看linux内核相关的东西,那本书上也说了要加深学习了解,需要更多的修修补补.与大家共勉.</li>\n</ol>\n","excerpt":"<p>本周是成胖子每周一博第六周,更好地阅读体验,请点击<a href=\"https://www.zybuluo.com/icyriver/note/258252\">这里</a></p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;前面我们已经讲了openwrt编译的大部分过程,包括大致的编译步骤,ipk的编译等.今天是我这个系列的最后一篇,我们来看看openwrt的各个部分是如何组织成为最后的bin文件的.</p>","more":"<p>&emsp;最后一个步骤当中,我们的执行的目标是<strong>target/install</strong>.</p>\n<h2 id=\"执行过程推导\"><a href=\"#执行过程推导\" class=\"headerlink\" title=\"执行过程推导\"></a>执行过程推导</h2><p>我们首先通过Makefile来分析下我们的依赖关系.</p>\n<p>通过前几篇的分析,我们应当知道此时<strong>target/install</strong>将依赖于<strong>target/linux/install</strong>.<br>如下是<code>target/linux/Makefile</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export TARGET_BUILD=1</span><br><span class=\"line\"></span><br><span class=\"line\">prereq clean download prepare compile install menuconfig nconfig oldconfig update refresh: FORCE</span><br><span class=\"line\">\t@+$(NO_TRACE_MAKE) -C $(BOARD) $@</span><br></pre></td></tr></table></figure>\n<p>我们可以看出,此时执行<strong>compile</strong>将会进入对应的目标平台执行目标<strong>compile</strong>,我们以mt7620a为例.它属于ramips平台.</p>\n<p>如下是<code>target/linux/ramips/Makefile</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include $(INCLUDE_DIR)/target.mk</span><br><span class=\"line\"></span><br><span class=\"line\">$(eval $(call BuildTarget))</span><br></pre></td></tr></table></figure>\n<p>在这个Makefile文件中,我们找不到目标<strong>compile</strong>,它被文件<em>target.mk</em>封装.我们在ipk的编译中,已经见过类似的用法.</p>\n<p>如下是<code>include/target.mk</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifeq ($(TARGET_BUILD),1)</span><br><span class=\"line\">  include $(INCLUDE_DIR)/kernel-build.mk</span><br><span class=\"line\">  BuildTarget?=$(BuildKernel)</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n<p>从上面的节选我们看到变量<strong>TARGET_BUILD</strong>为1,所以这里函数<em>BuildTarget</em>其实等于在<code>kernel-build.mk</code>中定义的变量<strong>BuildKernel</strong>.</p>\n<p>如下是<code>include/kernel-build.mk</code>的节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildKernel</span><br><span class=\"line\">  $(if $(QUILT),$(Build/Quilt))</span><br><span class=\"line\">  $(if $(LINUX_SITE),$(call Download,kernel))</span><br><span class=\"line\"></span><br><span class=\"line\">  $(STAMP_CONFIGURED): $(STAMP_PREPARED) $(LINUX_KCONFIG_LIST) $(TOPDIR)/.config</span><br><span class=\"line\">\t$(Kernel/Configure)</span><br><span class=\"line\">\ttouch $$@</span><br><span class=\"line\"></span><br><span class=\"line\">  $(LINUX_DIR)/.image: $(STAMP_CONFIGURED) $(if $(CONFIG_STRIP_KERNEL_EXPORTS),$(KERNEL_BUILD_DIR)/symtab.h) FORCE</span><br><span class=\"line\">\t$(Kernel/CompileImage)</span><br><span class=\"line\">\t$(Kernel/CollectDebug)</span><br><span class=\"line\">\ttouch $$@</span><br><span class=\"line\"></span><br><span class=\"line\">  install: $(LINUX_DIR)/.image</span><br><span class=\"line\">\t+$(MAKE) -C image compile install TARGET_BUILD=</span><br><span class=\"line\"></span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>&emsp;我们绕来绕去,终于找到了我们要的目标,<strong>install</strong>依赖于<strong>$(LINUX_DIR)/.image</strong>.其中<strong>$(LINUX_DIR)/.image</strong>的依赖和执行就在节选中,我们略过,</p>\n<p>&emsp;同时将进入image文件夹下,执行目标<strong>compile</strong>和<strong>install</strong>.下面我来看看进入image文件夹下,发生的故事.</p>\n<p>&emsp;打开<code>tareget/linux/ramips/image/Makefile</code>,我们找了一圈,也没找到我们要的目标<strong>compile</strong>和<strong>install</strong>;如果我们是完整编译,其实目标<strong>compile</strong>已经被执行过了.此时我们以<strong>install</strong>为目标.</p>\n<p>&emsp;玄机就在最后一句<code>$(eval $(call BuildImage))</code>中,函数<em>BuildImage</em>被定义在<code>include/image.mk</code>中,以下为节选:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildImage</span><br><span class=\"line\"></span><br><span class=\"line\">  ifeq ($(IB),)</span><br><span class=\"line\">    .PHONY: download prepare compile clean image_prepare mkfs_prepare kernel_prepare install</span><br><span class=\"line\">    compile:</span><br><span class=\"line\">\t\t$(call Build/Compile)</span><br><span class=\"line\"></span><br><span class=\"line\">    clean:</span><br><span class=\"line\">\t\t$(call Build/Clean)</span><br><span class=\"line\"></span><br><span class=\"line\">    image_prepare: compile</span><br><span class=\"line\">\t\tmkdir -p $(KDIR)/tmp</span><br><span class=\"line\">\t\t$(call Image/Prepare)</span><br><span class=\"line\">  else</span><br><span class=\"line\">    image_prepare:</span><br><span class=\"line\">\t\tmkdir -p $(KDIR)/tmp</span><br><span class=\"line\">  endif</span><br><span class=\"line\"></span><br><span class=\"line\">  mkfs_prepare: image_prepare</span><br><span class=\"line\">\t$(call Image/mkfs/prepare)</span><br><span class=\"line\"></span><br><span class=\"line\">  kernel_prepare: mkfs_prepare</span><br><span class=\"line\">\t$(call Image/BuildKernel)</span><br><span class=\"line\">\t$(if $(CONFIG_TARGET_ROOTFS_INITRAMFS),$(if $(IB),,$(call Image/BuildKernel/Initramfs)))</span><br><span class=\"line\">\t$(call Image/InstallKernel)</span><br><span class=\"line\"></span><br><span class=\"line\">  $(foreach device,$(TARGET_DEVICES),$(call Device,$(device)))</span><br><span class=\"line\">  $(foreach fs,$(TARGET_FILESYSTEMS) $(fs-subtypes-y),$(call BuildImage/mkfs,$(fs)))</span><br><span class=\"line\"></span><br><span class=\"line\">  install: kernel_prepare</span><br><span class=\"line\">\t$(foreach fs,$(TARGET_FILESYSTEMS),</span><br><span class=\"line\">\t\t$(call Image/Build,$(fs))</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\t$(call Image/mkfs/ubifs)</span><br><span class=\"line\">\t$(call Image/Checksum,md5sum --binary,md5sums)</span><br><span class=\"line\">\t$(call Image/Checksum,openssl dgst -sha256,sha256sums)</span><br><span class=\"line\"></span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>这里我们看到了我们的目标<strong>install</strong>和它的依赖关系及执行语句,这里$(TARGET_FILESYSTEMS)通常为squashfs.其中大部分函数定义在我们对应平台的image文件夹下的Makefile中.</p>\n<p>上文中第28行需稍加注意,这里调用函数<em>BuildImage/mkfs</em>,定义如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define BuildImage/mkfs</span><br><span class=\"line\">  install: mkfs-$(1)</span><br><span class=\"line\">  .PHONY: mkfs-$(1)</span><br><span class=\"line\">  mkfs-$(1): mkfs_prepare</span><br><span class=\"line\">\t$(Image/mkfs/$(1))</span><br><span class=\"line\">\t$(call Build/mkfs/default,$(1))</span><br><span class=\"line\">\t$(call Build/mkfs/$(1),$(1))</span><br><span class=\"line\">  $(KDIR)/root.$(1): mkfs-$(1)</span><br><span class=\"line\">endef</span><br></pre></td></tr></table></figure>\n<p>这里可以看到目标<strong>install</strong>依赖于<strong>mkfs-(1)</strong>.如此我们可以得到整个依赖关系图如下:</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006kvZhRjw1ezuly482n9j31kw0zrn3t.jpg\" alt=\"依赖关系图\"></p>\n<p>图片不清晰可以下载下来查看.</p>\n<h2 id=\"稍加解释\"><a href=\"#稍加解释\" class=\"headerlink\" title=\"稍加解释\"></a>稍加解释</h2><p>&emsp;上一节我们分析了依赖关系,执行过程其实就是倒叙执行的过程.<br>主要编辑过程就是先将内核编译完成,然后将安装ipk的root-ramips文件夹制作为squash格式的二进制文件,然后包括压缩内核,为内核制作头部,最后将加工过的内核部分和文件系统部分组合起来.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><ol>\n<li>在网上查找资料的时候,发现大部分资料要么雷同,要么浅尝辄止.</li>\n<li>下面这篇文章在我深入学习的过程中,起了不小的作用.<a href=\"http://blog.chinaunix.net/uid-26675482-id-4704952.html\">链接</a>;就是排版太差了,我才有了自己写写的冲动.</li>\n<li><code>openwrt</code>的整个编译过程是很复杂的,想想电脑一秒可以做多少次计算,而一次完整编译轻轻松松就要两三个小时.可想而知编译过程之复杂.但是我觉得我把大体的编译过程是弄明白了,也欢迎大家交流.一共用了5篇的篇幅,大体的编译过程也算是交代完了.</li>\n<li>纸上得来终觉浅,下面我觉得我还需要更多的改改写写来加深了解.最近在瞎看看linux内核相关的东西,那本书上也说了要加深学习了解,需要更多的修修补补.与大家共勉.</li>\n</ol>"},{"layout":"post","title":"思维导图xmind","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博第八周.\n\n## 前言\n&emsp;我从小就有很强的好奇心,看到新鲜东西总想着试试.现在算是半只脚踏入Linux的门槛,可以看到很多好玩的东西,令人眼花缭乱.我现在就像一个圆,随着里面的面积越来越大,周长越来越长,和外面未知世界的接触面积也越来越大,内心也越来越焦灼.愈发地感觉时不我待,要看要学要做的事情太多了.\n\n<!--more-->\n\n&emsp;以前为了应付考试学习,先学--再考--最后忘也无所谓.现在为了自己实用而学习,实在是不想像狗熊掰玉米一样,掰一个扔一个,学一个忘一个.怎么办?除了广为认知的艾宾浩斯遗忘曲线,还有一个学习的好工具---思维导图.\n\n&emsp;本周我准备总结下自己学习思维导图的一些笔记,顺便加深自己对xmind的驾驭能力.\n\n---\n\n## 思维导图要点\n&emsp;思维导图创始人是英国人Tony Buzan,简单的介绍可以参见[度娘](http://baike.baidu.com/view/30054.htm)\n\n下面是摘录自网上的思维导图的原理与方法：\n\n> 思维导图原理：集中发散\n\n> 思维导图方法：点线面体\n\n> 1. 点：中心明确，集中发散；\n\n> 2. 线：思路清晰，逐层展开；\n\n> 3. 面：归类分组，充分全面；\n\n> 4. 体：配图填色，立体可现；\n\n思维导图是表达发散性思维的工具,讲究左右脑的协同工作.下面是我自己概括的要点.\n\n### 分类\n&emsp;思维导图的应用面很广,可以说只要是用到大脑的地方都可以用思维导图来帮助记忆.虽然思维导图是一个发散性思维工具,但是并不是不讲究逻辑性.我觉得首先很重要的一点就是**分类**.\n\n&emsp;分类和我们数学中的\"枚举\"很相似,都讲究个不漏不重.漏了,那表明思维不够全面,有盲点;重了,那表明思维混乱,没有整理清楚.\n\n&emsp;另一方面,如果第一次分类没有把问题交代清楚,还应该使用分类再分类的方法,进行二次分类.\n\n### 关键词\n&emsp;传统的笔记,我们总是眉毛胡子一把抓,统统线性地记录下来.但是在思维导图的观点中,记忆应当是网状的.不但相互之间有很多联系,而且是有结点的.当你需要回忆某个内容,应该从网状的记忆中,首先提取出一个结点,再根据这个结点来回忆其他部分.这个结点,我们称之为\"**关键词**\".\n\n&emsp;从上面我们可以知道,关键词应该是我们初步掌握吸收内容后,提炼出来的.在我们复习的时候,我们再根据这些关键词来激活记忆面.\n\n### 图像\n&emsp;上面我们有了关键词,这还是属于左脑的逻辑概念,怎么和右脑关联呢?这就是思维导图中一个重要方法---**图像**\n\n&emsp;思维导图中强调想象力的作用.需要重点记忆的关键词,应该使用想象力将之加工为自己有感觉的头像.通过关键词和图像的搭配,使得大脑更轻松地将它视为记忆中的一个节点.\n\n&emsp;我们举一个例子,比如上面提到的\"关键词\".我们会联想到什么呢?我想到了钥匙,再和关键词结合,就有了下面这张图片.\n\n<center>\n![关键词](http://ww4.sinaimg.cn/large/006kvZhRjw1f0at73izatj306f062mx1.jpg \"关键词\")\n</center>\n\n备注:我不知道大家经常去哪找图.我以前去百度图库找的图,质量不高,而且很多水印.最近去google image找的图,感觉还不错.上面这幅就是在google找的.\n\n### 色彩管理\n&emsp;这个有点类似于以前划重点用的马克笔,通过合理的色彩搭配使得大脑觉得更有趣更容易接受.\n\n&emsp;思维导图可能有很多方法和技巧,但是作为作品,我觉得还是需要一些基本的审美的.如果搞得枝缠乱绕,五颜六色,我估计就算是思维导图,大脑也不会买账的.\n\n### 学习误区\n&emsp;下面用思维导图的方式,描绘了学习思维导图的常见误区.\n\n![思维导图_误区](http://ww1.sinaimg.cn/large/006kvZhRjw1f0ak9iqbrqj30es0drdj6.jpg \"误区\")\n\n## 软件\n&emsp;我对于工具的看法,总结起来就两点:有用和常用.思维导图无疑是一款有用的工具,那么我们怎么才能常用呢?怎么才能降低时间成本和学习成本?\n\n&emsp;使用思维导图软件无疑是一个办法.目前思维导图软件基本分为两个大的阵营---Mindjet和Xmind.两者各有千秋,大家可以自己考察考察.\n\n&emsp;因为我长期在Linux Mint环境下工作,所以我唯一的选择就是**xmind**.\n\n[xmind中文官网](http://www.xmindchina.net/)\n\n[xmind英文官网](http://www.xmind.net/)\n\n\n## 使用技巧\n&emsp;根据28准则,工具类的产品只需要掌握20%的部分就足以应付80%的日常工作.xmind的使用是很简单的,基本上可以直接上手.逐渐使用高级功能和快捷键.\n\n### 用户手册\n&emsp;xmind的用户手册有中文版,写的很详尽.\n\n[xmind用户手册](http://www.xmindchina.net/shouce.html)\n\n值得一提的功能有如下:\n\n[版本回退](http://www.xmindchina.net/help/h-bian-ji-li-shi.html)\n> xmind支持版本回退,类似于git和svn.\n\n[外框](http://www.xmindchina.net/help/h-wai-kuang.html)\n> xmind支持将几个主题用外框进行整合.\n\n[画布](http://www.xmindchina.net/help/h-gongzuobu-huabu.html)和[导入xmind工作簿](http://www.xmindchina.net/help/h-dao-ru-gzb.html)\n> 画布功能可以将多个思维导图整个到一个文件中.导入工作簿可以将其他xmind文件导入.\n>\n针对大型项目,我们可以每次做其中一部分,最后用这两个功能将它们整合.\n\n[上钻下钻](http://www.xmindchina.net/help/h-shang-zuan-xia-zuan.html)\n> xmind到了子主题的部分,往往过小或者区分不明显.上钻下钻你值得拥有.\n\n### 快捷键\n\nEnter/Tab（insert)\n> 这是一组创建主题的快捷键，稍微对XMind熟悉一些的用户都会知道。这里的Tab键是被设计用来创建子主题的，实践中操作起来，双手左右齐飞，思维图不停地生长，特别舒坦。insert键也是支持的，主要是为了照顾其他软件转过来的用户的使用习惯，不过不推荐使用，因为它距离手的位置太远，而且在Mac上是没有这个键的。\n\nShift\n> 这两个会在移动主题的时候用到。经常看到新用户询问类似“我移动自由主题的时候会和其他主题连上，怎么办呀”的问题，这个时候只需要轻轻地按住Shift键的同时来移动自由主题即可。额外说一下，双击图上任意空白的地方即可创建自由主题。自由主题是非常实用的，可以和联系线一起使用来画流程图等。\n\nF2/F3/F4/F6\n> 这一组是和编辑相关的较为实用的快捷键。F2编辑主题，F3为主题添加标签，F4添加备注，重点要说说F6，即下钻。选中任何一个主题（除了中心主题）的时候，点击F6就会进入下钻状态。这时候，选中的主题变为了中心主题，其子主题也均在此状态下铺开显示，非常有助于在工作、交流的时候集中注意力，尤其是向别人展示一张内容较多的图的时候更会凸显这一点。\n\n## 尾记\n&emsp;我使用过mindjet和xmind,最近使用xmind也挺多.这周为了写博客,再次深入学习了下xmind,感觉收获还是挺多的.\n\n&emsp;xmind思维导图免费好用,你值得拥有.\n","source":"_posts/2016-01-24-工具说_思维导图.md","raw":"---\nlayout: post\ntitle: 思维导图xmind\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博第八周.\n\n## 前言\n&emsp;我从小就有很强的好奇心,看到新鲜东西总想着试试.现在算是半只脚踏入Linux的门槛,可以看到很多好玩的东西,令人眼花缭乱.我现在就像一个圆,随着里面的面积越来越大,周长越来越长,和外面未知世界的接触面积也越来越大,内心也越来越焦灼.愈发地感觉时不我待,要看要学要做的事情太多了.\n\n<!--more-->\n\n&emsp;以前为了应付考试学习,先学--再考--最后忘也无所谓.现在为了自己实用而学习,实在是不想像狗熊掰玉米一样,掰一个扔一个,学一个忘一个.怎么办?除了广为认知的艾宾浩斯遗忘曲线,还有一个学习的好工具---思维导图.\n\n&emsp;本周我准备总结下自己学习思维导图的一些笔记,顺便加深自己对xmind的驾驭能力.\n\n---\n\n## 思维导图要点\n&emsp;思维导图创始人是英国人Tony Buzan,简单的介绍可以参见[度娘](http://baike.baidu.com/view/30054.htm)\n\n下面是摘录自网上的思维导图的原理与方法：\n\n> 思维导图原理：集中发散\n\n> 思维导图方法：点线面体\n\n> 1. 点：中心明确，集中发散；\n\n> 2. 线：思路清晰，逐层展开；\n\n> 3. 面：归类分组，充分全面；\n\n> 4. 体：配图填色，立体可现；\n\n思维导图是表达发散性思维的工具,讲究左右脑的协同工作.下面是我自己概括的要点.\n\n### 分类\n&emsp;思维导图的应用面很广,可以说只要是用到大脑的地方都可以用思维导图来帮助记忆.虽然思维导图是一个发散性思维工具,但是并不是不讲究逻辑性.我觉得首先很重要的一点就是**分类**.\n\n&emsp;分类和我们数学中的\"枚举\"很相似,都讲究个不漏不重.漏了,那表明思维不够全面,有盲点;重了,那表明思维混乱,没有整理清楚.\n\n&emsp;另一方面,如果第一次分类没有把问题交代清楚,还应该使用分类再分类的方法,进行二次分类.\n\n### 关键词\n&emsp;传统的笔记,我们总是眉毛胡子一把抓,统统线性地记录下来.但是在思维导图的观点中,记忆应当是网状的.不但相互之间有很多联系,而且是有结点的.当你需要回忆某个内容,应该从网状的记忆中,首先提取出一个结点,再根据这个结点来回忆其他部分.这个结点,我们称之为\"**关键词**\".\n\n&emsp;从上面我们可以知道,关键词应该是我们初步掌握吸收内容后,提炼出来的.在我们复习的时候,我们再根据这些关键词来激活记忆面.\n\n### 图像\n&emsp;上面我们有了关键词,这还是属于左脑的逻辑概念,怎么和右脑关联呢?这就是思维导图中一个重要方法---**图像**\n\n&emsp;思维导图中强调想象力的作用.需要重点记忆的关键词,应该使用想象力将之加工为自己有感觉的头像.通过关键词和图像的搭配,使得大脑更轻松地将它视为记忆中的一个节点.\n\n&emsp;我们举一个例子,比如上面提到的\"关键词\".我们会联想到什么呢?我想到了钥匙,再和关键词结合,就有了下面这张图片.\n\n<center>\n![关键词](http://ww4.sinaimg.cn/large/006kvZhRjw1f0at73izatj306f062mx1.jpg \"关键词\")\n</center>\n\n备注:我不知道大家经常去哪找图.我以前去百度图库找的图,质量不高,而且很多水印.最近去google image找的图,感觉还不错.上面这幅就是在google找的.\n\n### 色彩管理\n&emsp;这个有点类似于以前划重点用的马克笔,通过合理的色彩搭配使得大脑觉得更有趣更容易接受.\n\n&emsp;思维导图可能有很多方法和技巧,但是作为作品,我觉得还是需要一些基本的审美的.如果搞得枝缠乱绕,五颜六色,我估计就算是思维导图,大脑也不会买账的.\n\n### 学习误区\n&emsp;下面用思维导图的方式,描绘了学习思维导图的常见误区.\n\n![思维导图_误区](http://ww1.sinaimg.cn/large/006kvZhRjw1f0ak9iqbrqj30es0drdj6.jpg \"误区\")\n\n## 软件\n&emsp;我对于工具的看法,总结起来就两点:有用和常用.思维导图无疑是一款有用的工具,那么我们怎么才能常用呢?怎么才能降低时间成本和学习成本?\n\n&emsp;使用思维导图软件无疑是一个办法.目前思维导图软件基本分为两个大的阵营---Mindjet和Xmind.两者各有千秋,大家可以自己考察考察.\n\n&emsp;因为我长期在Linux Mint环境下工作,所以我唯一的选择就是**xmind**.\n\n[xmind中文官网](http://www.xmindchina.net/)\n\n[xmind英文官网](http://www.xmind.net/)\n\n\n## 使用技巧\n&emsp;根据28准则,工具类的产品只需要掌握20%的部分就足以应付80%的日常工作.xmind的使用是很简单的,基本上可以直接上手.逐渐使用高级功能和快捷键.\n\n### 用户手册\n&emsp;xmind的用户手册有中文版,写的很详尽.\n\n[xmind用户手册](http://www.xmindchina.net/shouce.html)\n\n值得一提的功能有如下:\n\n[版本回退](http://www.xmindchina.net/help/h-bian-ji-li-shi.html)\n> xmind支持版本回退,类似于git和svn.\n\n[外框](http://www.xmindchina.net/help/h-wai-kuang.html)\n> xmind支持将几个主题用外框进行整合.\n\n[画布](http://www.xmindchina.net/help/h-gongzuobu-huabu.html)和[导入xmind工作簿](http://www.xmindchina.net/help/h-dao-ru-gzb.html)\n> 画布功能可以将多个思维导图整个到一个文件中.导入工作簿可以将其他xmind文件导入.\n>\n针对大型项目,我们可以每次做其中一部分,最后用这两个功能将它们整合.\n\n[上钻下钻](http://www.xmindchina.net/help/h-shang-zuan-xia-zuan.html)\n> xmind到了子主题的部分,往往过小或者区分不明显.上钻下钻你值得拥有.\n\n### 快捷键\n\nEnter/Tab（insert)\n> 这是一组创建主题的快捷键，稍微对XMind熟悉一些的用户都会知道。这里的Tab键是被设计用来创建子主题的，实践中操作起来，双手左右齐飞，思维图不停地生长，特别舒坦。insert键也是支持的，主要是为了照顾其他软件转过来的用户的使用习惯，不过不推荐使用，因为它距离手的位置太远，而且在Mac上是没有这个键的。\n\nShift\n> 这两个会在移动主题的时候用到。经常看到新用户询问类似“我移动自由主题的时候会和其他主题连上，怎么办呀”的问题，这个时候只需要轻轻地按住Shift键的同时来移动自由主题即可。额外说一下，双击图上任意空白的地方即可创建自由主题。自由主题是非常实用的，可以和联系线一起使用来画流程图等。\n\nF2/F3/F4/F6\n> 这一组是和编辑相关的较为实用的快捷键。F2编辑主题，F3为主题添加标签，F4添加备注，重点要说说F6，即下钻。选中任何一个主题（除了中心主题）的时候，点击F6就会进入下钻状态。这时候，选中的主题变为了中心主题，其子主题也均在此状态下铺开显示，非常有助于在工作、交流的时候集中注意力，尤其是向别人展示一张内容较多的图的时候更会凸显这一点。\n\n## 尾记\n&emsp;我使用过mindjet和xmind,最近使用xmind也挺多.这周为了写博客,再次深入学习了下xmind,感觉收获还是挺多的.\n\n&emsp;xmind思维导图免费好用,你值得拥有.\n","slug":"工具说_思维导图","published":1,"date":"2016-01-23T16:00:00.000Z","updated":"2016-04-07T07:01:11.441Z","photos":[],"link":"","_id":"cimpzdpo30011m1f1ps93tsxd","content":"<p>本周是成胖子每周一博第八周.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;我从小就有很强的好奇心,看到新鲜东西总想着试试.现在算是半只脚踏入Linux的门槛,可以看到很多好玩的东西,令人眼花缭乱.我现在就像一个圆,随着里面的面积越来越大,周长越来越长,和外面未知世界的接触面积也越来越大,内心也越来越焦灼.愈发地感觉时不我待,要看要学要做的事情太多了.</p>\n<a id=\"more\"></a>\n<p>&emsp;以前为了应付考试学习,先学–再考–最后忘也无所谓.现在为了自己实用而学习,实在是不想像狗熊掰玉米一样,掰一个扔一个,学一个忘一个.怎么办?除了广为认知的艾宾浩斯遗忘曲线,还有一个学习的好工具—思维导图.</p>\n<p>&emsp;本周我准备总结下自己学习思维导图的一些笔记,顺便加深自己对xmind的驾驭能力.</p>\n<hr>\n<h2 id=\"思维导图要点\"><a href=\"#思维导图要点\" class=\"headerlink\" title=\"思维导图要点\"></a>思维导图要点</h2><p>&emsp;思维导图创始人是英国人Tony Buzan,简单的介绍可以参见<a href=\"http://baike.baidu.com/view/30054.htm\" target=\"_blank\" rel=\"external\">度娘</a></p>\n<p>下面是摘录自网上的思维导图的原理与方法：</p>\n<blockquote>\n<p>思维导图原理：集中发散</p>\n<p>思维导图方法：点线面体</p>\n<ol>\n<li><p>点：中心明确，集中发散；</p>\n</li>\n<li><p>线：思路清晰，逐层展开；</p>\n</li>\n<li><p>面：归类分组，充分全面；</p>\n</li>\n<li><p>体：配图填色，立体可现；</p>\n</li>\n</ol>\n</blockquote>\n<p>思维导图是表达发散性思维的工具,讲究左右脑的协同工作.下面是我自己概括的要点.</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>&emsp;思维导图的应用面很广,可以说只要是用到大脑的地方都可以用思维导图来帮助记忆.虽然思维导图是一个发散性思维工具,但是并不是不讲究逻辑性.我觉得首先很重要的一点就是<strong>分类</strong>.</p>\n<p>&emsp;分类和我们数学中的”枚举”很相似,都讲究个不漏不重.漏了,那表明思维不够全面,有盲点;重了,那表明思维混乱,没有整理清楚.</p>\n<p>&emsp;另一方面,如果第一次分类没有把问题交代清楚,还应该使用分类再分类的方法,进行二次分类.</p>\n<h3 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h3><p>&emsp;传统的笔记,我们总是眉毛胡子一把抓,统统线性地记录下来.但是在思维导图的观点中,记忆应当是网状的.不但相互之间有很多联系,而且是有结点的.当你需要回忆某个内容,应该从网状的记忆中,首先提取出一个结点,再根据这个结点来回忆其他部分.这个结点,我们称之为”<strong>关键词</strong>“.</p>\n<p>&emsp;从上面我们可以知道,关键词应该是我们初步掌握吸收内容后,提炼出来的.在我们复习的时候,我们再根据这些关键词来激活记忆面.</p>\n<h3 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h3><p>&emsp;上面我们有了关键词,这还是属于左脑的逻辑概念,怎么和右脑关联呢?这就是思维导图中一个重要方法—<strong>图像</strong></p>\n<p>&emsp;思维导图中强调想象力的作用.需要重点记忆的关键词,应该使用想象力将之加工为自己有感觉的头像.通过关键词和图像的搭配,使得大脑更轻松地将它视为记忆中的一个节点.</p>\n<p>&emsp;我们举一个例子,比如上面提到的”关键词”.我们会联想到什么呢?我想到了钥匙,再和关键词结合,就有了下面这张图片.</p>\n<center><br><img src=\"http://ww4.sinaimg.cn/large/006kvZhRjw1f0at73izatj306f062mx1.jpg\" alt=\"关键词\" title=\"关键词\"><br></center>\n\n<p>备注:我不知道大家经常去哪找图.我以前去百度图库找的图,质量不高,而且很多水印.最近去google image找的图,感觉还不错.上面这幅就是在google找的.</p>\n<h3 id=\"色彩管理\"><a href=\"#色彩管理\" class=\"headerlink\" title=\"色彩管理\"></a>色彩管理</h3><p>&emsp;这个有点类似于以前划重点用的马克笔,通过合理的色彩搭配使得大脑觉得更有趣更容易接受.</p>\n<p>&emsp;思维导图可能有很多方法和技巧,但是作为作品,我觉得还是需要一些基本的审美的.如果搞得枝缠乱绕,五颜六色,我估计就算是思维导图,大脑也不会买账的.</p>\n<h3 id=\"学习误区\"><a href=\"#学习误区\" class=\"headerlink\" title=\"学习误区\"></a>学习误区</h3><p>&emsp;下面用思维导图的方式,描绘了学习思维导图的常见误区.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006kvZhRjw1f0ak9iqbrqj30es0drdj6.jpg\" alt=\"思维导图_误区\" title=\"误区\"></p>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><p>&emsp;我对于工具的看法,总结起来就两点:有用和常用.思维导图无疑是一款有用的工具,那么我们怎么才能常用呢?怎么才能降低时间成本和学习成本?</p>\n<p>&emsp;使用思维导图软件无疑是一个办法.目前思维导图软件基本分为两个大的阵营—Mindjet和Xmind.两者各有千秋,大家可以自己考察考察.</p>\n<p>&emsp;因为我长期在Linux Mint环境下工作,所以我唯一的选择就是<strong>xmind</strong>.</p>\n<p><a href=\"http://www.xmindchina.net/\" target=\"_blank\" rel=\"external\">xmind中文官网</a></p>\n<p><a href=\"http://www.xmind.net/\" target=\"_blank\" rel=\"external\">xmind英文官网</a></p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><p>&emsp;根据28准则,工具类的产品只需要掌握20%的部分就足以应付80%的日常工作.xmind的使用是很简单的,基本上可以直接上手.逐渐使用高级功能和快捷键.</p>\n<h3 id=\"用户手册\"><a href=\"#用户手册\" class=\"headerlink\" title=\"用户手册\"></a>用户手册</h3><p>&emsp;xmind的用户手册有中文版,写的很详尽.</p>\n<p><a href=\"http://www.xmindchina.net/shouce.html\" target=\"_blank\" rel=\"external\">xmind用户手册</a></p>\n<p>值得一提的功能有如下:</p>\n<p><a href=\"http://www.xmindchina.net/help/h-bian-ji-li-shi.html\" target=\"_blank\" rel=\"external\">版本回退</a></p>\n<blockquote>\n<p>xmind支持版本回退,类似于git和svn.</p>\n</blockquote>\n<p><a href=\"http://www.xmindchina.net/help/h-wai-kuang.html\" target=\"_blank\" rel=\"external\">外框</a></p>\n<blockquote>\n<p>xmind支持将几个主题用外框进行整合.</p>\n</blockquote>\n<p><a href=\"http://www.xmindchina.net/help/h-gongzuobu-huabu.html\" target=\"_blank\" rel=\"external\">画布</a>和<a href=\"http://www.xmindchina.net/help/h-dao-ru-gzb.html\" target=\"_blank\" rel=\"external\">导入xmind工作簿</a></p>\n<blockquote>\n<p>画布功能可以将多个思维导图整个到一个文件中.导入工作簿可以将其他xmind文件导入.</p>\n<p>针对大型项目,我们可以每次做其中一部分,最后用这两个功能将它们整合.</p>\n</blockquote>\n<p><a href=\"http://www.xmindchina.net/help/h-shang-zuan-xia-zuan.html\" target=\"_blank\" rel=\"external\">上钻下钻</a></p>\n<blockquote>\n<p>xmind到了子主题的部分,往往过小或者区分不明显.上钻下钻你值得拥有.</p>\n</blockquote>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>Enter/Tab（insert)</p>\n<blockquote>\n<p>这是一组创建主题的快捷键，稍微对XMind熟悉一些的用户都会知道。这里的Tab键是被设计用来创建子主题的，实践中操作起来，双手左右齐飞，思维图不停地生长，特别舒坦。insert键也是支持的，主要是为了照顾其他软件转过来的用户的使用习惯，不过不推荐使用，因为它距离手的位置太远，而且在Mac上是没有这个键的。</p>\n</blockquote>\n<p>Shift</p>\n<blockquote>\n<p>这两个会在移动主题的时候用到。经常看到新用户询问类似“我移动自由主题的时候会和其他主题连上，怎么办呀”的问题，这个时候只需要轻轻地按住Shift键的同时来移动自由主题即可。额外说一下，双击图上任意空白的地方即可创建自由主题。自由主题是非常实用的，可以和联系线一起使用来画流程图等。</p>\n</blockquote>\n<p>F2/F3/F4/F6</p>\n<blockquote>\n<p>这一组是和编辑相关的较为实用的快捷键。F2编辑主题，F3为主题添加标签，F4添加备注，重点要说说F6，即下钻。选中任何一个主题（除了中心主题）的时候，点击F6就会进入下钻状态。这时候，选中的主题变为了中心主题，其子主题也均在此状态下铺开显示，非常有助于在工作、交流的时候集中注意力，尤其是向别人展示一张内容较多的图的时候更会凸显这一点。</p>\n</blockquote>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>&emsp;我使用过mindjet和xmind,最近使用xmind也挺多.这周为了写博客,再次深入学习了下xmind,感觉收获还是挺多的.</p>\n<p>&emsp;xmind思维导图免费好用,你值得拥有.</p>\n","excerpt":"<p>本周是成胖子每周一博第八周.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;我从小就有很强的好奇心,看到新鲜东西总想着试试.现在算是半只脚踏入Linux的门槛,可以看到很多好玩的东西,令人眼花缭乱.我现在就像一个圆,随着里面的面积越来越大,周长越来越长,和外面未知世界的接触面积也越来越大,内心也越来越焦灼.愈发地感觉时不我待,要看要学要做的事情太多了.</p>","more":"<p>&emsp;以前为了应付考试学习,先学–再考–最后忘也无所谓.现在为了自己实用而学习,实在是不想像狗熊掰玉米一样,掰一个扔一个,学一个忘一个.怎么办?除了广为认知的艾宾浩斯遗忘曲线,还有一个学习的好工具—思维导图.</p>\n<p>&emsp;本周我准备总结下自己学习思维导图的一些笔记,顺便加深自己对xmind的驾驭能力.</p>\n<hr>\n<h2 id=\"思维导图要点\"><a href=\"#思维导图要点\" class=\"headerlink\" title=\"思维导图要点\"></a>思维导图要点</h2><p>&emsp;思维导图创始人是英国人Tony Buzan,简单的介绍可以参见<a href=\"http://baike.baidu.com/view/30054.htm\">度娘</a></p>\n<p>下面是摘录自网上的思维导图的原理与方法：</p>\n<blockquote>\n<p>思维导图原理：集中发散</p>\n<p>思维导图方法：点线面体</p>\n<ol>\n<li><p>点：中心明确，集中发散；</p>\n</li>\n<li><p>线：思路清晰，逐层展开；</p>\n</li>\n<li><p>面：归类分组，充分全面；</p>\n</li>\n<li><p>体：配图填色，立体可现；</p>\n</li>\n</ol>\n</blockquote>\n<p>思维导图是表达发散性思维的工具,讲究左右脑的协同工作.下面是我自己概括的要点.</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>&emsp;思维导图的应用面很广,可以说只要是用到大脑的地方都可以用思维导图来帮助记忆.虽然思维导图是一个发散性思维工具,但是并不是不讲究逻辑性.我觉得首先很重要的一点就是<strong>分类</strong>.</p>\n<p>&emsp;分类和我们数学中的”枚举”很相似,都讲究个不漏不重.漏了,那表明思维不够全面,有盲点;重了,那表明思维混乱,没有整理清楚.</p>\n<p>&emsp;另一方面,如果第一次分类没有把问题交代清楚,还应该使用分类再分类的方法,进行二次分类.</p>\n<h3 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h3><p>&emsp;传统的笔记,我们总是眉毛胡子一把抓,统统线性地记录下来.但是在思维导图的观点中,记忆应当是网状的.不但相互之间有很多联系,而且是有结点的.当你需要回忆某个内容,应该从网状的记忆中,首先提取出一个结点,再根据这个结点来回忆其他部分.这个结点,我们称之为”<strong>关键词</strong>“.</p>\n<p>&emsp;从上面我们可以知道,关键词应该是我们初步掌握吸收内容后,提炼出来的.在我们复习的时候,我们再根据这些关键词来激活记忆面.</p>\n<h3 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a>图像</h3><p>&emsp;上面我们有了关键词,这还是属于左脑的逻辑概念,怎么和右脑关联呢?这就是思维导图中一个重要方法—<strong>图像</strong></p>\n<p>&emsp;思维导图中强调想象力的作用.需要重点记忆的关键词,应该使用想象力将之加工为自己有感觉的头像.通过关键词和图像的搭配,使得大脑更轻松地将它视为记忆中的一个节点.</p>\n<p>&emsp;我们举一个例子,比如上面提到的”关键词”.我们会联想到什么呢?我想到了钥匙,再和关键词结合,就有了下面这张图片.</p>\n<center><br><img src=\"http://ww4.sinaimg.cn/large/006kvZhRjw1f0at73izatj306f062mx1.jpg\" alt=\"关键词\" title=\"关键词\"><br></center>\n\n<p>备注:我不知道大家经常去哪找图.我以前去百度图库找的图,质量不高,而且很多水印.最近去google image找的图,感觉还不错.上面这幅就是在google找的.</p>\n<h3 id=\"色彩管理\"><a href=\"#色彩管理\" class=\"headerlink\" title=\"色彩管理\"></a>色彩管理</h3><p>&emsp;这个有点类似于以前划重点用的马克笔,通过合理的色彩搭配使得大脑觉得更有趣更容易接受.</p>\n<p>&emsp;思维导图可能有很多方法和技巧,但是作为作品,我觉得还是需要一些基本的审美的.如果搞得枝缠乱绕,五颜六色,我估计就算是思维导图,大脑也不会买账的.</p>\n<h3 id=\"学习误区\"><a href=\"#学习误区\" class=\"headerlink\" title=\"学习误区\"></a>学习误区</h3><p>&emsp;下面用思维导图的方式,描绘了学习思维导图的常见误区.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006kvZhRjw1f0ak9iqbrqj30es0drdj6.jpg\" alt=\"思维导图_误区\" title=\"误区\"></p>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><p>&emsp;我对于工具的看法,总结起来就两点:有用和常用.思维导图无疑是一款有用的工具,那么我们怎么才能常用呢?怎么才能降低时间成本和学习成本?</p>\n<p>&emsp;使用思维导图软件无疑是一个办法.目前思维导图软件基本分为两个大的阵营—Mindjet和Xmind.两者各有千秋,大家可以自己考察考察.</p>\n<p>&emsp;因为我长期在Linux Mint环境下工作,所以我唯一的选择就是<strong>xmind</strong>.</p>\n<p><a href=\"http://www.xmindchina.net/\">xmind中文官网</a></p>\n<p><a href=\"http://www.xmind.net/\">xmind英文官网</a></p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><p>&emsp;根据28准则,工具类的产品只需要掌握20%的部分就足以应付80%的日常工作.xmind的使用是很简单的,基本上可以直接上手.逐渐使用高级功能和快捷键.</p>\n<h3 id=\"用户手册\"><a href=\"#用户手册\" class=\"headerlink\" title=\"用户手册\"></a>用户手册</h3><p>&emsp;xmind的用户手册有中文版,写的很详尽.</p>\n<p><a href=\"http://www.xmindchina.net/shouce.html\">xmind用户手册</a></p>\n<p>值得一提的功能有如下:</p>\n<p><a href=\"http://www.xmindchina.net/help/h-bian-ji-li-shi.html\">版本回退</a></p>\n<blockquote>\n<p>xmind支持版本回退,类似于git和svn.</p>\n</blockquote>\n<p><a href=\"http://www.xmindchina.net/help/h-wai-kuang.html\">外框</a></p>\n<blockquote>\n<p>xmind支持将几个主题用外框进行整合.</p>\n</blockquote>\n<p><a href=\"http://www.xmindchina.net/help/h-gongzuobu-huabu.html\">画布</a>和<a href=\"http://www.xmindchina.net/help/h-dao-ru-gzb.html\">导入xmind工作簿</a></p>\n<blockquote>\n<p>画布功能可以将多个思维导图整个到一个文件中.导入工作簿可以将其他xmind文件导入.</p>\n<p>针对大型项目,我们可以每次做其中一部分,最后用这两个功能将它们整合.</p>\n</blockquote>\n<p><a href=\"http://www.xmindchina.net/help/h-shang-zuan-xia-zuan.html\">上钻下钻</a></p>\n<blockquote>\n<p>xmind到了子主题的部分,往往过小或者区分不明显.上钻下钻你值得拥有.</p>\n</blockquote>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>Enter/Tab（insert)</p>\n<blockquote>\n<p>这是一组创建主题的快捷键，稍微对XMind熟悉一些的用户都会知道。这里的Tab键是被设计用来创建子主题的，实践中操作起来，双手左右齐飞，思维图不停地生长，特别舒坦。insert键也是支持的，主要是为了照顾其他软件转过来的用户的使用习惯，不过不推荐使用，因为它距离手的位置太远，而且在Mac上是没有这个键的。</p>\n</blockquote>\n<p>Shift</p>\n<blockquote>\n<p>这两个会在移动主题的时候用到。经常看到新用户询问类似“我移动自由主题的时候会和其他主题连上，怎么办呀”的问题，这个时候只需要轻轻地按住Shift键的同时来移动自由主题即可。额外说一下，双击图上任意空白的地方即可创建自由主题。自由主题是非常实用的，可以和联系线一起使用来画流程图等。</p>\n</blockquote>\n<p>F2/F3/F4/F6</p>\n<blockquote>\n<p>这一组是和编辑相关的较为实用的快捷键。F2编辑主题，F3为主题添加标签，F4添加备注，重点要说说F6，即下钻。选中任何一个主题（除了中心主题）的时候，点击F6就会进入下钻状态。这时候，选中的主题变为了中心主题，其子主题也均在此状态下铺开显示，非常有助于在工作、交流的时候集中注意力，尤其是向别人展示一张内容较多的图的时候更会凸显这一点。</p>\n</blockquote>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>&emsp;我使用过mindjet和xmind,最近使用xmind也挺多.这周为了写博客,再次深入学习了下xmind,感觉收获还是挺多的.</p>\n<p>&emsp;xmind思维导图免费好用,你值得拥有.</p>"},{"layout":"post","title":"工具说总序_道器论","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第九周:)\n\n---\n\n##前言\n\n我少时浑浑噩噩,性情浮躁.每且凭借些许急智勉强度日.及至大学,沉溺于游戏之中,昏天黑地.毕业后无一技傍身,又蹉跎两年,勉强混个硕士文凭.大好时光,空耗数年.\n\n很感激毕业时有企业收留了我,领我进入了Linux和编程的世界.这里花团锦簇,令人目不暇接,只恨不得分出几个身子同时学习才好.每每暗自懊恼荒废的大好时光.\n\n> 种树最好的时间是二十年前,第二好的时间是现在.\n\n现在稍有觉悟,每日阅读精进,这篇算是我的元认知.\n\n<!--more-->\n\n---\n\n##道术之始\n\n> 形而上者谓之道,形而下者谓之器\n\n在西安时,有一次去参加实习面试.面试流程结束之后,还有点时间,通常面试官会问你还有什么问题没有?\n\n我当时自觉一事无成,如同浮萍般无力掌握自己的命运,便问了一句,大意是应该学什么语言之类的问题.我估计面试官对这个问题也是很有感慨,他的话对我影响很大.\n\n他说:技术分为两种:道和术.\n\n现在我们使用的语言,使用的工具大部分都可以归为术,它们是具体的,也是易变的.现在谁还需要知道70年代开发用什么语言么?如果我们仅仅满足于日常的工作而不去深究,在如此剧烈演变的计算机世界很容易被淘汰.\n\n潜藏在日常工作之下的,那些深邃的原理可以称之为道.编译原理,数据结构,算法,设计模式,网络原理等等如同在汪洋下的沉静的宝藏,无论海面电闪雷鸣,惊涛骇浪,它们岿然不动.\n\n到了一定的时候,如果没有深层次的积淀是很难走下去的.\n\n## 武功\n\n> 吾道一以贯之\n\n中国人尤其是男孩子从小看武侠片武侠小说长大,用武功来类比是最好不过的了.\n\n术就好比是招式,要想打倒敌人,完成工作,没有招式是万万不行的.在我们入职初期基本上都在不停地学习招式,企业招收员工不是为了招收一个学生在这学习的,更多的是要盈利,是需要员工创造价值的.所以作为员工而言尽快出活既是任务也是责任.\n\n道就好比是心法内功.虽然不像实际招式那样可以比划出来.可是没有它,使出的招式威力可就大有不同了.都是一招简单的黑虎掏心,我想王重阳的一掌和韦小宝的一掌想必威力是极为不同的.同时就像<<倚天屠龙记>>里的九阳神功,只要学会了这个内功,其他招式就可以信手拈花,随手可得.\n\n大部分企业都有具体的业务,有的用C做嵌入式开发,有的用Java,PHP做服务器开发等等.除了极个别优秀的同学,大部分人到了企业之后,都是需要一个熟悉的过程的.我想HR也没指望可以直接招到来之能战的员工.在技术上,一个有些内功修炼的员工工作想必是可以很快上手的.\n\n我参加工作刚刚满一年,从一个一窍不通的小子到了勉强可以应付工作.我自己也一直在激励自己多修炼内功.\n\n## 兵器\n\n> 器者各周其用\n\n行走江湖一把趁手的兵器是必不可少的.当然你如果到了少林扫地僧之类的境界,那就另当别论了.\n\n一名剑客不了解自己手中的剑那一定是猴子请来的逗比.现实工作中这样的例子比比皆是.我有时看到同事后退目录时用`cd ../../..`之类的命令,我真是有点着急.稍好一点的可以自己加条alias,进阶的可以使用ohmyzsh之类的框架,再好一点的可以做个dotfiles.\n\n并不是说别人的工作能力不好,我觉得搞技术的得有点geek精神.对于效率要有自己的追求.好的工具要能评价吸收,最后纳入自己的兵器谱之中.\n\n感谢这个伟大的时代,感谢github和stackoverflow让我们可以轻松和全世界的优秀开发者交流.\n\n站在巨人的肩膀上,我将使用vim+tmux+ohmyzsh来打造我的兵器.我的dotfiles初步已经搭建完成,当然它还稚嫩我将会持续改进.\n我借鉴了github上很多前辈的经验.我也很欢迎fork.下面是传送门:\n\n[成祎的dotfiles](https://github.com/chengyi818/dotfiles)\n\n## 尾声\n残阳如血,城市钢铁丛林,一位年轻的剑客正低着头,一丝不苟地在擦拭着自己的宝剑.他知道这是他最亲密的战友,他熟悉他的剑,就像熟悉自己的手一样.\n\n武林中门派众多,武功招式繁杂.他坚定信念,三千弱水,只取一瓢.剑客的心中燃烧着热血,想象着自己成为武林高手的一天,所以每日从不曾间断自己的内功修炼.\n\n这时,敲门声响起,看来一场新的战斗不可避免.他握了握自己手中的宝剑,义无反顾地走了出去.外面风起云涌.\n","source":"_posts/2016-01-30-工具说总序.md","raw":"---\nlayout: post\ntitle: 工具说总序_道器论\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第九周:)\n\n---\n\n##前言\n\n我少时浑浑噩噩,性情浮躁.每且凭借些许急智勉强度日.及至大学,沉溺于游戏之中,昏天黑地.毕业后无一技傍身,又蹉跎两年,勉强混个硕士文凭.大好时光,空耗数年.\n\n很感激毕业时有企业收留了我,领我进入了Linux和编程的世界.这里花团锦簇,令人目不暇接,只恨不得分出几个身子同时学习才好.每每暗自懊恼荒废的大好时光.\n\n> 种树最好的时间是二十年前,第二好的时间是现在.\n\n现在稍有觉悟,每日阅读精进,这篇算是我的元认知.\n\n<!--more-->\n\n---\n\n##道术之始\n\n> 形而上者谓之道,形而下者谓之器\n\n在西安时,有一次去参加实习面试.面试流程结束之后,还有点时间,通常面试官会问你还有什么问题没有?\n\n我当时自觉一事无成,如同浮萍般无力掌握自己的命运,便问了一句,大意是应该学什么语言之类的问题.我估计面试官对这个问题也是很有感慨,他的话对我影响很大.\n\n他说:技术分为两种:道和术.\n\n现在我们使用的语言,使用的工具大部分都可以归为术,它们是具体的,也是易变的.现在谁还需要知道70年代开发用什么语言么?如果我们仅仅满足于日常的工作而不去深究,在如此剧烈演变的计算机世界很容易被淘汰.\n\n潜藏在日常工作之下的,那些深邃的原理可以称之为道.编译原理,数据结构,算法,设计模式,网络原理等等如同在汪洋下的沉静的宝藏,无论海面电闪雷鸣,惊涛骇浪,它们岿然不动.\n\n到了一定的时候,如果没有深层次的积淀是很难走下去的.\n\n## 武功\n\n> 吾道一以贯之\n\n中国人尤其是男孩子从小看武侠片武侠小说长大,用武功来类比是最好不过的了.\n\n术就好比是招式,要想打倒敌人,完成工作,没有招式是万万不行的.在我们入职初期基本上都在不停地学习招式,企业招收员工不是为了招收一个学生在这学习的,更多的是要盈利,是需要员工创造价值的.所以作为员工而言尽快出活既是任务也是责任.\n\n道就好比是心法内功.虽然不像实际招式那样可以比划出来.可是没有它,使出的招式威力可就大有不同了.都是一招简单的黑虎掏心,我想王重阳的一掌和韦小宝的一掌想必威力是极为不同的.同时就像<<倚天屠龙记>>里的九阳神功,只要学会了这个内功,其他招式就可以信手拈花,随手可得.\n\n大部分企业都有具体的业务,有的用C做嵌入式开发,有的用Java,PHP做服务器开发等等.除了极个别优秀的同学,大部分人到了企业之后,都是需要一个熟悉的过程的.我想HR也没指望可以直接招到来之能战的员工.在技术上,一个有些内功修炼的员工工作想必是可以很快上手的.\n\n我参加工作刚刚满一年,从一个一窍不通的小子到了勉强可以应付工作.我自己也一直在激励自己多修炼内功.\n\n## 兵器\n\n> 器者各周其用\n\n行走江湖一把趁手的兵器是必不可少的.当然你如果到了少林扫地僧之类的境界,那就另当别论了.\n\n一名剑客不了解自己手中的剑那一定是猴子请来的逗比.现实工作中这样的例子比比皆是.我有时看到同事后退目录时用`cd ../../..`之类的命令,我真是有点着急.稍好一点的可以自己加条alias,进阶的可以使用ohmyzsh之类的框架,再好一点的可以做个dotfiles.\n\n并不是说别人的工作能力不好,我觉得搞技术的得有点geek精神.对于效率要有自己的追求.好的工具要能评价吸收,最后纳入自己的兵器谱之中.\n\n感谢这个伟大的时代,感谢github和stackoverflow让我们可以轻松和全世界的优秀开发者交流.\n\n站在巨人的肩膀上,我将使用vim+tmux+ohmyzsh来打造我的兵器.我的dotfiles初步已经搭建完成,当然它还稚嫩我将会持续改进.\n我借鉴了github上很多前辈的经验.我也很欢迎fork.下面是传送门:\n\n[成祎的dotfiles](https://github.com/chengyi818/dotfiles)\n\n## 尾声\n残阳如血,城市钢铁丛林,一位年轻的剑客正低着头,一丝不苟地在擦拭着自己的宝剑.他知道这是他最亲密的战友,他熟悉他的剑,就像熟悉自己的手一样.\n\n武林中门派众多,武功招式繁杂.他坚定信念,三千弱水,只取一瓢.剑客的心中燃烧着热血,想象着自己成为武林高手的一天,所以每日从不曾间断自己的内功修炼.\n\n这时,敲门声响起,看来一场新的战斗不可避免.他握了握自己手中的宝剑,义无反顾地走了出去.外面风起云涌.\n","slug":"工具说总序","published":1,"date":"2016-01-29T16:00:00.000Z","updated":"2016-04-07T06:38:57.445Z","photos":[],"link":"","_id":"cimpzdpo50014m1f1f9iaqd5r","content":"<p>本周是成胖子每周一博的第九周:)</p>\n<hr>\n<p>##前言</p>\n<p>我少时浑浑噩噩,性情浮躁.每且凭借些许急智勉强度日.及至大学,沉溺于游戏之中,昏天黑地.毕业后无一技傍身,又蹉跎两年,勉强混个硕士文凭.大好时光,空耗数年.</p>\n<p>很感激毕业时有企业收留了我,领我进入了Linux和编程的世界.这里花团锦簇,令人目不暇接,只恨不得分出几个身子同时学习才好.每每暗自懊恼荒废的大好时光.</p>\n<blockquote>\n<p>种树最好的时间是二十年前,第二好的时间是现在.</p>\n</blockquote>\n<p>现在稍有觉悟,每日阅读精进,这篇算是我的元认知.</p>\n<a id=\"more\"></a>\n<hr>\n<p>##道术之始</p>\n<blockquote>\n<p>形而上者谓之道,形而下者谓之器</p>\n</blockquote>\n<p>在西安时,有一次去参加实习面试.面试流程结束之后,还有点时间,通常面试官会问你还有什么问题没有?</p>\n<p>我当时自觉一事无成,如同浮萍般无力掌握自己的命运,便问了一句,大意是应该学什么语言之类的问题.我估计面试官对这个问题也是很有感慨,他的话对我影响很大.</p>\n<p>他说:技术分为两种:道和术.</p>\n<p>现在我们使用的语言,使用的工具大部分都可以归为术,它们是具体的,也是易变的.现在谁还需要知道70年代开发用什么语言么?如果我们仅仅满足于日常的工作而不去深究,在如此剧烈演变的计算机世界很容易被淘汰.</p>\n<p>潜藏在日常工作之下的,那些深邃的原理可以称之为道.编译原理,数据结构,算法,设计模式,网络原理等等如同在汪洋下的沉静的宝藏,无论海面电闪雷鸣,惊涛骇浪,它们岿然不动.</p>\n<p>到了一定的时候,如果没有深层次的积淀是很难走下去的.</p>\n<h2 id=\"武功\"><a href=\"#武功\" class=\"headerlink\" title=\"武功\"></a>武功</h2><blockquote>\n<p>吾道一以贯之</p>\n</blockquote>\n<p>中国人尤其是男孩子从小看武侠片武侠小说长大,用武功来类比是最好不过的了.</p>\n<p>术就好比是招式,要想打倒敌人,完成工作,没有招式是万万不行的.在我们入职初期基本上都在不停地学习招式,企业招收员工不是为了招收一个学生在这学习的,更多的是要盈利,是需要员工创造价值的.所以作为员工而言尽快出活既是任务也是责任.</p>\n<p>道就好比是心法内功.虽然不像实际招式那样可以比划出来.可是没有它,使出的招式威力可就大有不同了.都是一招简单的黑虎掏心,我想王重阳的一掌和韦小宝的一掌想必威力是极为不同的.同时就像&lt;&lt;倚天屠龙记&gt;&gt;里的九阳神功,只要学会了这个内功,其他招式就可以信手拈花,随手可得.</p>\n<p>大部分企业都有具体的业务,有的用C做嵌入式开发,有的用Java,PHP做服务器开发等等.除了极个别优秀的同学,大部分人到了企业之后,都是需要一个熟悉的过程的.我想HR也没指望可以直接招到来之能战的员工.在技术上,一个有些内功修炼的员工工作想必是可以很快上手的.</p>\n<p>我参加工作刚刚满一年,从一个一窍不通的小子到了勉强可以应付工作.我自己也一直在激励自己多修炼内功.</p>\n<h2 id=\"兵器\"><a href=\"#兵器\" class=\"headerlink\" title=\"兵器\"></a>兵器</h2><blockquote>\n<p>器者各周其用</p>\n</blockquote>\n<p>行走江湖一把趁手的兵器是必不可少的.当然你如果到了少林扫地僧之类的境界,那就另当别论了.</p>\n<p>一名剑客不了解自己手中的剑那一定是猴子请来的逗比.现实工作中这样的例子比比皆是.我有时看到同事后退目录时用<code>cd ../../..</code>之类的命令,我真是有点着急.稍好一点的可以自己加条alias,进阶的可以使用ohmyzsh之类的框架,再好一点的可以做个dotfiles.</p>\n<p>并不是说别人的工作能力不好,我觉得搞技术的得有点geek精神.对于效率要有自己的追求.好的工具要能评价吸收,最后纳入自己的兵器谱之中.</p>\n<p>感谢这个伟大的时代,感谢github和stackoverflow让我们可以轻松和全世界的优秀开发者交流.</p>\n<p>站在巨人的肩膀上,我将使用vim+tmux+ohmyzsh来打造我的兵器.我的dotfiles初步已经搭建完成,当然它还稚嫩我将会持续改进.<br>我借鉴了github上很多前辈的经验.我也很欢迎fork.下面是传送门:</p>\n<p><a href=\"https://github.com/chengyi818/dotfiles\" target=\"_blank\" rel=\"external\">成祎的dotfiles</a></p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>残阳如血,城市钢铁丛林,一位年轻的剑客正低着头,一丝不苟地在擦拭着自己的宝剑.他知道这是他最亲密的战友,他熟悉他的剑,就像熟悉自己的手一样.</p>\n<p>武林中门派众多,武功招式繁杂.他坚定信念,三千弱水,只取一瓢.剑客的心中燃烧着热血,想象着自己成为武林高手的一天,所以每日从不曾间断自己的内功修炼.</p>\n<p>这时,敲门声响起,看来一场新的战斗不可避免.他握了握自己手中的宝剑,义无反顾地走了出去.外面风起云涌.</p>\n","excerpt":"<p>本周是成胖子每周一博的第九周:)</p>\n<hr>\n<p>##前言</p>\n<p>我少时浑浑噩噩,性情浮躁.每且凭借些许急智勉强度日.及至大学,沉溺于游戏之中,昏天黑地.毕业后无一技傍身,又蹉跎两年,勉强混个硕士文凭.大好时光,空耗数年.</p>\n<p>很感激毕业时有企业收留了我,领我进入了Linux和编程的世界.这里花团锦簇,令人目不暇接,只恨不得分出几个身子同时学习才好.每每暗自懊恼荒废的大好时光.</p>\n<blockquote>\n<p>种树最好的时间是二十年前,第二好的时间是现在.</p>\n</blockquote>\n<p>现在稍有觉悟,每日阅读精进,这篇算是我的元认知.</p>","more":"<hr>\n<p>##道术之始</p>\n<blockquote>\n<p>形而上者谓之道,形而下者谓之器</p>\n</blockquote>\n<p>在西安时,有一次去参加实习面试.面试流程结束之后,还有点时间,通常面试官会问你还有什么问题没有?</p>\n<p>我当时自觉一事无成,如同浮萍般无力掌握自己的命运,便问了一句,大意是应该学什么语言之类的问题.我估计面试官对这个问题也是很有感慨,他的话对我影响很大.</p>\n<p>他说:技术分为两种:道和术.</p>\n<p>现在我们使用的语言,使用的工具大部分都可以归为术,它们是具体的,也是易变的.现在谁还需要知道70年代开发用什么语言么?如果我们仅仅满足于日常的工作而不去深究,在如此剧烈演变的计算机世界很容易被淘汰.</p>\n<p>潜藏在日常工作之下的,那些深邃的原理可以称之为道.编译原理,数据结构,算法,设计模式,网络原理等等如同在汪洋下的沉静的宝藏,无论海面电闪雷鸣,惊涛骇浪,它们岿然不动.</p>\n<p>到了一定的时候,如果没有深层次的积淀是很难走下去的.</p>\n<h2 id=\"武功\"><a href=\"#武功\" class=\"headerlink\" title=\"武功\"></a>武功</h2><blockquote>\n<p>吾道一以贯之</p>\n</blockquote>\n<p>中国人尤其是男孩子从小看武侠片武侠小说长大,用武功来类比是最好不过的了.</p>\n<p>术就好比是招式,要想打倒敌人,完成工作,没有招式是万万不行的.在我们入职初期基本上都在不停地学习招式,企业招收员工不是为了招收一个学生在这学习的,更多的是要盈利,是需要员工创造价值的.所以作为员工而言尽快出活既是任务也是责任.</p>\n<p>道就好比是心法内功.虽然不像实际招式那样可以比划出来.可是没有它,使出的招式威力可就大有不同了.都是一招简单的黑虎掏心,我想王重阳的一掌和韦小宝的一掌想必威力是极为不同的.同时就像&lt;&lt;倚天屠龙记&gt;&gt;里的九阳神功,只要学会了这个内功,其他招式就可以信手拈花,随手可得.</p>\n<p>大部分企业都有具体的业务,有的用C做嵌入式开发,有的用Java,PHP做服务器开发等等.除了极个别优秀的同学,大部分人到了企业之后,都是需要一个熟悉的过程的.我想HR也没指望可以直接招到来之能战的员工.在技术上,一个有些内功修炼的员工工作想必是可以很快上手的.</p>\n<p>我参加工作刚刚满一年,从一个一窍不通的小子到了勉强可以应付工作.我自己也一直在激励自己多修炼内功.</p>\n<h2 id=\"兵器\"><a href=\"#兵器\" class=\"headerlink\" title=\"兵器\"></a>兵器</h2><blockquote>\n<p>器者各周其用</p>\n</blockquote>\n<p>行走江湖一把趁手的兵器是必不可少的.当然你如果到了少林扫地僧之类的境界,那就另当别论了.</p>\n<p>一名剑客不了解自己手中的剑那一定是猴子请来的逗比.现实工作中这样的例子比比皆是.我有时看到同事后退目录时用<code>cd ../../..</code>之类的命令,我真是有点着急.稍好一点的可以自己加条alias,进阶的可以使用ohmyzsh之类的框架,再好一点的可以做个dotfiles.</p>\n<p>并不是说别人的工作能力不好,我觉得搞技术的得有点geek精神.对于效率要有自己的追求.好的工具要能评价吸收,最后纳入自己的兵器谱之中.</p>\n<p>感谢这个伟大的时代,感谢github和stackoverflow让我们可以轻松和全世界的优秀开发者交流.</p>\n<p>站在巨人的肩膀上,我将使用vim+tmux+ohmyzsh来打造我的兵器.我的dotfiles初步已经搭建完成,当然它还稚嫩我将会持续改进.<br>我借鉴了github上很多前辈的经验.我也很欢迎fork.下面是传送门:</p>\n<p><a href=\"https://github.com/chengyi818/dotfiles\">成祎的dotfiles</a></p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>残阳如血,城市钢铁丛林,一位年轻的剑客正低着头,一丝不苟地在擦拭着自己的宝剑.他知道这是他最亲密的战友,他熟悉他的剑,就像熟悉自己的手一样.</p>\n<p>武林中门派众多,武功招式繁杂.他坚定信念,三千弱水,只取一瓢.剑客的心中燃烧着热血,想象着自己成为武林高手的一天,所以每日从不曾间断自己的内功修炼.</p>\n<p>这时,敲门声响起,看来一场新的战斗不可避免.他握了握自己手中的宝剑,义无反顾地走了出去.外面风起云涌.</p>"},{"layout":"post","title":"个人事务管理doit.im","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十周:)\n\n---\n\n## 前言\n\n偶然在朋友圈看到朋友发了说状态,说`omnifocus`很炫酷.我当然也不知道是个啥?查了一下,说是一个GTD软件.顺藤摸瓜,我就接触到了所谓第四代时间管理的理念.[GTD简介](https://en.wikipedia.org/wiki/Getting_Things_Done)\n\n>老人言:不但要埋头拉车,也要抬头看路.\n\n简要来讲,GTD就是以流程化的方式,处理了从目标到具体行动的一系列问题.迫使我们进行思考,从而将个人事务处理的比较有条理.\n\n<!--more-->\n\n今天主要来介绍下我使用的个人事务管理软件---doit.im.我也是刚刚学习,可能还有很多不规范的地方.学习方法论这种事情我认为有两步:\n\n1. 正确理解别人的理念,学习别人的处理方式.\n2. 根据自己的实际情况,将这种理念和工具内化.\n\n正如我在总序中所言,工具务必多用,并且在使用中动态调整,使之契合自己,而不是一味的教条照搬.\n\n## 理论\n\nGTD的理论是由美国人David Allen在他的畅销书`Getting Things Done`中提出的.中文翻译版的名字是`搞定`.有兴趣的同学可以找点资料深入看看.\n\n网上有很多相关的教程,我这里贴一个流程图,我基本就是按照这个执行的.\n\n![GTD流程图](http://www.mlocn.com/wp-content/uploads/2015/01/o_GTD-CN.jpg)\n\n## 工具\n\n信息时代,我们不可能再用纸笔来完成GTD流程,目前有不少GTD的软件.我想有这么几个筛选标准.\n\n1. 符合GTD的理念,各种流程化操作支持.\n2. Web端,移动端应用全面\n3. 云同步\n\n我目前选择的是doit.im.个人感觉还是比较好用的,推荐尝试.\n\n注册的话,直接送一个月的高级账户.另外如果要买高级账户的话,在如下链接是可以打86折的.\n\n[打折链接1](http://blog.hiddenwangcc.com/)\n\n[打折链接2](http://xbeta.info/doitim.htm)\n\n## 使用方法\n\n我刚接触时间还不久,就不在这里班门弄斧了.我感觉[易仁永澄](http://blog.hiddenwangcc.com/)的体悟是比我要高深的多的,推荐大家去看看.\n\n当然别人的观念方法,只能借鉴.最终还是要内化为自己的方法.\n\n>道理就是这么简单的道理.听来的和自己践行后体悟的区别还是很大的.\n\n[易仁永澄的多贝公开课](http://www.duobei.com/course/1680163027;JSESSIONID=fd47cc03-205a-44c6-903b-6f4f29b61191)\n\n## 我的一点小心得\n\n目前,我使用doit.im一个月了.感觉至少有以下这些好处:\n\n1. 要做的事情从脑子里面挪到了笔记上,心里慢慢开始有谱了.要做的事情可以权衡之后,选择性完成.做事情真的会变得有条理.\n\n2. 做任何事情,开始之前有计划,结束之后有回顾,都是极好的.我心里是知道,可是行动上很难坚持.现在doit有手机客户端和web端,计划和回顾一是很方便快捷,二是有提醒功能.\n\n3. 脑子里面闪现的各种火花想法可以放到收集箱中,按GTD标准流程处理.同时还有个目标功能,可以静下心来,给自己些目标.\n\n4. 泡沫化的阅读和使用时间没啥意义.有了具体的行动计划之后,再借助时间管理将各个行动按时间排序,依次完成.\n\n我的理解啥是目标呢?说白点,就是你想要啥.你不说,我怎么知道你想要啥呢.定目标就是清晰地告诉自己,自己最想得到的.\n\n有了目标之后,就是拆解目标,将目标拆解为各种项目,最后将项目拆解为各种几个小时内就能完成的行动.\n\n综上,doit对我而言,现在是目标管理和时间管理的二合一工具,也就是在什么时间做什么事情的事务管理工具.\n\n## 尾记\n\n一个好习惯最重要的是什么?坚持.给自己定个目标,然后践行之.\n\n共勉,下周见:)\n","source":"_posts/2016-02-08-事务管理GTD.md","raw":"---\nlayout: post\ntitle: 个人事务管理doit.im\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十周:)\n\n---\n\n## 前言\n\n偶然在朋友圈看到朋友发了说状态,说`omnifocus`很炫酷.我当然也不知道是个啥?查了一下,说是一个GTD软件.顺藤摸瓜,我就接触到了所谓第四代时间管理的理念.[GTD简介](https://en.wikipedia.org/wiki/Getting_Things_Done)\n\n>老人言:不但要埋头拉车,也要抬头看路.\n\n简要来讲,GTD就是以流程化的方式,处理了从目标到具体行动的一系列问题.迫使我们进行思考,从而将个人事务处理的比较有条理.\n\n<!--more-->\n\n今天主要来介绍下我使用的个人事务管理软件---doit.im.我也是刚刚学习,可能还有很多不规范的地方.学习方法论这种事情我认为有两步:\n\n1. 正确理解别人的理念,学习别人的处理方式.\n2. 根据自己的实际情况,将这种理念和工具内化.\n\n正如我在总序中所言,工具务必多用,并且在使用中动态调整,使之契合自己,而不是一味的教条照搬.\n\n## 理论\n\nGTD的理论是由美国人David Allen在他的畅销书`Getting Things Done`中提出的.中文翻译版的名字是`搞定`.有兴趣的同学可以找点资料深入看看.\n\n网上有很多相关的教程,我这里贴一个流程图,我基本就是按照这个执行的.\n\n![GTD流程图](http://www.mlocn.com/wp-content/uploads/2015/01/o_GTD-CN.jpg)\n\n## 工具\n\n信息时代,我们不可能再用纸笔来完成GTD流程,目前有不少GTD的软件.我想有这么几个筛选标准.\n\n1. 符合GTD的理念,各种流程化操作支持.\n2. Web端,移动端应用全面\n3. 云同步\n\n我目前选择的是doit.im.个人感觉还是比较好用的,推荐尝试.\n\n注册的话,直接送一个月的高级账户.另外如果要买高级账户的话,在如下链接是可以打86折的.\n\n[打折链接1](http://blog.hiddenwangcc.com/)\n\n[打折链接2](http://xbeta.info/doitim.htm)\n\n## 使用方法\n\n我刚接触时间还不久,就不在这里班门弄斧了.我感觉[易仁永澄](http://blog.hiddenwangcc.com/)的体悟是比我要高深的多的,推荐大家去看看.\n\n当然别人的观念方法,只能借鉴.最终还是要内化为自己的方法.\n\n>道理就是这么简单的道理.听来的和自己践行后体悟的区别还是很大的.\n\n[易仁永澄的多贝公开课](http://www.duobei.com/course/1680163027;JSESSIONID=fd47cc03-205a-44c6-903b-6f4f29b61191)\n\n## 我的一点小心得\n\n目前,我使用doit.im一个月了.感觉至少有以下这些好处:\n\n1. 要做的事情从脑子里面挪到了笔记上,心里慢慢开始有谱了.要做的事情可以权衡之后,选择性完成.做事情真的会变得有条理.\n\n2. 做任何事情,开始之前有计划,结束之后有回顾,都是极好的.我心里是知道,可是行动上很难坚持.现在doit有手机客户端和web端,计划和回顾一是很方便快捷,二是有提醒功能.\n\n3. 脑子里面闪现的各种火花想法可以放到收集箱中,按GTD标准流程处理.同时还有个目标功能,可以静下心来,给自己些目标.\n\n4. 泡沫化的阅读和使用时间没啥意义.有了具体的行动计划之后,再借助时间管理将各个行动按时间排序,依次完成.\n\n我的理解啥是目标呢?说白点,就是你想要啥.你不说,我怎么知道你想要啥呢.定目标就是清晰地告诉自己,自己最想得到的.\n\n有了目标之后,就是拆解目标,将目标拆解为各种项目,最后将项目拆解为各种几个小时内就能完成的行动.\n\n综上,doit对我而言,现在是目标管理和时间管理的二合一工具,也就是在什么时间做什么事情的事务管理工具.\n\n## 尾记\n\n一个好习惯最重要的是什么?坚持.给自己定个目标,然后践行之.\n\n共勉,下周见:)\n","slug":"事务管理GTD","published":1,"date":"2016-02-07T16:00:00.000Z","updated":"2016-04-07T07:01:23.249Z","photos":[],"link":"","_id":"cimpzdpo70018m1f1km4ylq8f","content":"<p>本周是成胖子每周一博的第十周:)</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>偶然在朋友圈看到朋友发了说状态,说<code>omnifocus</code>很炫酷.我当然也不知道是个啥?查了一下,说是一个GTD软件.顺藤摸瓜,我就接触到了所谓第四代时间管理的理念.<a href=\"https://en.wikipedia.org/wiki/Getting_Things_Done\" target=\"_blank\" rel=\"external\">GTD简介</a></p>\n<blockquote>\n<p>老人言:不但要埋头拉车,也要抬头看路.</p>\n</blockquote>\n<p>简要来讲,GTD就是以流程化的方式,处理了从目标到具体行动的一系列问题.迫使我们进行思考,从而将个人事务处理的比较有条理.</p>\n<a id=\"more\"></a>\n<p>今天主要来介绍下我使用的个人事务管理软件—doit.im.我也是刚刚学习,可能还有很多不规范的地方.学习方法论这种事情我认为有两步:</p>\n<ol>\n<li>正确理解别人的理念,学习别人的处理方式.</li>\n<li>根据自己的实际情况,将这种理念和工具内化.</li>\n</ol>\n<p>正如我在总序中所言,工具务必多用,并且在使用中动态调整,使之契合自己,而不是一味的教条照搬.</p>\n<h2 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h2><p>GTD的理论是由美国人David Allen在他的畅销书<code>Getting Things Done</code>中提出的.中文翻译版的名字是<code>搞定</code>.有兴趣的同学可以找点资料深入看看.</p>\n<p>网上有很多相关的教程,我这里贴一个流程图,我基本就是按照这个执行的.</p>\n<p><img src=\"http://www.mlocn.com/wp-content/uploads/2015/01/o_GTD-CN.jpg\" alt=\"GTD流程图\"></p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>信息时代,我们不可能再用纸笔来完成GTD流程,目前有不少GTD的软件.我想有这么几个筛选标准.</p>\n<ol>\n<li>符合GTD的理念,各种流程化操作支持.</li>\n<li>Web端,移动端应用全面</li>\n<li>云同步</li>\n</ol>\n<p>我目前选择的是doit.im.个人感觉还是比较好用的,推荐尝试.</p>\n<p>注册的话,直接送一个月的高级账户.另外如果要买高级账户的话,在如下链接是可以打86折的.</p>\n<p><a href=\"http://blog.hiddenwangcc.com/\" target=\"_blank\" rel=\"external\">打折链接1</a></p>\n<p><a href=\"http://xbeta.info/doitim.htm\" target=\"_blank\" rel=\"external\">打折链接2</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>我刚接触时间还不久,就不在这里班门弄斧了.我感觉<a href=\"http://blog.hiddenwangcc.com/\" target=\"_blank\" rel=\"external\">易仁永澄</a>的体悟是比我要高深的多的,推荐大家去看看.</p>\n<p>当然别人的观念方法,只能借鉴.最终还是要内化为自己的方法.</p>\n<blockquote>\n<p>道理就是这么简单的道理.听来的和自己践行后体悟的区别还是很大的.</p>\n</blockquote>\n<p><a href=\"http://www.duobei.com/course/1680163027;JSESSIONID=fd47cc03-205a-44c6-903b-6f4f29b61191\" target=\"_blank\" rel=\"external\">易仁永澄的多贝公开课</a></p>\n<h2 id=\"我的一点小心得\"><a href=\"#我的一点小心得\" class=\"headerlink\" title=\"我的一点小心得\"></a>我的一点小心得</h2><p>目前,我使用doit.im一个月了.感觉至少有以下这些好处:</p>\n<ol>\n<li><p>要做的事情从脑子里面挪到了笔记上,心里慢慢开始有谱了.要做的事情可以权衡之后,选择性完成.做事情真的会变得有条理.</p>\n</li>\n<li><p>做任何事情,开始之前有计划,结束之后有回顾,都是极好的.我心里是知道,可是行动上很难坚持.现在doit有手机客户端和web端,计划和回顾一是很方便快捷,二是有提醒功能.</p>\n</li>\n<li><p>脑子里面闪现的各种火花想法可以放到收集箱中,按GTD标准流程处理.同时还有个目标功能,可以静下心来,给自己些目标.</p>\n</li>\n<li><p>泡沫化的阅读和使用时间没啥意义.有了具体的行动计划之后,再借助时间管理将各个行动按时间排序,依次完成.</p>\n</li>\n</ol>\n<p>我的理解啥是目标呢?说白点,就是你想要啥.你不说,我怎么知道你想要啥呢.定目标就是清晰地告诉自己,自己最想得到的.</p>\n<p>有了目标之后,就是拆解目标,将目标拆解为各种项目,最后将项目拆解为各种几个小时内就能完成的行动.</p>\n<p>综上,doit对我而言,现在是目标管理和时间管理的二合一工具,也就是在什么时间做什么事情的事务管理工具.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>一个好习惯最重要的是什么?坚持.给自己定个目标,然后践行之.</p>\n<p>共勉,下周见:)</p>\n","excerpt":"<p>本周是成胖子每周一博的第十周:)</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>偶然在朋友圈看到朋友发了说状态,说<code>omnifocus</code>很炫酷.我当然也不知道是个啥?查了一下,说是一个GTD软件.顺藤摸瓜,我就接触到了所谓第四代时间管理的理念.<a href=\"https://en.wikipedia.org/wiki/Getting_Things_Done\">GTD简介</a></p>\n<blockquote>\n<p>老人言:不但要埋头拉车,也要抬头看路.</p>\n</blockquote>\n<p>简要来讲,GTD就是以流程化的方式,处理了从目标到具体行动的一系列问题.迫使我们进行思考,从而将个人事务处理的比较有条理.</p>","more":"<p>今天主要来介绍下我使用的个人事务管理软件—doit.im.我也是刚刚学习,可能还有很多不规范的地方.学习方法论这种事情我认为有两步:</p>\n<ol>\n<li>正确理解别人的理念,学习别人的处理方式.</li>\n<li>根据自己的实际情况,将这种理念和工具内化.</li>\n</ol>\n<p>正如我在总序中所言,工具务必多用,并且在使用中动态调整,使之契合自己,而不是一味的教条照搬.</p>\n<h2 id=\"理论\"><a href=\"#理论\" class=\"headerlink\" title=\"理论\"></a>理论</h2><p>GTD的理论是由美国人David Allen在他的畅销书<code>Getting Things Done</code>中提出的.中文翻译版的名字是<code>搞定</code>.有兴趣的同学可以找点资料深入看看.</p>\n<p>网上有很多相关的教程,我这里贴一个流程图,我基本就是按照这个执行的.</p>\n<p><img src=\"http://www.mlocn.com/wp-content/uploads/2015/01/o_GTD-CN.jpg\" alt=\"GTD流程图\"></p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>信息时代,我们不可能再用纸笔来完成GTD流程,目前有不少GTD的软件.我想有这么几个筛选标准.</p>\n<ol>\n<li>符合GTD的理念,各种流程化操作支持.</li>\n<li>Web端,移动端应用全面</li>\n<li>云同步</li>\n</ol>\n<p>我目前选择的是doit.im.个人感觉还是比较好用的,推荐尝试.</p>\n<p>注册的话,直接送一个月的高级账户.另外如果要买高级账户的话,在如下链接是可以打86折的.</p>\n<p><a href=\"http://blog.hiddenwangcc.com/\">打折链接1</a></p>\n<p><a href=\"http://xbeta.info/doitim.htm\">打折链接2</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>我刚接触时间还不久,就不在这里班门弄斧了.我感觉<a href=\"http://blog.hiddenwangcc.com/\">易仁永澄</a>的体悟是比我要高深的多的,推荐大家去看看.</p>\n<p>当然别人的观念方法,只能借鉴.最终还是要内化为自己的方法.</p>\n<blockquote>\n<p>道理就是这么简单的道理.听来的和自己践行后体悟的区别还是很大的.</p>\n</blockquote>\n<p><a href=\"http://www.duobei.com/course/1680163027;JSESSIONID=fd47cc03-205a-44c6-903b-6f4f29b61191\">易仁永澄的多贝公开课</a></p>\n<h2 id=\"我的一点小心得\"><a href=\"#我的一点小心得\" class=\"headerlink\" title=\"我的一点小心得\"></a>我的一点小心得</h2><p>目前,我使用doit.im一个月了.感觉至少有以下这些好处:</p>\n<ol>\n<li><p>要做的事情从脑子里面挪到了笔记上,心里慢慢开始有谱了.要做的事情可以权衡之后,选择性完成.做事情真的会变得有条理.</p>\n</li>\n<li><p>做任何事情,开始之前有计划,结束之后有回顾,都是极好的.我心里是知道,可是行动上很难坚持.现在doit有手机客户端和web端,计划和回顾一是很方便快捷,二是有提醒功能.</p>\n</li>\n<li><p>脑子里面闪现的各种火花想法可以放到收集箱中,按GTD标准流程处理.同时还有个目标功能,可以静下心来,给自己些目标.</p>\n</li>\n<li><p>泡沫化的阅读和使用时间没啥意义.有了具体的行动计划之后,再借助时间管理将各个行动按时间排序,依次完成.</p>\n</li>\n</ol>\n<p>我的理解啥是目标呢?说白点,就是你想要啥.你不说,我怎么知道你想要啥呢.定目标就是清晰地告诉自己,自己最想得到的.</p>\n<p>有了目标之后,就是拆解目标,将目标拆解为各种项目,最后将项目拆解为各种几个小时内就能完成的行动.</p>\n<p>综上,doit对我而言,现在是目标管理和时间管理的二合一工具,也就是在什么时间做什么事情的事务管理工具.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>一个好习惯最重要的是什么?坚持.给自己定个目标,然后践行之.</p>\n<p>共勉,下周见:)</p>"},{"layout":"post","title":"时间管理pomotodo","comments":1,"analytics":true,"_content":"\n春节放假休息了两周\n本周是成胖子每周一博的第十一周:)\n\n---\n\n## 1.前言\n前面我们谈到过GTD工作法及其软件doit.这主要是将目标分解为项目,再将项目分解为行动.最后的粒度将是今天一个具体的行动,比如写一篇博客.\n\n现在我遇到的问题是:\n\n1. 一个行动往往需要数个小时,在这过程当中怎么保持专注?\n\n2. 我们都知道久坐对身体的危害.工作时往往会忽视时间的流逝(心流).怎样定时休息呢?\n\n我的答案是---**番茄工作法**\n\n<!--more-->\n\n![番茄工作法](http://www.legalproductivity.com/wp-content/uploads/2010/08/pomodoro_timer.jpg)\n\n## 2.理念\n番茄工作法的理念和Unix哲学一致---*Do one thing and Do It Well*\n\n在一段时间内**专注**地做好一件事,这就是番茄工作法.那么它会带来哪些好处呢?\n\n### 2.1收益\n\n1) 面对复杂的问题,我们往往会产生畏难情绪,不愿开始动手.\n\n>番茄工作法并不关注deadline,它只是简单的要求你开始一个番茄钟,循环往复.你不需要去考虑难度,只需要开始->休息->再开始.\n\n2) 短周期迭代\n\n>番茄工作法有助于保持工作节奏.选择->开始->休息->再选择->开始->休息.\n\n3) 有助于快速恢复工作状态\n\n>早晨刚到办公室或者刚吃过饭常常没有工作状态.利用番茄工作法的神经反射,往往可以快速进入状态.\n\n4) 记录,对比和改进\n\n>记录每天完成多少个番茄,通过对比自己的计划,有助于改进.\n\n5) 预估\n\n>我们常常被要求预估完成某项任务的时间.通常而言,误差很大.通过不断预估完成某件事需要的番茄钟,有助于我们培养自己的预估能力.\n\n6) 对抗拖延\n\n>拖延的原因无外乎:\n\n>1. 追求完美,对自己期望很高.\n>2. 害怕失败\n>3. 被强迫要求完成某项任务.\n\n>无论怎样,番茄钟仅仅要求你,开始一个钟并全身心投入.\n\n7) 简单\n\n## 3.方法\n下面我们来介绍下,番茄钟的实践方法:\n\n### 3.1 列清单\n清单包括:活动清单和今日待办清单.这里我使用了GTD工具---doit.im,详情参见我的上一篇[博客](http://yiting.co/2016/02/08/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86GTD.html).\n\n### 3.2 跟踪\n跟踪是在三种状态间切换:\n\n#### 3.2.1. 选择\n此时应当保持洞察力,根据**要事第一**原则,选择出需要完成的任务.\n\n#### 3.2.2. 工作\n在一个番茄钟的时间内(通常是25min),专注于完成任务,尽量心无旁骛.\n\n#### 3.2.3. 休息\n每完成一个番茄钟,让自己稍微休息一会(通常是5min),站起来伸个懒腰,扭扭脖子,清空大脑.有助于清除[前后向干扰](http://pedia.cloud.edu.tw/Entry/Detail/?title=%E8%A8%98%E6%86%B6%E5%B9%B2%E6%93%BE%E8%AB%96%EF%BC%9A%E5%89%8D%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88proactive_interference%EF%BC%89_%E5%BE%8C%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88retroactive_interference%EF%BC%89).\n\n每完成四个番茄钟,让自己稍微多休息一会(通常15min左右).上个洗手间,倒杯水.有条件的话,可以试试短时间的冥想.这里推荐一个[网站](http://www.calm.com/)\n\n### 3.3 记录/对比/改进\n根据自己一天的记录,来改进自己的工作.\n>吾日三省吾身\n\n## 4. 意外\n上面首先介绍了最简单的使用场景.下面我们来看看各种意外情况.\n>世间不如意之事,十之八九.\n\n### 4.1 时间剩余\n可能某件事做完了,但是一个番茄钟还没有到.此时推荐的做法是[过度学习](https://en.wikipedia.org/wiki/Overlearning),简单来说,就是接着复习刚才学习的内容.\n\n### 4.2 中断\n更常见的问题是被打断.在我们需要切换工作记忆时,很明显会降低工作效率.如果频繁切换更是不堪设想.[参考文章](http://www.woshipm.com/zhichang/174838.html)\n\n中断可以分为内部和外部两种:\n\n#### 4.2.1. 内部\n在工作学习的时候,脑子里面往往有很多念头.一会想喝水,一会想看微信.这个时候不要排斥自己的想法,先记录下来,然后继续番茄钟,等结束之后,再来集中处理.\n\n如果有doit.im的话,可以先放到收集箱.\n\n#### 4.2.2. 外部\n与内部中断不同的是,如果是外部中断,也就是你的同事同学过来打断你,这往往带有一定的交互性,可能是闲聊,可能是请求帮助,也可能是急事.\n\n这时处理方法分为四步:\n\n>1)告知\n\n>告知对方,我有事,正在忙\n\n>2)协商\n\n>与对方协商,延后给予答复\n\n>3)计划\n\n>将这件事记录下来,并安排时间处理\n\n>4)答复\n\n>及时给予答复,这样下次你要求延后答复,对方就会很放心.\n\n### 4.3 原子性\n任何时候,番茄钟都是原子性的,不能被分割使用.不要把零碎的时间凑成一个番茄钟.\n\n### 4.4 变化\n>穷则变,变则通,通则久.\n\n番茄工作法也仅仅是一种工具,一种工作方法.在掌握了以后完全可以根据自己的实际情况进行调整.但我还是建议先按照25min/5min/15min的间隔方式,使用两周以上.等自己完全掌握了,再适当调整.\n\n## 5. 软件\n我们处在这个信息时代,真的是很幸福.现在有一款软件---[pomotodo](https://pomotodo.com/)\n\n非常优秀的一款番茄工作法软件,包括移动端,网页版客户端,各种统计,计划,回顾功能齐全.推荐尝试.\n\n## 6. 尾记\n对我而言,GTD主要解决的是宏观上的时间把控,比如今天做什么事.\n番茄工作法针对的是微观上的时间把控,怎么将事情集中精力快速完成.\n\n两者结合使用,药效更好更持久.有兴趣的同学不妨抱着试一试的态度,先用两个疗程.\n","source":"_posts/2016-02-27-pomotodo.md","raw":"---\nlayout: post\ntitle: 时间管理pomotodo\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n春节放假休息了两周\n本周是成胖子每周一博的第十一周:)\n\n---\n\n## 1.前言\n前面我们谈到过GTD工作法及其软件doit.这主要是将目标分解为项目,再将项目分解为行动.最后的粒度将是今天一个具体的行动,比如写一篇博客.\n\n现在我遇到的问题是:\n\n1. 一个行动往往需要数个小时,在这过程当中怎么保持专注?\n\n2. 我们都知道久坐对身体的危害.工作时往往会忽视时间的流逝(心流).怎样定时休息呢?\n\n我的答案是---**番茄工作法**\n\n<!--more-->\n\n![番茄工作法](http://www.legalproductivity.com/wp-content/uploads/2010/08/pomodoro_timer.jpg)\n\n## 2.理念\n番茄工作法的理念和Unix哲学一致---*Do one thing and Do It Well*\n\n在一段时间内**专注**地做好一件事,这就是番茄工作法.那么它会带来哪些好处呢?\n\n### 2.1收益\n\n1) 面对复杂的问题,我们往往会产生畏难情绪,不愿开始动手.\n\n>番茄工作法并不关注deadline,它只是简单的要求你开始一个番茄钟,循环往复.你不需要去考虑难度,只需要开始->休息->再开始.\n\n2) 短周期迭代\n\n>番茄工作法有助于保持工作节奏.选择->开始->休息->再选择->开始->休息.\n\n3) 有助于快速恢复工作状态\n\n>早晨刚到办公室或者刚吃过饭常常没有工作状态.利用番茄工作法的神经反射,往往可以快速进入状态.\n\n4) 记录,对比和改进\n\n>记录每天完成多少个番茄,通过对比自己的计划,有助于改进.\n\n5) 预估\n\n>我们常常被要求预估完成某项任务的时间.通常而言,误差很大.通过不断预估完成某件事需要的番茄钟,有助于我们培养自己的预估能力.\n\n6) 对抗拖延\n\n>拖延的原因无外乎:\n\n>1. 追求完美,对自己期望很高.\n>2. 害怕失败\n>3. 被强迫要求完成某项任务.\n\n>无论怎样,番茄钟仅仅要求你,开始一个钟并全身心投入.\n\n7) 简单\n\n## 3.方法\n下面我们来介绍下,番茄钟的实践方法:\n\n### 3.1 列清单\n清单包括:活动清单和今日待办清单.这里我使用了GTD工具---doit.im,详情参见我的上一篇[博客](http://yiting.co/2016/02/08/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86GTD.html).\n\n### 3.2 跟踪\n跟踪是在三种状态间切换:\n\n#### 3.2.1. 选择\n此时应当保持洞察力,根据**要事第一**原则,选择出需要完成的任务.\n\n#### 3.2.2. 工作\n在一个番茄钟的时间内(通常是25min),专注于完成任务,尽量心无旁骛.\n\n#### 3.2.3. 休息\n每完成一个番茄钟,让自己稍微休息一会(通常是5min),站起来伸个懒腰,扭扭脖子,清空大脑.有助于清除[前后向干扰](http://pedia.cloud.edu.tw/Entry/Detail/?title=%E8%A8%98%E6%86%B6%E5%B9%B2%E6%93%BE%E8%AB%96%EF%BC%9A%E5%89%8D%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88proactive_interference%EF%BC%89_%E5%BE%8C%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88retroactive_interference%EF%BC%89).\n\n每完成四个番茄钟,让自己稍微多休息一会(通常15min左右).上个洗手间,倒杯水.有条件的话,可以试试短时间的冥想.这里推荐一个[网站](http://www.calm.com/)\n\n### 3.3 记录/对比/改进\n根据自己一天的记录,来改进自己的工作.\n>吾日三省吾身\n\n## 4. 意外\n上面首先介绍了最简单的使用场景.下面我们来看看各种意外情况.\n>世间不如意之事,十之八九.\n\n### 4.1 时间剩余\n可能某件事做完了,但是一个番茄钟还没有到.此时推荐的做法是[过度学习](https://en.wikipedia.org/wiki/Overlearning),简单来说,就是接着复习刚才学习的内容.\n\n### 4.2 中断\n更常见的问题是被打断.在我们需要切换工作记忆时,很明显会降低工作效率.如果频繁切换更是不堪设想.[参考文章](http://www.woshipm.com/zhichang/174838.html)\n\n中断可以分为内部和外部两种:\n\n#### 4.2.1. 内部\n在工作学习的时候,脑子里面往往有很多念头.一会想喝水,一会想看微信.这个时候不要排斥自己的想法,先记录下来,然后继续番茄钟,等结束之后,再来集中处理.\n\n如果有doit.im的话,可以先放到收集箱.\n\n#### 4.2.2. 外部\n与内部中断不同的是,如果是外部中断,也就是你的同事同学过来打断你,这往往带有一定的交互性,可能是闲聊,可能是请求帮助,也可能是急事.\n\n这时处理方法分为四步:\n\n>1)告知\n\n>告知对方,我有事,正在忙\n\n>2)协商\n\n>与对方协商,延后给予答复\n\n>3)计划\n\n>将这件事记录下来,并安排时间处理\n\n>4)答复\n\n>及时给予答复,这样下次你要求延后答复,对方就会很放心.\n\n### 4.3 原子性\n任何时候,番茄钟都是原子性的,不能被分割使用.不要把零碎的时间凑成一个番茄钟.\n\n### 4.4 变化\n>穷则变,变则通,通则久.\n\n番茄工作法也仅仅是一种工具,一种工作方法.在掌握了以后完全可以根据自己的实际情况进行调整.但我还是建议先按照25min/5min/15min的间隔方式,使用两周以上.等自己完全掌握了,再适当调整.\n\n## 5. 软件\n我们处在这个信息时代,真的是很幸福.现在有一款软件---[pomotodo](https://pomotodo.com/)\n\n非常优秀的一款番茄工作法软件,包括移动端,网页版客户端,各种统计,计划,回顾功能齐全.推荐尝试.\n\n## 6. 尾记\n对我而言,GTD主要解决的是宏观上的时间把控,比如今天做什么事.\n番茄工作法针对的是微观上的时间把控,怎么将事情集中精力快速完成.\n\n两者结合使用,药效更好更持久.有兴趣的同学不妨抱着试一试的态度,先用两个疗程.\n","slug":"pomotodo","published":1,"date":"2016-02-26T16:00:00.000Z","updated":"2016-04-07T07:01:27.765Z","photos":[],"link":"","_id":"cimpzdpob001bm1f17belh2dw","content":"<p>春节放假休息了两周<br>本周是成胖子每周一博的第十一周:)</p>\n<hr>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>前面我们谈到过GTD工作法及其软件doit.这主要是将目标分解为项目,再将项目分解为行动.最后的粒度将是今天一个具体的行动,比如写一篇博客.</p>\n<p>现在我遇到的问题是:</p>\n<ol>\n<li><p>一个行动往往需要数个小时,在这过程当中怎么保持专注?</p>\n</li>\n<li><p>我们都知道久坐对身体的危害.工作时往往会忽视时间的流逝(心流).怎样定时休息呢?</p>\n</li>\n</ol>\n<p>我的答案是—<strong>番茄工作法</strong></p>\n<a id=\"more\"></a>\n<p><img src=\"http://www.legalproductivity.com/wp-content/uploads/2010/08/pomodoro_timer.jpg\" alt=\"番茄工作法\"></p>\n<h2 id=\"2-理念\"><a href=\"#2-理念\" class=\"headerlink\" title=\"2.理念\"></a>2.理念</h2><p>番茄工作法的理念和Unix哲学一致—<em>Do one thing and Do It Well</em></p>\n<p>在一段时间内<strong>专注</strong>地做好一件事,这就是番茄工作法.那么它会带来哪些好处呢?</p>\n<h3 id=\"2-1收益\"><a href=\"#2-1收益\" class=\"headerlink\" title=\"2.1收益\"></a>2.1收益</h3><p>1) 面对复杂的问题,我们往往会产生畏难情绪,不愿开始动手.</p>\n<blockquote>\n<p>番茄工作法并不关注deadline,它只是简单的要求你开始一个番茄钟,循环往复.你不需要去考虑难度,只需要开始-&gt;休息-&gt;再开始.</p>\n</blockquote>\n<p>2) 短周期迭代</p>\n<blockquote>\n<p>番茄工作法有助于保持工作节奏.选择-&gt;开始-&gt;休息-&gt;再选择-&gt;开始-&gt;休息.</p>\n</blockquote>\n<p>3) 有助于快速恢复工作状态</p>\n<blockquote>\n<p>早晨刚到办公室或者刚吃过饭常常没有工作状态.利用番茄工作法的神经反射,往往可以快速进入状态.</p>\n</blockquote>\n<p>4) 记录,对比和改进</p>\n<blockquote>\n<p>记录每天完成多少个番茄,通过对比自己的计划,有助于改进.</p>\n</blockquote>\n<p>5) 预估</p>\n<blockquote>\n<p>我们常常被要求预估完成某项任务的时间.通常而言,误差很大.通过不断预估完成某件事需要的番茄钟,有助于我们培养自己的预估能力.</p>\n</blockquote>\n<p>6) 对抗拖延</p>\n<blockquote>\n<p>拖延的原因无外乎:</p>\n<ol>\n<li>追求完美,对自己期望很高.</li>\n<li>害怕失败</li>\n<li>被强迫要求完成某项任务.</li>\n</ol>\n<p>无论怎样,番茄钟仅仅要求你,开始一个钟并全身心投入.</p>\n</blockquote>\n<p>7) 简单</p>\n<h2 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3.方法\"></a>3.方法</h2><p>下面我们来介绍下,番茄钟的实践方法:</p>\n<h3 id=\"3-1-列清单\"><a href=\"#3-1-列清单\" class=\"headerlink\" title=\"3.1 列清单\"></a>3.1 列清单</h3><p>清单包括:活动清单和今日待办清单.这里我使用了GTD工具—doit.im,详情参见我的上一篇<a href=\"http://yiting.co/2016/02/08/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86GTD.html\">博客</a>.</p>\n<h3 id=\"3-2-跟踪\"><a href=\"#3-2-跟踪\" class=\"headerlink\" title=\"3.2 跟踪\"></a>3.2 跟踪</h3><p>跟踪是在三种状态间切换:</p>\n<h4 id=\"3-2-1-选择\"><a href=\"#3-2-1-选择\" class=\"headerlink\" title=\"3.2.1. 选择\"></a>3.2.1. 选择</h4><p>此时应当保持洞察力,根据<strong>要事第一</strong>原则,选择出需要完成的任务.</p>\n<h4 id=\"3-2-2-工作\"><a href=\"#3-2-2-工作\" class=\"headerlink\" title=\"3.2.2. 工作\"></a>3.2.2. 工作</h4><p>在一个番茄钟的时间内(通常是25min),专注于完成任务,尽量心无旁骛.</p>\n<h4 id=\"3-2-3-休息\"><a href=\"#3-2-3-休息\" class=\"headerlink\" title=\"3.2.3. 休息\"></a>3.2.3. 休息</h4><p>每完成一个番茄钟,让自己稍微休息一会(通常是5min),站起来伸个懒腰,扭扭脖子,清空大脑.有助于清除<a href=\"http://pedia.cloud.edu.tw/Entry/Detail/?title=%E8%A8%98%E6%86%B6%E5%B9%B2%E6%93%BE%E8%AB%96%EF%BC%9A%E5%89%8D%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88proactive_interference%EF%BC%89_%E5%BE%8C%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88retroactive_interference%EF%BC%89\" target=\"_blank\" rel=\"external\">前后向干扰</a>.</p>\n<p>每完成四个番茄钟,让自己稍微多休息一会(通常15min左右).上个洗手间,倒杯水.有条件的话,可以试试短时间的冥想.这里推荐一个<a href=\"http://www.calm.com/\" target=\"_blank\" rel=\"external\">网站</a></p>\n<h3 id=\"3-3-记录-对比-改进\"><a href=\"#3-3-记录-对比-改进\" class=\"headerlink\" title=\"3.3 记录/对比/改进\"></a>3.3 记录/对比/改进</h3><p>根据自己一天的记录,来改进自己的工作.</p>\n<blockquote>\n<p>吾日三省吾身</p>\n</blockquote>\n<h2 id=\"4-意外\"><a href=\"#4-意外\" class=\"headerlink\" title=\"4. 意外\"></a>4. 意外</h2><p>上面首先介绍了最简单的使用场景.下面我们来看看各种意外情况.</p>\n<blockquote>\n<p>世间不如意之事,十之八九.</p>\n</blockquote>\n<h3 id=\"4-1-时间剩余\"><a href=\"#4-1-时间剩余\" class=\"headerlink\" title=\"4.1 时间剩余\"></a>4.1 时间剩余</h3><p>可能某件事做完了,但是一个番茄钟还没有到.此时推荐的做法是<a href=\"https://en.wikipedia.org/wiki/Overlearning\" target=\"_blank\" rel=\"external\">过度学习</a>,简单来说,就是接着复习刚才学习的内容.</p>\n<h3 id=\"4-2-中断\"><a href=\"#4-2-中断\" class=\"headerlink\" title=\"4.2 中断\"></a>4.2 中断</h3><p>更常见的问题是被打断.在我们需要切换工作记忆时,很明显会降低工作效率.如果频繁切换更是不堪设想.<a href=\"http://www.woshipm.com/zhichang/174838.html\" target=\"_blank\" rel=\"external\">参考文章</a></p>\n<p>中断可以分为内部和外部两种:</p>\n<h4 id=\"4-2-1-内部\"><a href=\"#4-2-1-内部\" class=\"headerlink\" title=\"4.2.1. 内部\"></a>4.2.1. 内部</h4><p>在工作学习的时候,脑子里面往往有很多念头.一会想喝水,一会想看微信.这个时候不要排斥自己的想法,先记录下来,然后继续番茄钟,等结束之后,再来集中处理.</p>\n<p>如果有doit.im的话,可以先放到收集箱.</p>\n<h4 id=\"4-2-2-外部\"><a href=\"#4-2-2-外部\" class=\"headerlink\" title=\"4.2.2. 外部\"></a>4.2.2. 外部</h4><p>与内部中断不同的是,如果是外部中断,也就是你的同事同学过来打断你,这往往带有一定的交互性,可能是闲聊,可能是请求帮助,也可能是急事.</p>\n<p>这时处理方法分为四步:</p>\n<blockquote>\n<p>1)告知</p>\n<p>告知对方,我有事,正在忙</p>\n<p>2)协商</p>\n<p>与对方协商,延后给予答复</p>\n<p>3)计划</p>\n<p>将这件事记录下来,并安排时间处理</p>\n<p>4)答复</p>\n<p>及时给予答复,这样下次你要求延后答复,对方就会很放心.</p>\n</blockquote>\n<h3 id=\"4-3-原子性\"><a href=\"#4-3-原子性\" class=\"headerlink\" title=\"4.3 原子性\"></a>4.3 原子性</h3><p>任何时候,番茄钟都是原子性的,不能被分割使用.不要把零碎的时间凑成一个番茄钟.</p>\n<h3 id=\"4-4-变化\"><a href=\"#4-4-变化\" class=\"headerlink\" title=\"4.4 变化\"></a>4.4 变化</h3><blockquote>\n<p>穷则变,变则通,通则久.</p>\n</blockquote>\n<p>番茄工作法也仅仅是一种工具,一种工作方法.在掌握了以后完全可以根据自己的实际情况进行调整.但我还是建议先按照25min/5min/15min的间隔方式,使用两周以上.等自己完全掌握了,再适当调整.</p>\n<h2 id=\"5-软件\"><a href=\"#5-软件\" class=\"headerlink\" title=\"5. 软件\"></a>5. 软件</h2><p>我们处在这个信息时代,真的是很幸福.现在有一款软件—<a href=\"https://pomotodo.com/\" target=\"_blank\" rel=\"external\">pomotodo</a></p>\n<p>非常优秀的一款番茄工作法软件,包括移动端,网页版客户端,各种统计,计划,回顾功能齐全.推荐尝试.</p>\n<h2 id=\"6-尾记\"><a href=\"#6-尾记\" class=\"headerlink\" title=\"6. 尾记\"></a>6. 尾记</h2><p>对我而言,GTD主要解决的是宏观上的时间把控,比如今天做什么事.<br>番茄工作法针对的是微观上的时间把控,怎么将事情集中精力快速完成.</p>\n<p>两者结合使用,药效更好更持久.有兴趣的同学不妨抱着试一试的态度,先用两个疗程.</p>\n","excerpt":"<p>春节放假休息了两周<br>本周是成胖子每周一博的第十一周:)</p>\n<hr>\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1.前言\"></a>1.前言</h2><p>前面我们谈到过GTD工作法及其软件doit.这主要是将目标分解为项目,再将项目分解为行动.最后的粒度将是今天一个具体的行动,比如写一篇博客.</p>\n<p>现在我遇到的问题是:</p>\n<ol>\n<li><p>一个行动往往需要数个小时,在这过程当中怎么保持专注?</p>\n</li>\n<li><p>我们都知道久坐对身体的危害.工作时往往会忽视时间的流逝(心流).怎样定时休息呢?</p>\n</li>\n</ol>\n<p>我的答案是—<strong>番茄工作法</strong></p>","more":"<p><img src=\"http://www.legalproductivity.com/wp-content/uploads/2010/08/pomodoro_timer.jpg\" alt=\"番茄工作法\"></p>\n<h2 id=\"2-理念\"><a href=\"#2-理念\" class=\"headerlink\" title=\"2.理念\"></a>2.理念</h2><p>番茄工作法的理念和Unix哲学一致—<em>Do one thing and Do It Well</em></p>\n<p>在一段时间内<strong>专注</strong>地做好一件事,这就是番茄工作法.那么它会带来哪些好处呢?</p>\n<h3 id=\"2-1收益\"><a href=\"#2-1收益\" class=\"headerlink\" title=\"2.1收益\"></a>2.1收益</h3><p>1) 面对复杂的问题,我们往往会产生畏难情绪,不愿开始动手.</p>\n<blockquote>\n<p>番茄工作法并不关注deadline,它只是简单的要求你开始一个番茄钟,循环往复.你不需要去考虑难度,只需要开始-&gt;休息-&gt;再开始.</p>\n</blockquote>\n<p>2) 短周期迭代</p>\n<blockquote>\n<p>番茄工作法有助于保持工作节奏.选择-&gt;开始-&gt;休息-&gt;再选择-&gt;开始-&gt;休息.</p>\n</blockquote>\n<p>3) 有助于快速恢复工作状态</p>\n<blockquote>\n<p>早晨刚到办公室或者刚吃过饭常常没有工作状态.利用番茄工作法的神经反射,往往可以快速进入状态.</p>\n</blockquote>\n<p>4) 记录,对比和改进</p>\n<blockquote>\n<p>记录每天完成多少个番茄,通过对比自己的计划,有助于改进.</p>\n</blockquote>\n<p>5) 预估</p>\n<blockquote>\n<p>我们常常被要求预估完成某项任务的时间.通常而言,误差很大.通过不断预估完成某件事需要的番茄钟,有助于我们培养自己的预估能力.</p>\n</blockquote>\n<p>6) 对抗拖延</p>\n<blockquote>\n<p>拖延的原因无外乎:</p>\n<ol>\n<li>追求完美,对自己期望很高.</li>\n<li>害怕失败</li>\n<li>被强迫要求完成某项任务.</li>\n</ol>\n<p>无论怎样,番茄钟仅仅要求你,开始一个钟并全身心投入.</p>\n</blockquote>\n<p>7) 简单</p>\n<h2 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3.方法\"></a>3.方法</h2><p>下面我们来介绍下,番茄钟的实践方法:</p>\n<h3 id=\"3-1-列清单\"><a href=\"#3-1-列清单\" class=\"headerlink\" title=\"3.1 列清单\"></a>3.1 列清单</h3><p>清单包括:活动清单和今日待办清单.这里我使用了GTD工具—doit.im,详情参见我的上一篇<a href=\"http://yiting.co/2016/02/08/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86GTD.html\">博客</a>.</p>\n<h3 id=\"3-2-跟踪\"><a href=\"#3-2-跟踪\" class=\"headerlink\" title=\"3.2 跟踪\"></a>3.2 跟踪</h3><p>跟踪是在三种状态间切换:</p>\n<h4 id=\"3-2-1-选择\"><a href=\"#3-2-1-选择\" class=\"headerlink\" title=\"3.2.1. 选择\"></a>3.2.1. 选择</h4><p>此时应当保持洞察力,根据<strong>要事第一</strong>原则,选择出需要完成的任务.</p>\n<h4 id=\"3-2-2-工作\"><a href=\"#3-2-2-工作\" class=\"headerlink\" title=\"3.2.2. 工作\"></a>3.2.2. 工作</h4><p>在一个番茄钟的时间内(通常是25min),专注于完成任务,尽量心无旁骛.</p>\n<h4 id=\"3-2-3-休息\"><a href=\"#3-2-3-休息\" class=\"headerlink\" title=\"3.2.3. 休息\"></a>3.2.3. 休息</h4><p>每完成一个番茄钟,让自己稍微休息一会(通常是5min),站起来伸个懒腰,扭扭脖子,清空大脑.有助于清除<a href=\"http://pedia.cloud.edu.tw/Entry/Detail/?title=%E8%A8%98%E6%86%B6%E5%B9%B2%E6%93%BE%E8%AB%96%EF%BC%9A%E5%89%8D%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88proactive_interference%EF%BC%89_%E5%BE%8C%E5%90%91%E5%B9%B2%E6%93%BE%EF%BC%88retroactive_interference%EF%BC%89\">前后向干扰</a>.</p>\n<p>每完成四个番茄钟,让自己稍微多休息一会(通常15min左右).上个洗手间,倒杯水.有条件的话,可以试试短时间的冥想.这里推荐一个<a href=\"http://www.calm.com/\">网站</a></p>\n<h3 id=\"3-3-记录-对比-改进\"><a href=\"#3-3-记录-对比-改进\" class=\"headerlink\" title=\"3.3 记录/对比/改进\"></a>3.3 记录/对比/改进</h3><p>根据自己一天的记录,来改进自己的工作.</p>\n<blockquote>\n<p>吾日三省吾身</p>\n</blockquote>\n<h2 id=\"4-意外\"><a href=\"#4-意外\" class=\"headerlink\" title=\"4. 意外\"></a>4. 意外</h2><p>上面首先介绍了最简单的使用场景.下面我们来看看各种意外情况.</p>\n<blockquote>\n<p>世间不如意之事,十之八九.</p>\n</blockquote>\n<h3 id=\"4-1-时间剩余\"><a href=\"#4-1-时间剩余\" class=\"headerlink\" title=\"4.1 时间剩余\"></a>4.1 时间剩余</h3><p>可能某件事做完了,但是一个番茄钟还没有到.此时推荐的做法是<a href=\"https://en.wikipedia.org/wiki/Overlearning\">过度学习</a>,简单来说,就是接着复习刚才学习的内容.</p>\n<h3 id=\"4-2-中断\"><a href=\"#4-2-中断\" class=\"headerlink\" title=\"4.2 中断\"></a>4.2 中断</h3><p>更常见的问题是被打断.在我们需要切换工作记忆时,很明显会降低工作效率.如果频繁切换更是不堪设想.<a href=\"http://www.woshipm.com/zhichang/174838.html\">参考文章</a></p>\n<p>中断可以分为内部和外部两种:</p>\n<h4 id=\"4-2-1-内部\"><a href=\"#4-2-1-内部\" class=\"headerlink\" title=\"4.2.1. 内部\"></a>4.2.1. 内部</h4><p>在工作学习的时候,脑子里面往往有很多念头.一会想喝水,一会想看微信.这个时候不要排斥自己的想法,先记录下来,然后继续番茄钟,等结束之后,再来集中处理.</p>\n<p>如果有doit.im的话,可以先放到收集箱.</p>\n<h4 id=\"4-2-2-外部\"><a href=\"#4-2-2-外部\" class=\"headerlink\" title=\"4.2.2. 外部\"></a>4.2.2. 外部</h4><p>与内部中断不同的是,如果是外部中断,也就是你的同事同学过来打断你,这往往带有一定的交互性,可能是闲聊,可能是请求帮助,也可能是急事.</p>\n<p>这时处理方法分为四步:</p>\n<blockquote>\n<p>1)告知</p>\n<p>告知对方,我有事,正在忙</p>\n<p>2)协商</p>\n<p>与对方协商,延后给予答复</p>\n<p>3)计划</p>\n<p>将这件事记录下来,并安排时间处理</p>\n<p>4)答复</p>\n<p>及时给予答复,这样下次你要求延后答复,对方就会很放心.</p>\n</blockquote>\n<h3 id=\"4-3-原子性\"><a href=\"#4-3-原子性\" class=\"headerlink\" title=\"4.3 原子性\"></a>4.3 原子性</h3><p>任何时候,番茄钟都是原子性的,不能被分割使用.不要把零碎的时间凑成一个番茄钟.</p>\n<h3 id=\"4-4-变化\"><a href=\"#4-4-变化\" class=\"headerlink\" title=\"4.4 变化\"></a>4.4 变化</h3><blockquote>\n<p>穷则变,变则通,通则久.</p>\n</blockquote>\n<p>番茄工作法也仅仅是一种工具,一种工作方法.在掌握了以后完全可以根据自己的实际情况进行调整.但我还是建议先按照25min/5min/15min的间隔方式,使用两周以上.等自己完全掌握了,再适当调整.</p>\n<h2 id=\"5-软件\"><a href=\"#5-软件\" class=\"headerlink\" title=\"5. 软件\"></a>5. 软件</h2><p>我们处在这个信息时代,真的是很幸福.现在有一款软件—<a href=\"https://pomotodo.com/\">pomotodo</a></p>\n<p>非常优秀的一款番茄工作法软件,包括移动端,网页版客户端,各种统计,计划,回顾功能齐全.推荐尝试.</p>\n<h2 id=\"6-尾记\"><a href=\"#6-尾记\" class=\"headerlink\" title=\"6. 尾记\"></a>6. 尾记</h2><p>对我而言,GTD主要解决的是宏观上的时间把控,比如今天做什么事.<br>番茄工作法针对的是微观上的时间把控,怎么将事情集中精力快速完成.</p>\n<p>两者结合使用,药效更好更持久.有兴趣的同学不妨抱着试一试的态度,先用两个疗程.</p>"},{"layout":"post","title":"Linux工具推荐","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十二周:)\n\n---\n\n## 前言\n我日常工作基本都在Linux下,记得刚从windows迁移到Linux时,总是担心Linux能否胜任我的要求.目前看来绝大多数工作,Linux都可以完成地很好.本周我来介绍下,我觉得很不错的一些软件.\n\n我使用的是Linux Mint 17.3 rosa.软件排名不分先后,推荐尝试.\n\n<!--more-->\n\n## trash-cli\n> 妈妈再也不用担心我删错文件了.\n\n[trash-cli github网址](https://github.com/andreafrancia/trash-cli)\n\n我们知道在windows或者Linux的图形界面删除文件时,文件会被保存到回收站/垃圾箱中,这样可以避免很多误删除操作.在Linux下工作时,常常需要在命令行下删除文件.这时文件会被直接删除,误操作往往会带来一些麻烦.\n\ntrash-cli的作用就是在命令行删除文件时,先将文件保存到回收站.回收站使用的是和图形界面同一目录,你在命令行删除的文件都可以在回收站中找回.另外记得及时清理回收站哦.\n\n下面是我的个人设置,你可以把它保存到你的.bashrc或者.zshrc之类的文件中.\n\n```\n#trash-cli setting\n#trash-put          将文件或目录移入回收站\n#trash-empty        清空回收站\n#trash-list         列出回收站中的文件\n#restore-trash      还原回收站中的文件\n#trash-rm           删除回首站中的单个文件\nalias rmf=\"/bin/rm\"\nalias rm=\"trash-put\"\nalias lstrash=\"trash-list\"\n```\n\n## krusader\n> 神级文件管理器\n\n[官方网站](http://www.krusader.org/)\n\n[用户手册](https://docs.kde.org/trunk5/en/extragear-utils/krusader/krusader.pdf)\n\n离开熟悉的windows环境,唯一让我时常怀念的软件就是**Total Commander**,非常好用的文件管理器.windows环境下的同学强烈推荐.\n\nLinux系统中的krusader就是一款非常类似的软件,提供了相当丰富的功能.\n\n## Dia\n> 没有visio又如何,我有Dia\n\n切换到Linux平台的一个问题是,我们再也没有visio可以使用了.那老板让我画流程图要怎么办呢?\n\n当然你可以使用一些在线流程图绘制网站,那样功能往往比visio要弱很多.这里向你推荐Dia.\n\n安装方式很简单\n```\nsudo apt-get install dia\n```\n\n运行命令\n```\n$dia\n```\n\n## kconsole\n>一个伟大的终端应用程序是使用命令行应用程序的必需品\n\n漂亮炫酷的命令行终端有很多,我选择了kconsole.我对它的功能很满意:\n\n1. 搜索/高亮功能。高亮匹配是实时刷新的，这对于拖尾日志文件真的很方便。\n\n2. 易于选择和复制文本块。\n\n3. 简单选择屏幕滚动，使用CTRL + SHIFT + K清理缓冲区。\n\n4. 可自定义隐藏大部分不必要的细节（标签栏、菜单），默认提供许多颜色主题。\n\n## shotwell\n> 你辣么美\n\n[shotwell](https://wiki.gnome.org/Apps/Shotwell)\n\n我们难免有大量的照片需要管理,shotwell是一个非常不错的照片管理工具.\n\n## bleachbit\n> 我是电脑清洁工\n\n[bleachbit](https://www.bleachbit.org/)\n\nLinux系统不像windows系统那样产生大量临时文件,可以长时间开机保持稳定运行.但是还是会产生一些垃圾文件.\n\nbleachbit就是类似于360之类的电脑清理软件.我们的口号是:**Clean Your System and Free Disk Space**\n\n## deepinMusic\n> 我就是爱音乐,别让我停下来\n\n[deepinMusic](http://wiki.deepin.org/?title=%E6%B7%B1%E5%BA%A6%E9%9F%B3%E4%B9%90)\n\nLinux下目前基本没有云音乐的播放器.说实话,还真是有点不方便.只能用网页听,或者下载以后播放.\n\n深度音乐播放器可以安装百度音乐,网易云音乐的插件.虽然还是不能下载,但是基本上可以使用云音乐功能了.\n\n哎,满满都是泪啊.\n\n## bcloud\n> 我有一座大房子\n\n[bcloud](https://github.com/LiuLang/bcloud)\n\n百度云网盘是我觉得蛮好用的一个产品,可惜没有Linux客户端,网页版功能又偏弱.github上有人用python开发了一个相当不错的Linux客户端,实现了windows客户端的大部分功能.\n\n## Plank\n> 我像不像Mac Os\n\n[Plank](https://launchpad.net/plank)\n\nPlank类似于Mac中的窗口管理工具,用来管理常用的软件窗口很方便,也很炫酷.\n\n## GIMP\n> 没有Ps,没有美图秀秀,我怎么活?\n\n[GIMP](https://www.gimp.org/)\n\n简单一句话,这就是Linux上的Photoshop.\n\n## atom\n> 21世纪的编辑器\n\natom是Github推出的一款编辑器,使用前端语言编写.我个人是vim狂热爱好者,但是不得不说,vim插件的编写语言太过小众,同时vim的学习曲线稍显陡峭.\n\natom汲取了很多emacs,vim和sublime的营养.插件配置管理非常方便,我目前的所有博客都是使用atom来进行编辑.\n\ngithub是开源软件的中心,各种issue交流非常迅速.所以atom目前正在快速发展之中,我愿意关注它的成长.\n\n## 尾记\n本周我为大家介绍了,我自己喜爱的一些Linux软件.希望你也可以喜欢.感谢阅读,下周再见:)\n","source":"_posts/2016-03-05-Linux工具推荐.md","raw":"---\nlayout: post\ntitle: Linux工具推荐\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十二周:)\n\n---\n\n## 前言\n我日常工作基本都在Linux下,记得刚从windows迁移到Linux时,总是担心Linux能否胜任我的要求.目前看来绝大多数工作,Linux都可以完成地很好.本周我来介绍下,我觉得很不错的一些软件.\n\n我使用的是Linux Mint 17.3 rosa.软件排名不分先后,推荐尝试.\n\n<!--more-->\n\n## trash-cli\n> 妈妈再也不用担心我删错文件了.\n\n[trash-cli github网址](https://github.com/andreafrancia/trash-cli)\n\n我们知道在windows或者Linux的图形界面删除文件时,文件会被保存到回收站/垃圾箱中,这样可以避免很多误删除操作.在Linux下工作时,常常需要在命令行下删除文件.这时文件会被直接删除,误操作往往会带来一些麻烦.\n\ntrash-cli的作用就是在命令行删除文件时,先将文件保存到回收站.回收站使用的是和图形界面同一目录,你在命令行删除的文件都可以在回收站中找回.另外记得及时清理回收站哦.\n\n下面是我的个人设置,你可以把它保存到你的.bashrc或者.zshrc之类的文件中.\n\n```\n#trash-cli setting\n#trash-put          将文件或目录移入回收站\n#trash-empty        清空回收站\n#trash-list         列出回收站中的文件\n#restore-trash      还原回收站中的文件\n#trash-rm           删除回首站中的单个文件\nalias rmf=\"/bin/rm\"\nalias rm=\"trash-put\"\nalias lstrash=\"trash-list\"\n```\n\n## krusader\n> 神级文件管理器\n\n[官方网站](http://www.krusader.org/)\n\n[用户手册](https://docs.kde.org/trunk5/en/extragear-utils/krusader/krusader.pdf)\n\n离开熟悉的windows环境,唯一让我时常怀念的软件就是**Total Commander**,非常好用的文件管理器.windows环境下的同学强烈推荐.\n\nLinux系统中的krusader就是一款非常类似的软件,提供了相当丰富的功能.\n\n## Dia\n> 没有visio又如何,我有Dia\n\n切换到Linux平台的一个问题是,我们再也没有visio可以使用了.那老板让我画流程图要怎么办呢?\n\n当然你可以使用一些在线流程图绘制网站,那样功能往往比visio要弱很多.这里向你推荐Dia.\n\n安装方式很简单\n```\nsudo apt-get install dia\n```\n\n运行命令\n```\n$dia\n```\n\n## kconsole\n>一个伟大的终端应用程序是使用命令行应用程序的必需品\n\n漂亮炫酷的命令行终端有很多,我选择了kconsole.我对它的功能很满意:\n\n1. 搜索/高亮功能。高亮匹配是实时刷新的，这对于拖尾日志文件真的很方便。\n\n2. 易于选择和复制文本块。\n\n3. 简单选择屏幕滚动，使用CTRL + SHIFT + K清理缓冲区。\n\n4. 可自定义隐藏大部分不必要的细节（标签栏、菜单），默认提供许多颜色主题。\n\n## shotwell\n> 你辣么美\n\n[shotwell](https://wiki.gnome.org/Apps/Shotwell)\n\n我们难免有大量的照片需要管理,shotwell是一个非常不错的照片管理工具.\n\n## bleachbit\n> 我是电脑清洁工\n\n[bleachbit](https://www.bleachbit.org/)\n\nLinux系统不像windows系统那样产生大量临时文件,可以长时间开机保持稳定运行.但是还是会产生一些垃圾文件.\n\nbleachbit就是类似于360之类的电脑清理软件.我们的口号是:**Clean Your System and Free Disk Space**\n\n## deepinMusic\n> 我就是爱音乐,别让我停下来\n\n[deepinMusic](http://wiki.deepin.org/?title=%E6%B7%B1%E5%BA%A6%E9%9F%B3%E4%B9%90)\n\nLinux下目前基本没有云音乐的播放器.说实话,还真是有点不方便.只能用网页听,或者下载以后播放.\n\n深度音乐播放器可以安装百度音乐,网易云音乐的插件.虽然还是不能下载,但是基本上可以使用云音乐功能了.\n\n哎,满满都是泪啊.\n\n## bcloud\n> 我有一座大房子\n\n[bcloud](https://github.com/LiuLang/bcloud)\n\n百度云网盘是我觉得蛮好用的一个产品,可惜没有Linux客户端,网页版功能又偏弱.github上有人用python开发了一个相当不错的Linux客户端,实现了windows客户端的大部分功能.\n\n## Plank\n> 我像不像Mac Os\n\n[Plank](https://launchpad.net/plank)\n\nPlank类似于Mac中的窗口管理工具,用来管理常用的软件窗口很方便,也很炫酷.\n\n## GIMP\n> 没有Ps,没有美图秀秀,我怎么活?\n\n[GIMP](https://www.gimp.org/)\n\n简单一句话,这就是Linux上的Photoshop.\n\n## atom\n> 21世纪的编辑器\n\natom是Github推出的一款编辑器,使用前端语言编写.我个人是vim狂热爱好者,但是不得不说,vim插件的编写语言太过小众,同时vim的学习曲线稍显陡峭.\n\natom汲取了很多emacs,vim和sublime的营养.插件配置管理非常方便,我目前的所有博客都是使用atom来进行编辑.\n\ngithub是开源软件的中心,各种issue交流非常迅速.所以atom目前正在快速发展之中,我愿意关注它的成长.\n\n## 尾记\n本周我为大家介绍了,我自己喜爱的一些Linux软件.希望你也可以喜欢.感谢阅读,下周再见:)\n","slug":"Linux工具推荐","published":1,"date":"2016-03-04T16:00:00.000Z","updated":"2016-04-07T07:01:32.289Z","photos":[],"link":"","_id":"cimpzdpof001fm1f13lgzge6f","content":"<p>本周是成胖子每周一博的第十二周:)</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我日常工作基本都在Linux下,记得刚从windows迁移到Linux时,总是担心Linux能否胜任我的要求.目前看来绝大多数工作,Linux都可以完成地很好.本周我来介绍下,我觉得很不错的一些软件.</p>\n<p>我使用的是Linux Mint 17.3 rosa.软件排名不分先后,推荐尝试.</p>\n<a id=\"more\"></a>\n<h2 id=\"trash-cli\"><a href=\"#trash-cli\" class=\"headerlink\" title=\"trash-cli\"></a>trash-cli</h2><blockquote>\n<p>妈妈再也不用担心我删错文件了.</p>\n</blockquote>\n<p><a href=\"https://github.com/andreafrancia/trash-cli\" target=\"_blank\" rel=\"external\">trash-cli github网址</a></p>\n<p>我们知道在windows或者Linux的图形界面删除文件时,文件会被保存到回收站/垃圾箱中,这样可以避免很多误删除操作.在Linux下工作时,常常需要在命令行下删除文件.这时文件会被直接删除,误操作往往会带来一些麻烦.</p>\n<p>trash-cli的作用就是在命令行删除文件时,先将文件保存到回收站.回收站使用的是和图形界面同一目录,你在命令行删除的文件都可以在回收站中找回.另外记得及时清理回收站哦.</p>\n<p>下面是我的个人设置,你可以把它保存到你的.bashrc或者.zshrc之类的文件中.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#trash-cli setting</span><br><span class=\"line\">#trash-put          将文件或目录移入回收站</span><br><span class=\"line\">#trash-empty        清空回收站</span><br><span class=\"line\">#trash-list         列出回收站中的文件</span><br><span class=\"line\">#restore-trash      还原回收站中的文件</span><br><span class=\"line\">#trash-rm           删除回首站中的单个文件</span><br><span class=\"line\">alias rmf=&quot;/bin/rm&quot;</span><br><span class=\"line\">alias rm=&quot;trash-put&quot;</span><br><span class=\"line\">alias lstrash=&quot;trash-list&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"krusader\"><a href=\"#krusader\" class=\"headerlink\" title=\"krusader\"></a>krusader</h2><blockquote>\n<p>神级文件管理器</p>\n</blockquote>\n<p><a href=\"http://www.krusader.org/\" target=\"_blank\" rel=\"external\">官方网站</a></p>\n<p><a href=\"https://docs.kde.org/trunk5/en/extragear-utils/krusader/krusader.pdf\" target=\"_blank\" rel=\"external\">用户手册</a></p>\n<p>离开熟悉的windows环境,唯一让我时常怀念的软件就是<strong>Total Commander</strong>,非常好用的文件管理器.windows环境下的同学强烈推荐.</p>\n<p>Linux系统中的krusader就是一款非常类似的软件,提供了相当丰富的功能.</p>\n<h2 id=\"Dia\"><a href=\"#Dia\" class=\"headerlink\" title=\"Dia\"></a>Dia</h2><blockquote>\n<p>没有visio又如何,我有Dia</p>\n</blockquote>\n<p>切换到Linux平台的一个问题是,我们再也没有visio可以使用了.那老板让我画流程图要怎么办呢?</p>\n<p>当然你可以使用一些在线流程图绘制网站,那样功能往往比visio要弱很多.这里向你推荐Dia.</p>\n<p>安装方式很简单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install dia</span><br></pre></td></tr></table></figure></p>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dia</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"kconsole\"><a href=\"#kconsole\" class=\"headerlink\" title=\"kconsole\"></a>kconsole</h2><blockquote>\n<p>一个伟大的终端应用程序是使用命令行应用程序的必需品</p>\n</blockquote>\n<p>漂亮炫酷的命令行终端有很多,我选择了kconsole.我对它的功能很满意:</p>\n<ol>\n<li><p>搜索/高亮功能。高亮匹配是实时刷新的，这对于拖尾日志文件真的很方便。</p>\n</li>\n<li><p>易于选择和复制文本块。</p>\n</li>\n<li><p>简单选择屏幕滚动，使用CTRL + SHIFT + K清理缓冲区。</p>\n</li>\n<li><p>可自定义隐藏大部分不必要的细节（标签栏、菜单），默认提供许多颜色主题。</p>\n</li>\n</ol>\n<h2 id=\"shotwell\"><a href=\"#shotwell\" class=\"headerlink\" title=\"shotwell\"></a>shotwell</h2><blockquote>\n<p>你辣么美</p>\n</blockquote>\n<p><a href=\"https://wiki.gnome.org/Apps/Shotwell\" target=\"_blank\" rel=\"external\">shotwell</a></p>\n<p>我们难免有大量的照片需要管理,shotwell是一个非常不错的照片管理工具.</p>\n<h2 id=\"bleachbit\"><a href=\"#bleachbit\" class=\"headerlink\" title=\"bleachbit\"></a>bleachbit</h2><blockquote>\n<p>我是电脑清洁工</p>\n</blockquote>\n<p><a href=\"https://www.bleachbit.org/\" target=\"_blank\" rel=\"external\">bleachbit</a></p>\n<p>Linux系统不像windows系统那样产生大量临时文件,可以长时间开机保持稳定运行.但是还是会产生一些垃圾文件.</p>\n<p>bleachbit就是类似于360之类的电脑清理软件.我们的口号是:<strong>Clean Your System and Free Disk Space</strong></p>\n<h2 id=\"deepinMusic\"><a href=\"#deepinMusic\" class=\"headerlink\" title=\"deepinMusic\"></a>deepinMusic</h2><blockquote>\n<p>我就是爱音乐,别让我停下来</p>\n</blockquote>\n<p><a href=\"http://wiki.deepin.org/?title=%E6%B7%B1%E5%BA%A6%E9%9F%B3%E4%B9%90\" target=\"_blank\" rel=\"external\">deepinMusic</a></p>\n<p>Linux下目前基本没有云音乐的播放器.说实话,还真是有点不方便.只能用网页听,或者下载以后播放.</p>\n<p>深度音乐播放器可以安装百度音乐,网易云音乐的插件.虽然还是不能下载,但是基本上可以使用云音乐功能了.</p>\n<p>哎,满满都是泪啊.</p>\n<h2 id=\"bcloud\"><a href=\"#bcloud\" class=\"headerlink\" title=\"bcloud\"></a>bcloud</h2><blockquote>\n<p>我有一座大房子</p>\n</blockquote>\n<p><a href=\"https://github.com/LiuLang/bcloud\" target=\"_blank\" rel=\"external\">bcloud</a></p>\n<p>百度云网盘是我觉得蛮好用的一个产品,可惜没有Linux客户端,网页版功能又偏弱.github上有人用python开发了一个相当不错的Linux客户端,实现了windows客户端的大部分功能.</p>\n<h2 id=\"Plank\"><a href=\"#Plank\" class=\"headerlink\" title=\"Plank\"></a>Plank</h2><blockquote>\n<p>我像不像Mac Os</p>\n</blockquote>\n<p><a href=\"https://launchpad.net/plank\" target=\"_blank\" rel=\"external\">Plank</a></p>\n<p>Plank类似于Mac中的窗口管理工具,用来管理常用的软件窗口很方便,也很炫酷.</p>\n<h2 id=\"GIMP\"><a href=\"#GIMP\" class=\"headerlink\" title=\"GIMP\"></a>GIMP</h2><blockquote>\n<p>没有Ps,没有美图秀秀,我怎么活?</p>\n</blockquote>\n<p><a href=\"https://www.gimp.org/\" target=\"_blank\" rel=\"external\">GIMP</a></p>\n<p>简单一句话,这就是Linux上的Photoshop.</p>\n<h2 id=\"atom\"><a href=\"#atom\" class=\"headerlink\" title=\"atom\"></a>atom</h2><blockquote>\n<p>21世纪的编辑器</p>\n</blockquote>\n<p>atom是Github推出的一款编辑器,使用前端语言编写.我个人是vim狂热爱好者,但是不得不说,vim插件的编写语言太过小众,同时vim的学习曲线稍显陡峭.</p>\n<p>atom汲取了很多emacs,vim和sublime的营养.插件配置管理非常方便,我目前的所有博客都是使用atom来进行编辑.</p>\n<p>github是开源软件的中心,各种issue交流非常迅速.所以atom目前正在快速发展之中,我愿意关注它的成长.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>本周我为大家介绍了,我自己喜爱的一些Linux软件.希望你也可以喜欢.感谢阅读,下周再见:)</p>\n","excerpt":"<p>本周是成胖子每周一博的第十二周:)</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我日常工作基本都在Linux下,记得刚从windows迁移到Linux时,总是担心Linux能否胜任我的要求.目前看来绝大多数工作,Linux都可以完成地很好.本周我来介绍下,我觉得很不错的一些软件.</p>\n<p>我使用的是Linux Mint 17.3 rosa.软件排名不分先后,推荐尝试.</p>","more":"<h2 id=\"trash-cli\"><a href=\"#trash-cli\" class=\"headerlink\" title=\"trash-cli\"></a>trash-cli</h2><blockquote>\n<p>妈妈再也不用担心我删错文件了.</p>\n</blockquote>\n<p><a href=\"https://github.com/andreafrancia/trash-cli\">trash-cli github网址</a></p>\n<p>我们知道在windows或者Linux的图形界面删除文件时,文件会被保存到回收站/垃圾箱中,这样可以避免很多误删除操作.在Linux下工作时,常常需要在命令行下删除文件.这时文件会被直接删除,误操作往往会带来一些麻烦.</p>\n<p>trash-cli的作用就是在命令行删除文件时,先将文件保存到回收站.回收站使用的是和图形界面同一目录,你在命令行删除的文件都可以在回收站中找回.另外记得及时清理回收站哦.</p>\n<p>下面是我的个人设置,你可以把它保存到你的.bashrc或者.zshrc之类的文件中.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#trash-cli setting</span><br><span class=\"line\">#trash-put          将文件或目录移入回收站</span><br><span class=\"line\">#trash-empty        清空回收站</span><br><span class=\"line\">#trash-list         列出回收站中的文件</span><br><span class=\"line\">#restore-trash      还原回收站中的文件</span><br><span class=\"line\">#trash-rm           删除回首站中的单个文件</span><br><span class=\"line\">alias rmf=&quot;/bin/rm&quot;</span><br><span class=\"line\">alias rm=&quot;trash-put&quot;</span><br><span class=\"line\">alias lstrash=&quot;trash-list&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"krusader\"><a href=\"#krusader\" class=\"headerlink\" title=\"krusader\"></a>krusader</h2><blockquote>\n<p>神级文件管理器</p>\n</blockquote>\n<p><a href=\"http://www.krusader.org/\">官方网站</a></p>\n<p><a href=\"https://docs.kde.org/trunk5/en/extragear-utils/krusader/krusader.pdf\">用户手册</a></p>\n<p>离开熟悉的windows环境,唯一让我时常怀念的软件就是<strong>Total Commander</strong>,非常好用的文件管理器.windows环境下的同学强烈推荐.</p>\n<p>Linux系统中的krusader就是一款非常类似的软件,提供了相当丰富的功能.</p>\n<h2 id=\"Dia\"><a href=\"#Dia\" class=\"headerlink\" title=\"Dia\"></a>Dia</h2><blockquote>\n<p>没有visio又如何,我有Dia</p>\n</blockquote>\n<p>切换到Linux平台的一个问题是,我们再也没有visio可以使用了.那老板让我画流程图要怎么办呢?</p>\n<p>当然你可以使用一些在线流程图绘制网站,那样功能往往比visio要弱很多.这里向你推荐Dia.</p>\n<p>安装方式很简单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install dia</span><br></pre></td></tr></table></figure></p>\n<p>运行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$dia</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"kconsole\"><a href=\"#kconsole\" class=\"headerlink\" title=\"kconsole\"></a>kconsole</h2><blockquote>\n<p>一个伟大的终端应用程序是使用命令行应用程序的必需品</p>\n</blockquote>\n<p>漂亮炫酷的命令行终端有很多,我选择了kconsole.我对它的功能很满意:</p>\n<ol>\n<li><p>搜索/高亮功能。高亮匹配是实时刷新的，这对于拖尾日志文件真的很方便。</p>\n</li>\n<li><p>易于选择和复制文本块。</p>\n</li>\n<li><p>简单选择屏幕滚动，使用CTRL + SHIFT + K清理缓冲区。</p>\n</li>\n<li><p>可自定义隐藏大部分不必要的细节（标签栏、菜单），默认提供许多颜色主题。</p>\n</li>\n</ol>\n<h2 id=\"shotwell\"><a href=\"#shotwell\" class=\"headerlink\" title=\"shotwell\"></a>shotwell</h2><blockquote>\n<p>你辣么美</p>\n</blockquote>\n<p><a href=\"https://wiki.gnome.org/Apps/Shotwell\">shotwell</a></p>\n<p>我们难免有大量的照片需要管理,shotwell是一个非常不错的照片管理工具.</p>\n<h2 id=\"bleachbit\"><a href=\"#bleachbit\" class=\"headerlink\" title=\"bleachbit\"></a>bleachbit</h2><blockquote>\n<p>我是电脑清洁工</p>\n</blockquote>\n<p><a href=\"https://www.bleachbit.org/\">bleachbit</a></p>\n<p>Linux系统不像windows系统那样产生大量临时文件,可以长时间开机保持稳定运行.但是还是会产生一些垃圾文件.</p>\n<p>bleachbit就是类似于360之类的电脑清理软件.我们的口号是:<strong>Clean Your System and Free Disk Space</strong></p>\n<h2 id=\"deepinMusic\"><a href=\"#deepinMusic\" class=\"headerlink\" title=\"deepinMusic\"></a>deepinMusic</h2><blockquote>\n<p>我就是爱音乐,别让我停下来</p>\n</blockquote>\n<p><a href=\"http://wiki.deepin.org/?title=%E6%B7%B1%E5%BA%A6%E9%9F%B3%E4%B9%90\">deepinMusic</a></p>\n<p>Linux下目前基本没有云音乐的播放器.说实话,还真是有点不方便.只能用网页听,或者下载以后播放.</p>\n<p>深度音乐播放器可以安装百度音乐,网易云音乐的插件.虽然还是不能下载,但是基本上可以使用云音乐功能了.</p>\n<p>哎,满满都是泪啊.</p>\n<h2 id=\"bcloud\"><a href=\"#bcloud\" class=\"headerlink\" title=\"bcloud\"></a>bcloud</h2><blockquote>\n<p>我有一座大房子</p>\n</blockquote>\n<p><a href=\"https://github.com/LiuLang/bcloud\">bcloud</a></p>\n<p>百度云网盘是我觉得蛮好用的一个产品,可惜没有Linux客户端,网页版功能又偏弱.github上有人用python开发了一个相当不错的Linux客户端,实现了windows客户端的大部分功能.</p>\n<h2 id=\"Plank\"><a href=\"#Plank\" class=\"headerlink\" title=\"Plank\"></a>Plank</h2><blockquote>\n<p>我像不像Mac Os</p>\n</blockquote>\n<p><a href=\"https://launchpad.net/plank\">Plank</a></p>\n<p>Plank类似于Mac中的窗口管理工具,用来管理常用的软件窗口很方便,也很炫酷.</p>\n<h2 id=\"GIMP\"><a href=\"#GIMP\" class=\"headerlink\" title=\"GIMP\"></a>GIMP</h2><blockquote>\n<p>没有Ps,没有美图秀秀,我怎么活?</p>\n</blockquote>\n<p><a href=\"https://www.gimp.org/\">GIMP</a></p>\n<p>简单一句话,这就是Linux上的Photoshop.</p>\n<h2 id=\"atom\"><a href=\"#atom\" class=\"headerlink\" title=\"atom\"></a>atom</h2><blockquote>\n<p>21世纪的编辑器</p>\n</blockquote>\n<p>atom是Github推出的一款编辑器,使用前端语言编写.我个人是vim狂热爱好者,但是不得不说,vim插件的编写语言太过小众,同时vim的学习曲线稍显陡峭.</p>\n<p>atom汲取了很多emacs,vim和sublime的营养.插件配置管理非常方便,我目前的所有博客都是使用atom来进行编辑.</p>\n<p>github是开源软件的中心,各种issue交流非常迅速.所以atom目前正在快速发展之中,我愿意关注它的成长.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>本周我为大家介绍了,我自己喜爱的一些Linux软件.希望你也可以喜欢.感谢阅读,下周再见:)</p>"},{"layout":"post","title":"dotfiles总述","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十三周:)\n\n---\n\n## 前言\n在github上偶然浏览到[dotfiles](https://dotfiles.github.io/).\n\n> 因为Unix及Linux下的很多配置文件都是隐藏文件,以\".\"开始,所以我们用dotfiles称呼这些文件.\n\n<!--more-->\n\ndotfiles整理有三个目的:\n\n* 备份/存储/同步\n\n* 学习/发现\n\n* 分享\n\n对于开发人员而言,一个代码编辑环境无疑是重中之重.我最近组装和改造了我自己的dotfiles.非常欢迎fork和使用,如果有什么问题,可以互相交流.\n\n\n[一键下载使用](https://github.com/chengyi818/dotfiles)\n\n## dotfiles原理\n在类Unix环境下,用户的配置在用户主目录下.比如bashrc,vimrc.我们一般都是直接修改这里.\n\n如果有**备份的需求**怎么办呢?\n\n> 最简单的办法就是把相应的文件打包压缩,然后就可以放到网盘或者U盘当中了.\n\n可是如果我们经常不时地**更新**配置文件,怎么才能很方便地压缩呢?\n\n> * 有个笨办法,我每次更新完了,我就自己手动把每个文件重新压缩下.\n\n> * 升级一下,可以写个简单地脚本,每次自动执行压缩命令\n\n> * 再升级一下,可以把所有的配置文件拉到一个文件中,然后软链接到用户主目录.\n\n配置文件要怎么**存储**呢?\n\n> * 毫无疑问,放到云上是最好的.dropbox或者百度云都还不错.\n\n难道我每次要自己手动**同步**么?\n\n> * 我们现在有了**github**这么方便的工具,不使用一下太可惜了.\n\n综上,我们把常用配置放到同一个文件夹中,然后将它们链接到用户主目录.同时将这个文件夹加入git版本管理,最后上传到github当中.\n\n## 安装主要过程\n\n> 我希望可以通过执行一条命令,把任何环境配置成自己最熟悉趁手的环境.\n\n一键脚本主要包含如下几个步骤:\n\n* 安装必要的软件,比如[homesick](https://github.com/technicalpickles/homesick),git,cmake,ctags等.\n\n* 备份现在的配置文件.\n\n* 安装zsh框架[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n* 创建软链接\n\n* 安装vim框架[spf13](https://github.com/spf13/spf13-vim)\n\n* 安装小工具[thefuck](https://github.com/nvbn/thefuck)\n\n* 尝试编译[YouCompleteMe](https://github.com/Valloric/YouCompleteMe)\n\n## 安装说明\n\n前面我们已经提及了我们的主要过程,程序员当然不应该重复造轮子,所以我选用了大量的现有组件.\n\n* 下载配置,创建软链接,同步配置\n\n> 使用homesick,使用方法和命令非常类似于git,缺点是没有提供原有文件的备份.\n\n* zsh配置\n\n> 直接使用了很火的oh-my-zsh\n\n* vim配置\n\n> vim真的是博大精深,用了这么久了,还是每次都有新发现,真的不愧是是编辑器之神.我使用了spf13的vim配置.基本主流插件都有了,而且比较容易进行个人定制.\n\n* 我的工作\n\n> 我主要做的就是使用shell脚本备份原有配置,同时尽量把安装过程自动化.我只在很有限的几台电脑上测试过.如果使用过程中有问题,请issue告诉我.\n\n## 私人定制\n\n每个人都有自己的喜好,我的配置你不一定趁手.如果想进行个人定制,简单的三步就可以了.\n\n1. 进入[github](https://github.com/chengyi818/dotfiles),fork我的仓库.\n\n2. 将README.md中的一键安装脚本路径修改为你自己的仓库.\n\n3. 将仓库中的install.sh文件头部的`REPO_URL`修改为你的仓库名.\n\n这样你就拥有了可以陪伴自己一生的工具箱,关于我们主要组件的使用方法请去原作者网页浏览,如果有机会,再给大家介绍.\n\n## 使用小结\n\n我目前主要使用Linux Mint.我的命令终端使用konsole.tmux主要用于控制多个窗口.oh-my-zsh使得命令行操作更加高效强大.vim的配置插件让你的手指在键盘上舞蹈.\n\n如果有机会真的要尝试下,八星八钻,花30分钟,你买不了吃亏,你买不了上当.抱着试一试地态度,你真的会爱上它们.\n\n## 尾记\n今天只是简要地说明了我的dotfiles.说实话,我想做这个已经很久了,一直拖.现在总算是阶段性完成了.如果有人能够受益,多使用真的是太好了.\n","source":"_posts/2016-03-12-dotfiles总述.md","raw":"---\nlayout: post\ntitle: dotfiles总述\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十三周:)\n\n---\n\n## 前言\n在github上偶然浏览到[dotfiles](https://dotfiles.github.io/).\n\n> 因为Unix及Linux下的很多配置文件都是隐藏文件,以\".\"开始,所以我们用dotfiles称呼这些文件.\n\n<!--more-->\n\ndotfiles整理有三个目的:\n\n* 备份/存储/同步\n\n* 学习/发现\n\n* 分享\n\n对于开发人员而言,一个代码编辑环境无疑是重中之重.我最近组装和改造了我自己的dotfiles.非常欢迎fork和使用,如果有什么问题,可以互相交流.\n\n\n[一键下载使用](https://github.com/chengyi818/dotfiles)\n\n## dotfiles原理\n在类Unix环境下,用户的配置在用户主目录下.比如bashrc,vimrc.我们一般都是直接修改这里.\n\n如果有**备份的需求**怎么办呢?\n\n> 最简单的办法就是把相应的文件打包压缩,然后就可以放到网盘或者U盘当中了.\n\n可是如果我们经常不时地**更新**配置文件,怎么才能很方便地压缩呢?\n\n> * 有个笨办法,我每次更新完了,我就自己手动把每个文件重新压缩下.\n\n> * 升级一下,可以写个简单地脚本,每次自动执行压缩命令\n\n> * 再升级一下,可以把所有的配置文件拉到一个文件中,然后软链接到用户主目录.\n\n配置文件要怎么**存储**呢?\n\n> * 毫无疑问,放到云上是最好的.dropbox或者百度云都还不错.\n\n难道我每次要自己手动**同步**么?\n\n> * 我们现在有了**github**这么方便的工具,不使用一下太可惜了.\n\n综上,我们把常用配置放到同一个文件夹中,然后将它们链接到用户主目录.同时将这个文件夹加入git版本管理,最后上传到github当中.\n\n## 安装主要过程\n\n> 我希望可以通过执行一条命令,把任何环境配置成自己最熟悉趁手的环境.\n\n一键脚本主要包含如下几个步骤:\n\n* 安装必要的软件,比如[homesick](https://github.com/technicalpickles/homesick),git,cmake,ctags等.\n\n* 备份现在的配置文件.\n\n* 安装zsh框架[oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n* 创建软链接\n\n* 安装vim框架[spf13](https://github.com/spf13/spf13-vim)\n\n* 安装小工具[thefuck](https://github.com/nvbn/thefuck)\n\n* 尝试编译[YouCompleteMe](https://github.com/Valloric/YouCompleteMe)\n\n## 安装说明\n\n前面我们已经提及了我们的主要过程,程序员当然不应该重复造轮子,所以我选用了大量的现有组件.\n\n* 下载配置,创建软链接,同步配置\n\n> 使用homesick,使用方法和命令非常类似于git,缺点是没有提供原有文件的备份.\n\n* zsh配置\n\n> 直接使用了很火的oh-my-zsh\n\n* vim配置\n\n> vim真的是博大精深,用了这么久了,还是每次都有新发现,真的不愧是是编辑器之神.我使用了spf13的vim配置.基本主流插件都有了,而且比较容易进行个人定制.\n\n* 我的工作\n\n> 我主要做的就是使用shell脚本备份原有配置,同时尽量把安装过程自动化.我只在很有限的几台电脑上测试过.如果使用过程中有问题,请issue告诉我.\n\n## 私人定制\n\n每个人都有自己的喜好,我的配置你不一定趁手.如果想进行个人定制,简单的三步就可以了.\n\n1. 进入[github](https://github.com/chengyi818/dotfiles),fork我的仓库.\n\n2. 将README.md中的一键安装脚本路径修改为你自己的仓库.\n\n3. 将仓库中的install.sh文件头部的`REPO_URL`修改为你的仓库名.\n\n这样你就拥有了可以陪伴自己一生的工具箱,关于我们主要组件的使用方法请去原作者网页浏览,如果有机会,再给大家介绍.\n\n## 使用小结\n\n我目前主要使用Linux Mint.我的命令终端使用konsole.tmux主要用于控制多个窗口.oh-my-zsh使得命令行操作更加高效强大.vim的配置插件让你的手指在键盘上舞蹈.\n\n如果有机会真的要尝试下,八星八钻,花30分钟,你买不了吃亏,你买不了上当.抱着试一试地态度,你真的会爱上它们.\n\n## 尾记\n今天只是简要地说明了我的dotfiles.说实话,我想做这个已经很久了,一直拖.现在总算是阶段性完成了.如果有人能够受益,多使用真的是太好了.\n","slug":"dotfiles总述","published":1,"date":"2016-03-11T16:00:00.000Z","updated":"2016-04-07T07:01:37.113Z","photos":[],"link":"","_id":"cimpzdpoi001im1f1grpzxsdj","content":"<p>本周是成胖子每周一博的第十三周:)</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在github上偶然浏览到<a href=\"https://dotfiles.github.io/\" target=\"_blank\" rel=\"external\">dotfiles</a>.</p>\n<blockquote>\n<p>因为Unix及Linux下的很多配置文件都是隐藏文件,以”.”开始,所以我们用dotfiles称呼这些文件.</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>dotfiles整理有三个目的:</p>\n<ul>\n<li><p>备份/存储/同步</p>\n</li>\n<li><p>学习/发现</p>\n</li>\n<li><p>分享</p>\n</li>\n</ul>\n<p>对于开发人员而言,一个代码编辑环境无疑是重中之重.我最近组装和改造了我自己的dotfiles.非常欢迎fork和使用,如果有什么问题,可以互相交流.</p>\n<p><a href=\"https://github.com/chengyi818/dotfiles\" target=\"_blank\" rel=\"external\">一键下载使用</a></p>\n<h2 id=\"dotfiles原理\"><a href=\"#dotfiles原理\" class=\"headerlink\" title=\"dotfiles原理\"></a>dotfiles原理</h2><p>在类Unix环境下,用户的配置在用户主目录下.比如bashrc,vimrc.我们一般都是直接修改这里.</p>\n<p>如果有<strong>备份的需求</strong>怎么办呢?</p>\n<blockquote>\n<p>最简单的办法就是把相应的文件打包压缩,然后就可以放到网盘或者U盘当中了.</p>\n</blockquote>\n<p>可是如果我们经常不时地<strong>更新</strong>配置文件,怎么才能很方便地压缩呢?</p>\n<blockquote>\n<ul>\n<li><p>有个笨办法,我每次更新完了,我就自己手动把每个文件重新压缩下.</p>\n</li>\n<li><p>升级一下,可以写个简单地脚本,每次自动执行压缩命令</p>\n</li>\n<li><p>再升级一下,可以把所有的配置文件拉到一个文件中,然后软链接到用户主目录.</p>\n</li>\n</ul>\n</blockquote>\n<p>配置文件要怎么<strong>存储</strong>呢?</p>\n<blockquote>\n<ul>\n<li>毫无疑问,放到云上是最好的.dropbox或者百度云都还不错.</li>\n</ul>\n</blockquote>\n<p>难道我每次要自己手动<strong>同步</strong>么?</p>\n<blockquote>\n<ul>\n<li>我们现在有了<strong>github</strong>这么方便的工具,不使用一下太可惜了.</li>\n</ul>\n</blockquote>\n<p>综上,我们把常用配置放到同一个文件夹中,然后将它们链接到用户主目录.同时将这个文件夹加入git版本管理,最后上传到github当中.</p>\n<h2 id=\"安装主要过程\"><a href=\"#安装主要过程\" class=\"headerlink\" title=\"安装主要过程\"></a>安装主要过程</h2><blockquote>\n<p>我希望可以通过执行一条命令,把任何环境配置成自己最熟悉趁手的环境.</p>\n</blockquote>\n<p>一键脚本主要包含如下几个步骤:</p>\n<ul>\n<li><p>安装必要的软件,比如<a href=\"https://github.com/technicalpickles/homesick\" target=\"_blank\" rel=\"external\">homesick</a>,git,cmake,ctags等.</p>\n</li>\n<li><p>备份现在的配置文件.</p>\n</li>\n<li><p>安装zsh框架<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a></p>\n</li>\n<li><p>创建软链接</p>\n</li>\n<li><p>安装vim框架<a href=\"https://github.com/spf13/spf13-vim\" target=\"_blank\" rel=\"external\">spf13</a></p>\n</li>\n<li><p>安装小工具<a href=\"https://github.com/nvbn/thefuck\" target=\"_blank\" rel=\"external\">thefuck</a></p>\n</li>\n<li><p>尝试编译<a href=\"https://github.com/Valloric/YouCompleteMe\" target=\"_blank\" rel=\"external\">YouCompleteMe</a></p>\n</li>\n</ul>\n<h2 id=\"安装说明\"><a href=\"#安装说明\" class=\"headerlink\" title=\"安装说明\"></a>安装说明</h2><p>前面我们已经提及了我们的主要过程,程序员当然不应该重复造轮子,所以我选用了大量的现有组件.</p>\n<ul>\n<li>下载配置,创建软链接,同步配置</li>\n</ul>\n<blockquote>\n<p>使用homesick,使用方法和命令非常类似于git,缺点是没有提供原有文件的备份.</p>\n</blockquote>\n<ul>\n<li>zsh配置</li>\n</ul>\n<blockquote>\n<p>直接使用了很火的oh-my-zsh</p>\n</blockquote>\n<ul>\n<li>vim配置</li>\n</ul>\n<blockquote>\n<p>vim真的是博大精深,用了这么久了,还是每次都有新发现,真的不愧是是编辑器之神.我使用了spf13的vim配置.基本主流插件都有了,而且比较容易进行个人定制.</p>\n</blockquote>\n<ul>\n<li>我的工作</li>\n</ul>\n<blockquote>\n<p>我主要做的就是使用shell脚本备份原有配置,同时尽量把安装过程自动化.我只在很有限的几台电脑上测试过.如果使用过程中有问题,请issue告诉我.</p>\n</blockquote>\n<h2 id=\"私人定制\"><a href=\"#私人定制\" class=\"headerlink\" title=\"私人定制\"></a>私人定制</h2><p>每个人都有自己的喜好,我的配置你不一定趁手.如果想进行个人定制,简单的三步就可以了.</p>\n<ol>\n<li><p>进入<a href=\"https://github.com/chengyi818/dotfiles\" target=\"_blank\" rel=\"external\">github</a>,fork我的仓库.</p>\n</li>\n<li><p>将README.md中的一键安装脚本路径修改为你自己的仓库.</p>\n</li>\n<li><p>将仓库中的install.sh文件头部的<code>REPO_URL</code>修改为你的仓库名.</p>\n</li>\n</ol>\n<p>这样你就拥有了可以陪伴自己一生的工具箱,关于我们主要组件的使用方法请去原作者网页浏览,如果有机会,再给大家介绍.</p>\n<h2 id=\"使用小结\"><a href=\"#使用小结\" class=\"headerlink\" title=\"使用小结\"></a>使用小结</h2><p>我目前主要使用Linux Mint.我的命令终端使用konsole.tmux主要用于控制多个窗口.oh-my-zsh使得命令行操作更加高效强大.vim的配置插件让你的手指在键盘上舞蹈.</p>\n<p>如果有机会真的要尝试下,八星八钻,花30分钟,你买不了吃亏,你买不了上当.抱着试一试地态度,你真的会爱上它们.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>今天只是简要地说明了我的dotfiles.说实话,我想做这个已经很久了,一直拖.现在总算是阶段性完成了.如果有人能够受益,多使用真的是太好了.</p>\n","excerpt":"<p>本周是成胖子每周一博的第十三周:)</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在github上偶然浏览到<a href=\"https://dotfiles.github.io/\">dotfiles</a>.</p>\n<blockquote>\n<p>因为Unix及Linux下的很多配置文件都是隐藏文件,以”.”开始,所以我们用dotfiles称呼这些文件.</p>\n</blockquote>","more":"<p>dotfiles整理有三个目的:</p>\n<ul>\n<li><p>备份/存储/同步</p>\n</li>\n<li><p>学习/发现</p>\n</li>\n<li><p>分享</p>\n</li>\n</ul>\n<p>对于开发人员而言,一个代码编辑环境无疑是重中之重.我最近组装和改造了我自己的dotfiles.非常欢迎fork和使用,如果有什么问题,可以互相交流.</p>\n<p><a href=\"https://github.com/chengyi818/dotfiles\">一键下载使用</a></p>\n<h2 id=\"dotfiles原理\"><a href=\"#dotfiles原理\" class=\"headerlink\" title=\"dotfiles原理\"></a>dotfiles原理</h2><p>在类Unix环境下,用户的配置在用户主目录下.比如bashrc,vimrc.我们一般都是直接修改这里.</p>\n<p>如果有<strong>备份的需求</strong>怎么办呢?</p>\n<blockquote>\n<p>最简单的办法就是把相应的文件打包压缩,然后就可以放到网盘或者U盘当中了.</p>\n</blockquote>\n<p>可是如果我们经常不时地<strong>更新</strong>配置文件,怎么才能很方便地压缩呢?</p>\n<blockquote>\n<ul>\n<li><p>有个笨办法,我每次更新完了,我就自己手动把每个文件重新压缩下.</p>\n</li>\n<li><p>升级一下,可以写个简单地脚本,每次自动执行压缩命令</p>\n</li>\n<li><p>再升级一下,可以把所有的配置文件拉到一个文件中,然后软链接到用户主目录.</p>\n</li>\n</ul>\n</blockquote>\n<p>配置文件要怎么<strong>存储</strong>呢?</p>\n<blockquote>\n<ul>\n<li>毫无疑问,放到云上是最好的.dropbox或者百度云都还不错.</li>\n</ul>\n</blockquote>\n<p>难道我每次要自己手动<strong>同步</strong>么?</p>\n<blockquote>\n<ul>\n<li>我们现在有了<strong>github</strong>这么方便的工具,不使用一下太可惜了.</li>\n</ul>\n</blockquote>\n<p>综上,我们把常用配置放到同一个文件夹中,然后将它们链接到用户主目录.同时将这个文件夹加入git版本管理,最后上传到github当中.</p>\n<h2 id=\"安装主要过程\"><a href=\"#安装主要过程\" class=\"headerlink\" title=\"安装主要过程\"></a>安装主要过程</h2><blockquote>\n<p>我希望可以通过执行一条命令,把任何环境配置成自己最熟悉趁手的环境.</p>\n</blockquote>\n<p>一键脚本主要包含如下几个步骤:</p>\n<ul>\n<li><p>安装必要的软件,比如<a href=\"https://github.com/technicalpickles/homesick\">homesick</a>,git,cmake,ctags等.</p>\n</li>\n<li><p>备份现在的配置文件.</p>\n</li>\n<li><p>安装zsh框架<a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a></p>\n</li>\n<li><p>创建软链接</p>\n</li>\n<li><p>安装vim框架<a href=\"https://github.com/spf13/spf13-vim\">spf13</a></p>\n</li>\n<li><p>安装小工具<a href=\"https://github.com/nvbn/thefuck\">thefuck</a></p>\n</li>\n<li><p>尝试编译<a href=\"https://github.com/Valloric/YouCompleteMe\">YouCompleteMe</a></p>\n</li>\n</ul>\n<h2 id=\"安装说明\"><a href=\"#安装说明\" class=\"headerlink\" title=\"安装说明\"></a>安装说明</h2><p>前面我们已经提及了我们的主要过程,程序员当然不应该重复造轮子,所以我选用了大量的现有组件.</p>\n<ul>\n<li>下载配置,创建软链接,同步配置</li>\n</ul>\n<blockquote>\n<p>使用homesick,使用方法和命令非常类似于git,缺点是没有提供原有文件的备份.</p>\n</blockquote>\n<ul>\n<li>zsh配置</li>\n</ul>\n<blockquote>\n<p>直接使用了很火的oh-my-zsh</p>\n</blockquote>\n<ul>\n<li>vim配置</li>\n</ul>\n<blockquote>\n<p>vim真的是博大精深,用了这么久了,还是每次都有新发现,真的不愧是是编辑器之神.我使用了spf13的vim配置.基本主流插件都有了,而且比较容易进行个人定制.</p>\n</blockquote>\n<ul>\n<li>我的工作</li>\n</ul>\n<blockquote>\n<p>我主要做的就是使用shell脚本备份原有配置,同时尽量把安装过程自动化.我只在很有限的几台电脑上测试过.如果使用过程中有问题,请issue告诉我.</p>\n</blockquote>\n<h2 id=\"私人定制\"><a href=\"#私人定制\" class=\"headerlink\" title=\"私人定制\"></a>私人定制</h2><p>每个人都有自己的喜好,我的配置你不一定趁手.如果想进行个人定制,简单的三步就可以了.</p>\n<ol>\n<li><p>进入<a href=\"https://github.com/chengyi818/dotfiles\">github</a>,fork我的仓库.</p>\n</li>\n<li><p>将README.md中的一键安装脚本路径修改为你自己的仓库.</p>\n</li>\n<li><p>将仓库中的install.sh文件头部的<code>REPO_URL</code>修改为你的仓库名.</p>\n</li>\n</ol>\n<p>这样你就拥有了可以陪伴自己一生的工具箱,关于我们主要组件的使用方法请去原作者网页浏览,如果有机会,再给大家介绍.</p>\n<h2 id=\"使用小结\"><a href=\"#使用小结\" class=\"headerlink\" title=\"使用小结\"></a>使用小结</h2><p>我目前主要使用Linux Mint.我的命令终端使用konsole.tmux主要用于控制多个窗口.oh-my-zsh使得命令行操作更加高效强大.vim的配置插件让你的手指在键盘上舞蹈.</p>\n<p>如果有机会真的要尝试下,八星八钻,花30分钟,你买不了吃亏,你买不了上当.抱着试一试地态度,你真的会爱上它们.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>今天只是简要地说明了我的dotfiles.说实话,我想做这个已经很久了,一直拖.现在总算是阶段性完成了.如果有人能够受益,多使用真的是太好了.</p>"},{"layout":"post","title":"翻墙之我见","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十四周:smile:\n\n---\n\n## 写在前面\n本来这周的博客就是想单纯地介绍下翻墙的工具和一些软件推荐的,捎带着介绍下最简单的原理.搜资料搜到一段话,稍有感触.\n\n>作为个搞技术的人，我们要干点疯狂的事。如果我们不动手，我们就要被比我们差的远的坏技术人员欺负。这太丢人了。眼前就是，GFW这个东西，之前是我们不抱团，让它猖狂了。现在咱们得凑一起，想出来一个办法让它郁闷一下，不能老被欺负吧。要不，等到未来，后代会嘲笑我们这些没用的家伙，就象我们说别人“你怎么不反抗？”\n\n<!--more-->\n\n我先说明我的态度:\n\n> 悄悄地进村,打枪地不要\n\n当然所谓国家防火长城[GFW](https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E)的存在,很多时候会和所谓的政治挂钩.然而中国人显然对政治是不关心,甚至说麻木也可以.\n\n我不关心政治,也无意挑战GFW.但是我还是很佩服一部分先行者.\n\n有志于了解深度细节的同学可以参见[翻墙路由器的原理与实现](https://docs.google.com/document/d/1mmMiMYbviMxJ-DhTyIGdK7OOg581LSD1CZV4XY1OMG8/pub)\n\n上面写那段话的人,我不知道是不是进号子了,那个疯狂的计划叫[西厢计划](http://gfwrev.blogspot.com/)\n\n每个人都有不同的\"翻墙\"的目的.作为程序员,我的目的就是为了用google.英语是程序员的世界语,显然百度在英文网页的搜索上还不及google.\n\n## 翻墙之前\n有个同学叫\"小明\",他想邮寄一个包裹给他在美国的表哥\"google\".\n\n可是他不知道表哥\"google\"在美国的地址,他下面该怎么办呢?他发现世界上有个地址登记薄(DNS),上面有他表哥家的地址.\n\n他把地址写在包裹上,然后把包裹交给邮政发送了出去.\n\n结果到了海关,我们的海关工作人员发现,这个表哥\"google\"还有这个地址经常从事恐怖色情活动,各种资本主义糟粕.这样可不行,我们的海关工作人员就把这个包裹给丢了.\n\n![翻墙前](http://ww3.sinaimg.cn/large/006kvZhRjw1f23ayn6ppwj30dw03gaa8.jpg)\n\n## 翻墙之后\n那\"小明\"要怎样才能把包裹寄给表哥呢?\n\n有个走私团伙,叫\"shadowsocks\".团伙里面有个两个主要成员:\n\n* 一个叫\"client\",潜伏在大陆地区,负责转运违禁物品.\n\n* 一个叫\"server\",主要在国外从事非法活动,但是很隐蔽,一般警察叔叔不知道.\n\n\"小明\"将包裹交给\"client\",然后\"client\"把包裹放进一个更大地包裹里,外面写上\"server\"的地址,最后把大包裹发送出去.\n\n\"警察叔叔\"在海关看到包裹:\n\n* 先检查了一下地址.嗯,不是黑名单上的地址.过关\n\n* 再打开包裹一看.里面东西被\"client\"搞的乱七八糟的,根本看不出啥不妥.过关\n\n就这样,大包裹顺利到了\"server\".\n\n\"server\"收到大包裹后,拆开一看,乱七八糟的.\n不过没关系,\"server\"和\"client\"事先沟通好了,知道怎么恢复.然后再把地址为\"google\"的包裹发出去.\n\n这个时候,因为包裹完全已经到了国外,\"警察叔叔\"根本管不到了.这样包裹就到了表哥\"google\"手上.\n\n![翻墙后](http://ww4.sinaimg.cn/large/006kvZhRjw1f23brs539hj30f00avmy2.jpg)\n\n## 具体操作概述\n上面瞎扯了一通,下面我们来看看\"小明\"需要做些什么?\n\n首先,\"小明\"必须知道怎么和走私团伙的\"client\"勾搭.方法很有多,我比较喜欢的是:\n\n* chrome + SwitchyOmega\n\n* proxychains\n\n其次,\"小明\"得雇佣这个走私团伙.\"client\"倒是不贵很容易找到.这个\"server\"因为在美帝的地盘上活动,花费不菲.\n\n* shadowsocks-qt5\n\n* shadowsocks server\n\n没办法太详细解释,万一被查水表就完蛋了.自己去网上找找,教程很多.实在不明白地,给我留言.\n\n### 软件推荐\n[youtube-dl](https://rg3.github.io/youtube-dl/)可以直接下载youtube上的视频.\n\n[proxychains](http://proxychains.sourceforge.net/)可以直接在命令行终端连接上shadowsocks client.\n\n两者结合,可以轻松下载youtube上的视频.值得一试.\n\n## 尾记\n热爱祖国,热爱党,我是社会主义接班人.我翻墙只是为了学习资本主义的技术更好地建设社会主义祖国.\n\n为实现中华民族的伟大复兴而努力奋斗.(此处应有国歌响起:musical_note:)\n\n同志们,下周见 :wave:\n","source":"_posts/2016-03-19-翻墙之我见.md","raw":"---\nlayout: post\ntitle: 翻墙之我见\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十四周:smile:\n\n---\n\n## 写在前面\n本来这周的博客就是想单纯地介绍下翻墙的工具和一些软件推荐的,捎带着介绍下最简单的原理.搜资料搜到一段话,稍有感触.\n\n>作为个搞技术的人，我们要干点疯狂的事。如果我们不动手，我们就要被比我们差的远的坏技术人员欺负。这太丢人了。眼前就是，GFW这个东西，之前是我们不抱团，让它猖狂了。现在咱们得凑一起，想出来一个办法让它郁闷一下，不能老被欺负吧。要不，等到未来，后代会嘲笑我们这些没用的家伙，就象我们说别人“你怎么不反抗？”\n\n<!--more-->\n\n我先说明我的态度:\n\n> 悄悄地进村,打枪地不要\n\n当然所谓国家防火长城[GFW](https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E)的存在,很多时候会和所谓的政治挂钩.然而中国人显然对政治是不关心,甚至说麻木也可以.\n\n我不关心政治,也无意挑战GFW.但是我还是很佩服一部分先行者.\n\n有志于了解深度细节的同学可以参见[翻墙路由器的原理与实现](https://docs.google.com/document/d/1mmMiMYbviMxJ-DhTyIGdK7OOg581LSD1CZV4XY1OMG8/pub)\n\n上面写那段话的人,我不知道是不是进号子了,那个疯狂的计划叫[西厢计划](http://gfwrev.blogspot.com/)\n\n每个人都有不同的\"翻墙\"的目的.作为程序员,我的目的就是为了用google.英语是程序员的世界语,显然百度在英文网页的搜索上还不及google.\n\n## 翻墙之前\n有个同学叫\"小明\",他想邮寄一个包裹给他在美国的表哥\"google\".\n\n可是他不知道表哥\"google\"在美国的地址,他下面该怎么办呢?他发现世界上有个地址登记薄(DNS),上面有他表哥家的地址.\n\n他把地址写在包裹上,然后把包裹交给邮政发送了出去.\n\n结果到了海关,我们的海关工作人员发现,这个表哥\"google\"还有这个地址经常从事恐怖色情活动,各种资本主义糟粕.这样可不行,我们的海关工作人员就把这个包裹给丢了.\n\n![翻墙前](http://ww3.sinaimg.cn/large/006kvZhRjw1f23ayn6ppwj30dw03gaa8.jpg)\n\n## 翻墙之后\n那\"小明\"要怎样才能把包裹寄给表哥呢?\n\n有个走私团伙,叫\"shadowsocks\".团伙里面有个两个主要成员:\n\n* 一个叫\"client\",潜伏在大陆地区,负责转运违禁物品.\n\n* 一个叫\"server\",主要在国外从事非法活动,但是很隐蔽,一般警察叔叔不知道.\n\n\"小明\"将包裹交给\"client\",然后\"client\"把包裹放进一个更大地包裹里,外面写上\"server\"的地址,最后把大包裹发送出去.\n\n\"警察叔叔\"在海关看到包裹:\n\n* 先检查了一下地址.嗯,不是黑名单上的地址.过关\n\n* 再打开包裹一看.里面东西被\"client\"搞的乱七八糟的,根本看不出啥不妥.过关\n\n就这样,大包裹顺利到了\"server\".\n\n\"server\"收到大包裹后,拆开一看,乱七八糟的.\n不过没关系,\"server\"和\"client\"事先沟通好了,知道怎么恢复.然后再把地址为\"google\"的包裹发出去.\n\n这个时候,因为包裹完全已经到了国外,\"警察叔叔\"根本管不到了.这样包裹就到了表哥\"google\"手上.\n\n![翻墙后](http://ww4.sinaimg.cn/large/006kvZhRjw1f23brs539hj30f00avmy2.jpg)\n\n## 具体操作概述\n上面瞎扯了一通,下面我们来看看\"小明\"需要做些什么?\n\n首先,\"小明\"必须知道怎么和走私团伙的\"client\"勾搭.方法很有多,我比较喜欢的是:\n\n* chrome + SwitchyOmega\n\n* proxychains\n\n其次,\"小明\"得雇佣这个走私团伙.\"client\"倒是不贵很容易找到.这个\"server\"因为在美帝的地盘上活动,花费不菲.\n\n* shadowsocks-qt5\n\n* shadowsocks server\n\n没办法太详细解释,万一被查水表就完蛋了.自己去网上找找,教程很多.实在不明白地,给我留言.\n\n### 软件推荐\n[youtube-dl](https://rg3.github.io/youtube-dl/)可以直接下载youtube上的视频.\n\n[proxychains](http://proxychains.sourceforge.net/)可以直接在命令行终端连接上shadowsocks client.\n\n两者结合,可以轻松下载youtube上的视频.值得一试.\n\n## 尾记\n热爱祖国,热爱党,我是社会主义接班人.我翻墙只是为了学习资本主义的技术更好地建设社会主义祖国.\n\n为实现中华民族的伟大复兴而努力奋斗.(此处应有国歌响起:musical_note:)\n\n同志们,下周见 :wave:\n","slug":"翻墙之我见","published":1,"date":"2016-03-18T16:00:00.000Z","updated":"2016-04-07T06:39:48.237Z","photos":[],"link":"","_id":"cimpzdpok001mm1f1n1c0lfye","content":"<p>本周是成胖子每周一博的第十四周:smile:</p>\n<hr>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本来这周的博客就是想单纯地介绍下翻墙的工具和一些软件推荐的,捎带着介绍下最简单的原理.搜资料搜到一段话,稍有感触.</p>\n<blockquote>\n<p>作为个搞技术的人，我们要干点疯狂的事。如果我们不动手，我们就要被比我们差的远的坏技术人员欺负。这太丢人了。眼前就是，GFW这个东西，之前是我们不抱团，让它猖狂了。现在咱们得凑一起，想出来一个办法让它郁闷一下，不能老被欺负吧。要不，等到未来，后代会嘲笑我们这些没用的家伙，就象我们说别人“你怎么不反抗？”</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>我先说明我的态度:</p>\n<blockquote>\n<p>悄悄地进村,打枪地不要</p>\n</blockquote>\n<p>当然所谓国家防火长城<a href=\"https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E\" target=\"_blank\" rel=\"external\">GFW</a>的存在,很多时候会和所谓的政治挂钩.然而中国人显然对政治是不关心,甚至说麻木也可以.</p>\n<p>我不关心政治,也无意挑战GFW.但是我还是很佩服一部分先行者.</p>\n<p>有志于了解深度细节的同学可以参见<a href=\"https://docs.google.com/document/d/1mmMiMYbviMxJ-DhTyIGdK7OOg581LSD1CZV4XY1OMG8/pub\" target=\"_blank\" rel=\"external\">翻墙路由器的原理与实现</a></p>\n<p>上面写那段话的人,我不知道是不是进号子了,那个疯狂的计划叫<a href=\"http://gfwrev.blogspot.com/\" target=\"_blank\" rel=\"external\">西厢计划</a></p>\n<p>每个人都有不同的”翻墙”的目的.作为程序员,我的目的就是为了用google.英语是程序员的世界语,显然百度在英文网页的搜索上还不及google.</p>\n<h2 id=\"翻墙之前\"><a href=\"#翻墙之前\" class=\"headerlink\" title=\"翻墙之前\"></a>翻墙之前</h2><p>有个同学叫”小明”,他想邮寄一个包裹给他在美国的表哥”google”.</p>\n<p>可是他不知道表哥”google”在美国的地址,他下面该怎么办呢?他发现世界上有个地址登记薄(DNS),上面有他表哥家的地址.</p>\n<p>他把地址写在包裹上,然后把包裹交给邮政发送了出去.</p>\n<p>结果到了海关,我们的海关工作人员发现,这个表哥”google”还有这个地址经常从事恐怖色情活动,各种资本主义糟粕.这样可不行,我们的海关工作人员就把这个包裹给丢了.</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006kvZhRjw1f23ayn6ppwj30dw03gaa8.jpg\" alt=\"翻墙前\"></p>\n<h2 id=\"翻墙之后\"><a href=\"#翻墙之后\" class=\"headerlink\" title=\"翻墙之后\"></a>翻墙之后</h2><p>那”小明”要怎样才能把包裹寄给表哥呢?</p>\n<p>有个走私团伙,叫”shadowsocks”.团伙里面有个两个主要成员:</p>\n<ul>\n<li><p>一个叫”client”,潜伏在大陆地区,负责转运违禁物品.</p>\n</li>\n<li><p>一个叫”server”,主要在国外从事非法活动,但是很隐蔽,一般警察叔叔不知道.</p>\n</li>\n</ul>\n<p>“小明”将包裹交给”client”,然后”client”把包裹放进一个更大地包裹里,外面写上”server”的地址,最后把大包裹发送出去.</p>\n<p>“警察叔叔”在海关看到包裹:</p>\n<ul>\n<li><p>先检查了一下地址.嗯,不是黑名单上的地址.过关</p>\n</li>\n<li><p>再打开包裹一看.里面东西被”client”搞的乱七八糟的,根本看不出啥不妥.过关</p>\n</li>\n</ul>\n<p>就这样,大包裹顺利到了”server”.</p>\n<p>“server”收到大包裹后,拆开一看,乱七八糟的.<br>不过没关系,”server”和”client”事先沟通好了,知道怎么恢复.然后再把地址为”google”的包裹发出去.</p>\n<p>这个时候,因为包裹完全已经到了国外,”警察叔叔”根本管不到了.这样包裹就到了表哥”google”手上.</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006kvZhRjw1f23brs539hj30f00avmy2.jpg\" alt=\"翻墙后\"></p>\n<h2 id=\"具体操作概述\"><a href=\"#具体操作概述\" class=\"headerlink\" title=\"具体操作概述\"></a>具体操作概述</h2><p>上面瞎扯了一通,下面我们来看看”小明”需要做些什么?</p>\n<p>首先,”小明”必须知道怎么和走私团伙的”client”勾搭.方法很有多,我比较喜欢的是:</p>\n<ul>\n<li><p>chrome + SwitchyOmega</p>\n</li>\n<li><p>proxychains</p>\n</li>\n</ul>\n<p>其次,”小明”得雇佣这个走私团伙.”client”倒是不贵很容易找到.这个”server”因为在美帝的地盘上活动,花费不菲.</p>\n<ul>\n<li><p>shadowsocks-qt5</p>\n</li>\n<li><p>shadowsocks server</p>\n</li>\n</ul>\n<p>没办法太详细解释,万一被查水表就完蛋了.自己去网上找找,教程很多.实在不明白地,给我留言.</p>\n<h3 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h3><p><a href=\"https://rg3.github.io/youtube-dl/\" target=\"_blank\" rel=\"external\">youtube-dl</a>可以直接下载youtube上的视频.</p>\n<p><a href=\"http://proxychains.sourceforge.net/\" target=\"_blank\" rel=\"external\">proxychains</a>可以直接在命令行终端连接上shadowsocks client.</p>\n<p>两者结合,可以轻松下载youtube上的视频.值得一试.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>热爱祖国,热爱党,我是社会主义接班人.我翻墙只是为了学习资本主义的技术更好地建设社会主义祖国.</p>\n<p>为实现中华民族的伟大复兴而努力奋斗.(此处应有国歌响起:musical_note:)</p>\n<p>同志们,下周见 :wave:</p>\n","excerpt":"<p>本周是成胖子每周一博的第十四周:smile:</p>\n<hr>\n<h2 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h2><p>本来这周的博客就是想单纯地介绍下翻墙的工具和一些软件推荐的,捎带着介绍下最简单的原理.搜资料搜到一段话,稍有感触.</p>\n<blockquote>\n<p>作为个搞技术的人，我们要干点疯狂的事。如果我们不动手，我们就要被比我们差的远的坏技术人员欺负。这太丢人了。眼前就是，GFW这个东西，之前是我们不抱团，让它猖狂了。现在咱们得凑一起，想出来一个办法让它郁闷一下，不能老被欺负吧。要不，等到未来，后代会嘲笑我们这些没用的家伙，就象我们说别人“你怎么不反抗？”</p>\n</blockquote>","more":"<p>我先说明我的态度:</p>\n<blockquote>\n<p>悄悄地进村,打枪地不要</p>\n</blockquote>\n<p>当然所谓国家防火长城<a href=\"https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E\">GFW</a>的存在,很多时候会和所谓的政治挂钩.然而中国人显然对政治是不关心,甚至说麻木也可以.</p>\n<p>我不关心政治,也无意挑战GFW.但是我还是很佩服一部分先行者.</p>\n<p>有志于了解深度细节的同学可以参见<a href=\"https://docs.google.com/document/d/1mmMiMYbviMxJ-DhTyIGdK7OOg581LSD1CZV4XY1OMG8/pub\">翻墙路由器的原理与实现</a></p>\n<p>上面写那段话的人,我不知道是不是进号子了,那个疯狂的计划叫<a href=\"http://gfwrev.blogspot.com/\">西厢计划</a></p>\n<p>每个人都有不同的”翻墙”的目的.作为程序员,我的目的就是为了用google.英语是程序员的世界语,显然百度在英文网页的搜索上还不及google.</p>\n<h2 id=\"翻墙之前\"><a href=\"#翻墙之前\" class=\"headerlink\" title=\"翻墙之前\"></a>翻墙之前</h2><p>有个同学叫”小明”,他想邮寄一个包裹给他在美国的表哥”google”.</p>\n<p>可是他不知道表哥”google”在美国的地址,他下面该怎么办呢?他发现世界上有个地址登记薄(DNS),上面有他表哥家的地址.</p>\n<p>他把地址写在包裹上,然后把包裹交给邮政发送了出去.</p>\n<p>结果到了海关,我们的海关工作人员发现,这个表哥”google”还有这个地址经常从事恐怖色情活动,各种资本主义糟粕.这样可不行,我们的海关工作人员就把这个包裹给丢了.</p>\n<p><img src=\"http://ww3.sinaimg.cn/large/006kvZhRjw1f23ayn6ppwj30dw03gaa8.jpg\" alt=\"翻墙前\"></p>\n<h2 id=\"翻墙之后\"><a href=\"#翻墙之后\" class=\"headerlink\" title=\"翻墙之后\"></a>翻墙之后</h2><p>那”小明”要怎样才能把包裹寄给表哥呢?</p>\n<p>有个走私团伙,叫”shadowsocks”.团伙里面有个两个主要成员:</p>\n<ul>\n<li><p>一个叫”client”,潜伏在大陆地区,负责转运违禁物品.</p>\n</li>\n<li><p>一个叫”server”,主要在国外从事非法活动,但是很隐蔽,一般警察叔叔不知道.</p>\n</li>\n</ul>\n<p>“小明”将包裹交给”client”,然后”client”把包裹放进一个更大地包裹里,外面写上”server”的地址,最后把大包裹发送出去.</p>\n<p>“警察叔叔”在海关看到包裹:</p>\n<ul>\n<li><p>先检查了一下地址.嗯,不是黑名单上的地址.过关</p>\n</li>\n<li><p>再打开包裹一看.里面东西被”client”搞的乱七八糟的,根本看不出啥不妥.过关</p>\n</li>\n</ul>\n<p>就这样,大包裹顺利到了”server”.</p>\n<p>“server”收到大包裹后,拆开一看,乱七八糟的.<br>不过没关系,”server”和”client”事先沟通好了,知道怎么恢复.然后再把地址为”google”的包裹发出去.</p>\n<p>这个时候,因为包裹完全已经到了国外,”警察叔叔”根本管不到了.这样包裹就到了表哥”google”手上.</p>\n<p><img src=\"http://ww4.sinaimg.cn/large/006kvZhRjw1f23brs539hj30f00avmy2.jpg\" alt=\"翻墙后\"></p>\n<h2 id=\"具体操作概述\"><a href=\"#具体操作概述\" class=\"headerlink\" title=\"具体操作概述\"></a>具体操作概述</h2><p>上面瞎扯了一通,下面我们来看看”小明”需要做些什么?</p>\n<p>首先,”小明”必须知道怎么和走私团伙的”client”勾搭.方法很有多,我比较喜欢的是:</p>\n<ul>\n<li><p>chrome + SwitchyOmega</p>\n</li>\n<li><p>proxychains</p>\n</li>\n</ul>\n<p>其次,”小明”得雇佣这个走私团伙.”client”倒是不贵很容易找到.这个”server”因为在美帝的地盘上活动,花费不菲.</p>\n<ul>\n<li><p>shadowsocks-qt5</p>\n</li>\n<li><p>shadowsocks server</p>\n</li>\n</ul>\n<p>没办法太详细解释,万一被查水表就完蛋了.自己去网上找找,教程很多.实在不明白地,给我留言.</p>\n<h3 id=\"软件推荐\"><a href=\"#软件推荐\" class=\"headerlink\" title=\"软件推荐\"></a>软件推荐</h3><p><a href=\"https://rg3.github.io/youtube-dl/\">youtube-dl</a>可以直接下载youtube上的视频.</p>\n<p><a href=\"http://proxychains.sourceforge.net/\">proxychains</a>可以直接在命令行终端连接上shadowsocks client.</p>\n<p>两者结合,可以轻松下载youtube上的视频.值得一试.</p>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p>热爱祖国,热爱党,我是社会主义接班人.我翻墙只是为了学习资本主义的技术更好地建设社会主义祖国.</p>\n<p>为实现中华民族的伟大复兴而努力奋斗.(此处应有国歌响起:musical_note:)</p>\n<p>同志们,下周见 :wave:</p>"},{"layout":"post","title":"平铺式窗口管理器i3","comments":1,"analytics":true,"_content":"\n本周是成胖子每周一博的第十五周 :smile:\n\n---\n\n## 前言\n![最终效果图](http://ww1.sinaimg.cn/large/006kvZhRjw1f2bm4kl8afj30af06imyd.jpg)\n\n小伙伴们感觉这个桌面炫酷不炫酷?\n\n<!--more-->\n\n[窗口管理器](http://yumminhuang.github.io/blog/2015/03/29/i3-%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8%E7%AE%80%E4%BB%8B/)可以分为平铺式和层叠式,通常我们使用的都是层叠式,也就是每个窗口都可以相互重叠.\n\n对于**多显示器**或者**大尺寸显示器**而言,平铺式窗口往往更有优势.\n\n常见的平铺式管理器有:\n\n* [xmond](http://xmonad.org/)\n*\n* [awesome](https://awesome.naquadah.org/)\n*\n* [i3wm](https://i3wm.org/)\n\n经过筛选,我最终选择了i3.\n\n---\n\n## 安装与使用\n\n### 安装\n\nUbuntu稳定版本安装方法:\n\n```\n# echo \"deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe\" >> /etc/apt/sources.list\n# apt-get update\n# apt-get --allow-unauthenticated install sur5r-keyring\n# apt-get update\n# apt-get install i3 i3lock dmenu i3status\n```\n\n其他安装方法参见[这里](http://i3wm.org/downloads/)\n\n### 使用\n\n* 安装完成后,注销.\n* 在重新登陆界面,可以选择桌面窗口管理器.\n* 选择i3,输入用户名,密码登陆.\n\n----\n\n## 配置\n\n### 配置文件\n\ni3的配置文件,包括两个:\n\n1. 主配置文件\n2. 状态栏配置文件\n\n\n我的配置文件已经上传到我的[dotfiles](https://github.com/chengyi818/dotfiles)中.\n\n其中主配置文件是`home/i3/config`,状态栏配置文件是`.i3status.conf`.\n可以直接下载使用.\n\n### 说明\n* 如果需要增加开机启动的程序或者脚本,可以仿照主配置文件最后一行的写法,添加自定义的开机执行程序.\n\n## 我的快捷键\n\n根据我的需求,我重新定制了部分快捷键,请参见配置文件中的说明.\n\n### 常用快捷键\nMOD键被映射为windows键,也就是左手边Alt左边的键.\n\n* MOD + h,j,k,l：移动屏幕焦点；\n* MOD + Shift + h,j,k,l：移动容器；\n* MOD + v：垂直分割容器；\n* MOD + z：水平分割容器；\n* MOD + d：打开应用程序启动器Dmenu；\n* MOD + Enter：打开终端。\n* MOD + Shift + q : 关闭当前程序\n* MOD + Shift + e : 退出i3,可以重新选择窗口管理器.\n\n## 尾记\n*i3*是面向高级用户的窗口管理工具,使用起来让你很有极客范.大量的操作将使用键盘完成.\n很有意思,值得尝试.\n\n下周再见 :wave:\n","source":"_posts/2016-03-27-平铺窗口管理器i3.md","raw":"---\nlayout: post\ntitle: 平铺式窗口管理器i3\ncategory: 工具\ntags: 工具说\ncomments: true\nanalytics: true\n---\n\n本周是成胖子每周一博的第十五周 :smile:\n\n---\n\n## 前言\n![最终效果图](http://ww1.sinaimg.cn/large/006kvZhRjw1f2bm4kl8afj30af06imyd.jpg)\n\n小伙伴们感觉这个桌面炫酷不炫酷?\n\n<!--more-->\n\n[窗口管理器](http://yumminhuang.github.io/blog/2015/03/29/i3-%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8%E7%AE%80%E4%BB%8B/)可以分为平铺式和层叠式,通常我们使用的都是层叠式,也就是每个窗口都可以相互重叠.\n\n对于**多显示器**或者**大尺寸显示器**而言,平铺式窗口往往更有优势.\n\n常见的平铺式管理器有:\n\n* [xmond](http://xmonad.org/)\n*\n* [awesome](https://awesome.naquadah.org/)\n*\n* [i3wm](https://i3wm.org/)\n\n经过筛选,我最终选择了i3.\n\n---\n\n## 安装与使用\n\n### 安装\n\nUbuntu稳定版本安装方法:\n\n```\n# echo \"deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe\" >> /etc/apt/sources.list\n# apt-get update\n# apt-get --allow-unauthenticated install sur5r-keyring\n# apt-get update\n# apt-get install i3 i3lock dmenu i3status\n```\n\n其他安装方法参见[这里](http://i3wm.org/downloads/)\n\n### 使用\n\n* 安装完成后,注销.\n* 在重新登陆界面,可以选择桌面窗口管理器.\n* 选择i3,输入用户名,密码登陆.\n\n----\n\n## 配置\n\n### 配置文件\n\ni3的配置文件,包括两个:\n\n1. 主配置文件\n2. 状态栏配置文件\n\n\n我的配置文件已经上传到我的[dotfiles](https://github.com/chengyi818/dotfiles)中.\n\n其中主配置文件是`home/i3/config`,状态栏配置文件是`.i3status.conf`.\n可以直接下载使用.\n\n### 说明\n* 如果需要增加开机启动的程序或者脚本,可以仿照主配置文件最后一行的写法,添加自定义的开机执行程序.\n\n## 我的快捷键\n\n根据我的需求,我重新定制了部分快捷键,请参见配置文件中的说明.\n\n### 常用快捷键\nMOD键被映射为windows键,也就是左手边Alt左边的键.\n\n* MOD + h,j,k,l：移动屏幕焦点；\n* MOD + Shift + h,j,k,l：移动容器；\n* MOD + v：垂直分割容器；\n* MOD + z：水平分割容器；\n* MOD + d：打开应用程序启动器Dmenu；\n* MOD + Enter：打开终端。\n* MOD + Shift + q : 关闭当前程序\n* MOD + Shift + e : 退出i3,可以重新选择窗口管理器.\n\n## 尾记\n*i3*是面向高级用户的窗口管理工具,使用起来让你很有极客范.大量的操作将使用键盘完成.\n很有意思,值得尝试.\n\n下周再见 :wave:\n","slug":"平铺窗口管理器i3","published":1,"date":"2016-03-26T16:00:00.000Z","updated":"2016-04-07T07:01:42.833Z","photos":[],"link":"","_id":"cimpzdpol001pm1f1jnlfzgsq","content":"<p>本周是成胖子每周一博的第十五周 :smile:</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><img src=\"http://ww1.sinaimg.cn/large/006kvZhRjw1f2bm4kl8afj30af06imyd.jpg\" alt=\"最终效果图\"></p>\n<p>小伙伴们感觉这个桌面炫酷不炫酷?</p>\n<a id=\"more\"></a>\n<p><a href=\"http://yumminhuang.github.io/blog/2015/03/29/i3-%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8%E7%AE%80%E4%BB%8B/\" target=\"_blank\" rel=\"external\">窗口管理器</a>可以分为平铺式和层叠式,通常我们使用的都是层叠式,也就是每个窗口都可以相互重叠.</p>\n<p>对于<strong>多显示器</strong>或者<strong>大尺寸显示器</strong>而言,平铺式窗口往往更有优势.</p>\n<p>常见的平铺式管理器有:</p>\n<ul>\n<li><a href=\"http://xmonad.org/\" target=\"_blank\" rel=\"external\">xmond</a><br>*</li>\n<li><a href=\"https://awesome.naquadah.org/\" target=\"_blank\" rel=\"external\">awesome</a><br>*</li>\n<li><a href=\"https://i3wm.org/\" target=\"_blank\" rel=\"external\">i3wm</a></li>\n</ul>\n<p>经过筛选,我最终选择了i3.</p>\n<hr>\n<h2 id=\"安装与使用\"><a href=\"#安装与使用\" class=\"headerlink\" title=\"安装与使用\"></a>安装与使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ubuntu稳定版本安装方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class=\"line\"># apt-get update</span><br><span class=\"line\"># apt-get --allow-unauthenticated install sur5r-keyring</span><br><span class=\"line\"># apt-get update</span><br><span class=\"line\"># apt-get install i3 i3lock dmenu i3status</span><br></pre></td></tr></table></figure>\n<p>其他安装方法参见<a href=\"http://i3wm.org/downloads/\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li>安装完成后,注销.</li>\n<li>在重新登陆界面,可以选择桌面窗口管理器.</li>\n<li>选择i3,输入用户名,密码登陆.</li>\n</ul>\n<hr>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>i3的配置文件,包括两个:</p>\n<ol>\n<li>主配置文件</li>\n<li>状态栏配置文件</li>\n</ol>\n<p>我的配置文件已经上传到我的<a href=\"https://github.com/chengyi818/dotfiles\" target=\"_blank\" rel=\"external\">dotfiles</a>中.</p>\n<p>其中主配置文件是<code>home/i3/config</code>,状态栏配置文件是<code>.i3status.conf</code>.<br>可以直接下载使用.</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>如果需要增加开机启动的程序或者脚本,可以仿照主配置文件最后一行的写法,添加自定义的开机执行程序.</li>\n</ul>\n<h2 id=\"我的快捷键\"><a href=\"#我的快捷键\" class=\"headerlink\" title=\"我的快捷键\"></a>我的快捷键</h2><p>根据我的需求,我重新定制了部分快捷键,请参见配置文件中的说明.</p>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p>MOD键被映射为windows键,也就是左手边Alt左边的键.</p>\n<ul>\n<li>MOD + h,j,k,l：移动屏幕焦点；</li>\n<li>MOD + Shift + h,j,k,l：移动容器；</li>\n<li>MOD + v：垂直分割容器；</li>\n<li>MOD + z：水平分割容器；</li>\n<li>MOD + d：打开应用程序启动器Dmenu；</li>\n<li>MOD + Enter：打开终端。</li>\n<li>MOD + Shift + q : 关闭当前程序</li>\n<li>MOD + Shift + e : 退出i3,可以重新选择窗口管理器.</li>\n</ul>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p><em>i3</em>是面向高级用户的窗口管理工具,使用起来让你很有极客范.大量的操作将使用键盘完成.<br>很有意思,值得尝试.</p>\n<p>下周再见 :wave:</p>\n","excerpt":"<p>本周是成胖子每周一博的第十五周 :smile:</p>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><img src=\"http://ww1.sinaimg.cn/large/006kvZhRjw1f2bm4kl8afj30af06imyd.jpg\" alt=\"最终效果图\"></p>\n<p>小伙伴们感觉这个桌面炫酷不炫酷?</p>","more":"<p><a href=\"http://yumminhuang.github.io/blog/2015/03/29/i3-%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86%E5%99%A8%E7%AE%80%E4%BB%8B/\">窗口管理器</a>可以分为平铺式和层叠式,通常我们使用的都是层叠式,也就是每个窗口都可以相互重叠.</p>\n<p>对于<strong>多显示器</strong>或者<strong>大尺寸显示器</strong>而言,平铺式窗口往往更有优势.</p>\n<p>常见的平铺式管理器有:</p>\n<ul>\n<li><a href=\"http://xmonad.org/\">xmond</a><br>*</li>\n<li><a href=\"https://awesome.naquadah.org/\">awesome</a><br>*</li>\n<li><a href=\"https://i3wm.org/\">i3wm</a></li>\n</ul>\n<p>经过筛选,我最终选择了i3.</p>\n<hr>\n<h2 id=\"安装与使用\"><a href=\"#安装与使用\" class=\"headerlink\" title=\"安装与使用\"></a>安装与使用</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Ubuntu稳定版本安装方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># echo &quot;deb http://debian.sur5r.net/i3/ $(lsb_release -c -s) universe&quot; &gt;&gt; /etc/apt/sources.list</span><br><span class=\"line\"># apt-get update</span><br><span class=\"line\"># apt-get --allow-unauthenticated install sur5r-keyring</span><br><span class=\"line\"># apt-get update</span><br><span class=\"line\"># apt-get install i3 i3lock dmenu i3status</span><br></pre></td></tr></table></figure>\n<p>其他安装方法参见<a href=\"http://i3wm.org/downloads/\">这里</a></p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li>安装完成后,注销.</li>\n<li>在重新登陆界面,可以选择桌面窗口管理器.</li>\n<li>选择i3,输入用户名,密码登陆.</li>\n</ul>\n<hr>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>i3的配置文件,包括两个:</p>\n<ol>\n<li>主配置文件</li>\n<li>状态栏配置文件</li>\n</ol>\n<p>我的配置文件已经上传到我的<a href=\"https://github.com/chengyi818/dotfiles\">dotfiles</a>中.</p>\n<p>其中主配置文件是<code>home/i3/config</code>,状态栏配置文件是<code>.i3status.conf</code>.<br>可以直接下载使用.</p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>如果需要增加开机启动的程序或者脚本,可以仿照主配置文件最后一行的写法,添加自定义的开机执行程序.</li>\n</ul>\n<h2 id=\"我的快捷键\"><a href=\"#我的快捷键\" class=\"headerlink\" title=\"我的快捷键\"></a>我的快捷键</h2><p>根据我的需求,我重新定制了部分快捷键,请参见配置文件中的说明.</p>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p>MOD键被映射为windows键,也就是左手边Alt左边的键.</p>\n<ul>\n<li>MOD + h,j,k,l：移动屏幕焦点；</li>\n<li>MOD + Shift + h,j,k,l：移动容器；</li>\n<li>MOD + v：垂直分割容器；</li>\n<li>MOD + z：水平分割容器；</li>\n<li>MOD + d：打开应用程序启动器Dmenu；</li>\n<li>MOD + Enter：打开终端。</li>\n<li>MOD + Shift + q : 关闭当前程序</li>\n<li>MOD + Shift + e : 退出i3,可以重新选择窗口管理器.</li>\n</ul>\n<h2 id=\"尾记\"><a href=\"#尾记\" class=\"headerlink\" title=\"尾记\"></a>尾记</h2><p><em>i3</em>是面向高级用户的窗口管理工具,使用起来让你很有极客范.大量的操作将使用键盘完成.<br>很有意思,值得尝试.</p>\n<p>下周再见 :wave:</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cimpzdpn00000m1f1fqt5m3ql","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpnm000bm1f14cn37zp3"},{"post_id":"cimpzdpnf0008m1f1e2956a0q","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpnp000gm1f1f9kgmp35"},{"post_id":"cimpzdpnb0005m1f1hs2pwtq9","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpnv000km1f1shovgm95"},{"post_id":"cimpzdpnm000cm1f1f4r6oi2h","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpnx000pm1f1jgnrgwf8"},{"post_id":"cimpzdpnp000hm1f1cw6zyxtk","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpny000sm1f16i5ph3rt"},{"post_id":"cimpzdpnd0006m1f18nxtxhfk","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpo0000wm1f1m8m22qrx"},{"post_id":"cimpzdpnt000jm1f158jg2ukm","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpo1000ym1f1px7lw6tq"},{"post_id":"cimpzdpnw000om1f1kf7nehr1","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpo40012m1f1m3iibftg"},{"post_id":"cimpzdpni000am1f1hsnz3pue","category_id":"cimpzdpnv000mm1f1mwxa7qb4","_id":"cimpzdpo60015m1f1uvksgx3c"},{"post_id":"cimpzdpnx000rm1f1oatedcw5","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpob0019m1f1db080wem"},{"post_id":"cimpzdpo0000xm1f13kfamgrz","category_id":"cimpzdpnb0004m1f1zrn2uj5d","_id":"cimpzdpoc001cm1f1cwywnniz"},{"post_id":"cimpzdpo30011m1f1ps93tsxd","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpoh001gm1f1l6ksve7y"},{"post_id":"cimpzdpo50014m1f1f9iaqd5r","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpoj001jm1f18i1wyaz4"},{"post_id":"cimpzdpnz000vm1f1sn9u0tnt","category_id":"cimpzdpo20010m1f1hn8wkvez","_id":"cimpzdpol001nm1f1lpe8tk3i"},{"post_id":"cimpzdpo70018m1f1km4ylq8f","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpon001qm1f1qjrkwfh9"},{"post_id":"cimpzdpob001bm1f17belh2dw","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpoo001tm1f1mau71opb"},{"post_id":"cimpzdpof001fm1f13lgzge6f","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpoq001vm1f1zq8fcq5j"},{"post_id":"cimpzdpoi001im1f1grpzxsdj","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpor001ym1f1wzj0yskh"},{"post_id":"cimpzdpok001mm1f1n1c0lfye","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpor0020m1f17u8qj0ee"},{"post_id":"cimpzdpol001pm1f1jnlfzgsq","category_id":"cimpzdpnh0009m1f1eol6mez2","_id":"cimpzdpos0023m1f11zxdr27f"}],"PostTag":[{"post_id":"cimpzdpni000am1f1hsnz3pue","tag_id":"cimpzdpna0003m1f1436zt2l0","_id":"cimpzdpnp000fm1f1f7mekn4e"},{"post_id":"cimpzdpn00000m1f1fqt5m3ql","tag_id":"cimpzdpna0003m1f1436zt2l0","_id":"cimpzdpnt000im1f1ul2vg5sz"},{"post_id":"cimpzdpn00000m1f1fqt5m3ql","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpnw000nm1f1vr7xih05"},{"post_id":"cimpzdpnb0005m1f1hs2pwtq9","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpnx000qm1f1d72g8n2y"},{"post_id":"cimpzdpnd0006m1f18nxtxhfk","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpnz000um1f1821h01kr"},{"post_id":"cimpzdpnf0008m1f1e2956a0q","tag_id":"cimpzdpny000tm1f1lzg4joo9","_id":"cimpzdpo40013m1f16m60b4gz"},{"post_id":"cimpzdpo30011m1f1ps93tsxd","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpo70017m1f16akx6qxh"},{"post_id":"cimpzdpo50014m1f1f9iaqd5r","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpob001am1f1qp61qrco"},{"post_id":"cimpzdpo70018m1f1km4ylq8f","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpoe001dm1f1bezon2gs"},{"post_id":"cimpzdpnm000cm1f1f4r6oi2h","tag_id":"cimpzdpny000tm1f1lzg4joo9","_id":"cimpzdpoh001hm1f1l84upy92"},{"post_id":"cimpzdpnm000cm1f1f4r6oi2h","tag_id":"cimpzdpo60016m1f1t2u2o1vf","_id":"cimpzdpok001km1f121zqgyfc"},{"post_id":"cimpzdpob001bm1f17belh2dw","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpol001om1f1vpo97y98"},{"post_id":"cimpzdpof001fm1f13lgzge6f","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpoo001rm1f1y616glek"},{"post_id":"cimpzdpoi001im1f1grpzxsdj","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpoq001um1f1i1q2y4kj"},{"post_id":"cimpzdpok001mm1f1n1c0lfye","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpor001wm1f1vui87xtj"},{"post_id":"cimpzdpol001pm1f1jnlfzgsq","tag_id":"cimpzdpnf0007m1f119h0qwre","_id":"cimpzdpor001zm1f1tlpo9jvv"},{"post_id":"cimpzdpnp000hm1f1cw6zyxtk","tag_id":"cimpzdpny000tm1f1lzg4joo9","_id":"cimpzdpor0021m1f19u6yh01d"},{"post_id":"cimpzdpnp000hm1f1cw6zyxtk","tag_id":"cimpzdpok001lm1f10q977i6v","_id":"cimpzdpos0024m1f11wvl5s53"},{"post_id":"cimpzdpnp000hm1f1cw6zyxtk","tag_id":"cimpzdpo60016m1f1t2u2o1vf","_id":"cimpzdpos0025m1f1lysmdqdl"},{"post_id":"cimpzdpnt000jm1f158jg2ukm","tag_id":"cimpzdpny000tm1f1lzg4joo9","_id":"cimpzdpot0028m1f19zgoy1bl"},{"post_id":"cimpzdpnt000jm1f158jg2ukm","tag_id":"cimpzdpok001lm1f10q977i6v","_id":"cimpzdpot0029m1f1jblg6t3y"},{"post_id":"cimpzdpnt000jm1f158jg2ukm","tag_id":"cimpzdpo60016m1f1t2u2o1vf","_id":"cimpzdpou002bm1f1y7of40ue"},{"post_id":"cimpzdpnw000om1f1kf7nehr1","tag_id":"cimpzdpny000tm1f1lzg4joo9","_id":"cimpzdpou002em1f1z6kmhuha"},{"post_id":"cimpzdpnw000om1f1kf7nehr1","tag_id":"cimpzdpok001lm1f10q977i6v","_id":"cimpzdpov002fm1f18id08dwl"},{"post_id":"cimpzdpnw000om1f1kf7nehr1","tag_id":"cimpzdpo60016m1f1t2u2o1vf","_id":"cimpzdpov002hm1f1x2n3bjde"},{"post_id":"cimpzdpnx000rm1f1oatedcw5","tag_id":"cimpzdpok001lm1f10q977i6v","_id":"cimpzdpov002km1f1pxp1u2as"},{"post_id":"cimpzdpnx000rm1f1oatedcw5","tag_id":"cimpzdpny000tm1f1lzg4joo9","_id":"cimpzdpov002lm1f10pust106"},{"post_id":"cimpzdpnx000rm1f1oatedcw5","tag_id":"cimpzdpo60016m1f1t2u2o1vf","_id":"cimpzdpow002nm1f1rniadygc"},{"post_id":"cimpzdpnz000vm1f1sn9u0tnt","tag_id":"cimpzdpov002jm1f17z2aups4","_id":"cimpzdpow002om1f1cvpwau22"},{"post_id":"cimpzdpo0000xm1f13kfamgrz","tag_id":"cimpzdpny000tm1f1lzg4joo9","_id":"cimpzdpow002qm1f1vc9wkqw1"},{"post_id":"cimpzdpo0000xm1f13kfamgrz","tag_id":"cimpzdpok001lm1f10q977i6v","_id":"cimpzdpow002rm1f1thvesa01"},{"post_id":"cimpzdpo0000xm1f13kfamgrz","tag_id":"cimpzdpo60016m1f1t2u2o1vf","_id":"cimpzdpow002sm1f1n83q4ag5"}],"Tag":[{"name":"Linux","_id":"cimpzdpna0003m1f1436zt2l0"},{"name":"工具说","_id":"cimpzdpnf0007m1f119h0qwre"},{"name":"openwrt","_id":"cimpzdpny000tm1f1lzg4joo9"},{"name":"深度","_id":"cimpzdpo60016m1f1t2u2o1vf"},{"name":"makefile","_id":"cimpzdpok001lm1f10q977i6v"},{"name":"lxc","_id":"cimpzdpov002jm1f17z2aups4"}]}}